/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPrimexDNSStorageV2Interface extends ethers.utils.Interface {
  functions: {
    "aavePool()": FunctionFragment;
    "adminWithdrawalDelay()": FunctionFragment;
    "buckets(string)": FunctionFragment;
    "cmTypeToAddress(uint256)": FunctionFragment;
    "delistingDelay()": FunctionFragment;
    "dexAdapter()": FunctionFragment;
    "dexes(string)": FunctionFragment;
    "feeRates(uint8,address)": FunctionFragment;
    "feeRestrictions(uint8)": FunctionFragment;
    "pmx()": FunctionFragment;
    "registry()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buckets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cmTypeToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cmTypeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {};
}

export class IPrimexDNSStorageV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimexDNSStorageV2Interface;

  functions: {
    aavePool(overrides?: CallOverrides): Promise<[string]>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber, BigNumber]>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delistingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    dexAdapter(overrides?: CallOverrides): Promise<[string]>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeRestrictions(
      _orderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minProtocolFee: BigNumber;
        maxProtocolFee: BigNumber;
      }
    >;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  aavePool(overrides?: CallOverrides): Promise<string>;

  adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  buckets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, number, BigNumber, BigNumber]>;

  cmTypeToAddress(
    cmType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  dexAdapter(overrides?: CallOverrides): Promise<string>;

  dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

  feeRates(
    _orderType: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeRestrictions(
    _orderType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      minProtocolFee: BigNumber;
      maxProtocolFee: BigNumber;
    }
  >;

  pmx(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aavePool(overrides?: CallOverrides): Promise<string>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber, BigNumber]>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    dexAdapter(overrides?: CallOverrides): Promise<string>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRestrictions(
      _orderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minProtocolFee: BigNumber;
        maxProtocolFee: BigNumber;
      }
    >;

    pmx(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    dexAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRestrictions(
      _orderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWithdrawalDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRestrictions(
      _orderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
