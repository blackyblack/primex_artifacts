/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperRewardDistributorInterface extends ethers.utils.Interface {
  functions: {
    "additionalGas()": FunctionFragment;
    "claim(uint256,uint256)": FunctionFragment;
    "dataLengthRestrictions(uint8)": FunctionFragment;
    "decreasingGasByReason(uint8)": FunctionFragment;
    "defaultMaxGasPrice()": FunctionFragment;
    "getGasCalculationParams()": FunctionFragment;
    "initialize((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,tuple[],tuple[]))": FunctionFragment;
    "keeperBalance(address)": FunctionFragment;
    "maxGasPerPosition(uint8)": FunctionFragment;
    "minPositionSizeAddend()": FunctionFragment;
    "nativePartInReward()": FunctionFragment;
    "optimisticGasCoefficient()": FunctionFragment;
    "oracleGasPriceTolerance()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "paymentModel()": FunctionFragment;
    "pmx()": FunctionFragment;
    "pmxPartInReward()": FunctionFragment;
    "positionSizeCoefficient()": FunctionFragment;
    "positionSizeCoefficientB()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "registry()": FunctionFragment;
    "setAdditionalGas(uint256)": FunctionFragment;
    "setDataLengthRestrictions(uint8,uint256,uint256)": FunctionFragment;
    "setDecreasingGasByReason(uint8,uint256)": FunctionFragment;
    "setDefaultMaxGasPrice(uint256)": FunctionFragment;
    "setMaxGasPerPosition(uint8,(uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setMinPositionSizeAddend(uint256)": FunctionFragment;
    "setNativePartInReward(uint256)": FunctionFragment;
    "setOptimisticGasCoefficient(uint256)": FunctionFragment;
    "setOracleGasPriceTolerance(uint256)": FunctionFragment;
    "setPmxPartInReward(uint256)": FunctionFragment;
    "setPositionSizeCoefficient(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateReward((address,address,uint256,uint8,uint256,uint256,uint256[],uint256,bytes,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "additionalGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataLengthRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasingGasByReason",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCalculationParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        priceOracle: string;
        registry: string;
        pmx: string;
        treasury: string;
        whiteBlackList: string;
        pmxPartInReward: BigNumberish;
        nativePartInReward: BigNumberish;
        positionSizeCoefficient: BigNumberish;
        additionalGas: BigNumberish;
        defaultMaxGasPrice: BigNumberish;
        oracleGasPriceTolerance: BigNumberish;
        paymentModel: BigNumberish;
        maxGasPerPositionParams: {
          actionType: BigNumberish;
          config: {
            baseMaxGas1: BigNumberish;
            baseMaxGas2: BigNumberish;
            multiplier1: BigNumberish;
            multiplier2: BigNumberish;
            inflectionPoint: BigNumberish;
          };
        }[];
        decreasingGasByReasonParams: {
          reason: BigNumberish;
          amount: BigNumberish;
        }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSizeAddend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativePartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticGasCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleGasPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pmxPartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficientB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdditionalGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataLengthRestrictions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecreasingGasByReason",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPerPosition",
    values: [
      BigNumberish,
      {
        baseMaxGas1: BigNumberish;
        baseMaxGas2: BigNumberish;
        multiplier1: BigNumberish;
        multiplier2: BigNumberish;
        inflectionPoint: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSizeAddend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativePartInReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimisticGasCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleGasPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPmxPartInReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionSizeCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [
      {
        keeper: string;
        positionAsset: string;
        positionSize: BigNumberish;
        action: BigNumberish;
        numberOfActions: BigNumberish;
        gasSpent: BigNumberish;
        decreasingCounter: BigNumberish[];
        routesLength: BigNumberish;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "additionalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataLengthRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasingGasByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keeperBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSizeAddend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativePartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticGasCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleGasPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pmxPartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficientB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdditionalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataLengthRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecreasingGasByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSizeAddend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativePartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimisticGasCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleGasPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPmxPartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionSizeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;

  events: {
    "AdditionalGasChanged(uint256)": EventFragment;
    "ClaimFees(address,address,uint256)": EventFragment;
    "DataLengthRestrictionsChanged(uint8,uint256,uint256)": EventFragment;
    "DecreasingGasByReasonChanged(uint8,uint256)": EventFragment;
    "DefaultMaxGasPriceChanged(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeeperRewardUpdated(address,uint256,uint256)": EventFragment;
    "MaxGasPerPositionChanged(uint8,tuple)": EventFragment;
    "MinPositionSizeAddendChanged(uint256)": EventFragment;
    "NativePartInRewardChanged(uint256)": EventFragment;
    "OptimisticGasCoefficientChanged(uint256)": EventFragment;
    "OracleGasPriceToleranceChanged(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PmxPartInRewardChanged(uint256)": EventFragment;
    "PositionSizeCoefficientChanged(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdditionalGasChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFees"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DataLengthRestrictionsChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DecreasingGasByReasonChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultMaxGasPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperRewardUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxGasPerPositionChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinPositionSizeAddendChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativePartInRewardChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OptimisticGasCoefficientChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleGasPriceToleranceChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PmxPartInRewardChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PositionSizeCoefficientChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AdditionalGasChangedEvent = TypedEvent<
  [BigNumber] & { additionalGas: BigNumber }
>;

export type ClaimFeesEvent = TypedEvent<
  [string, string, BigNumber] & {
    keeper: string;
    asset: string;
    amount: BigNumber;
  }
>;

export type DataLengthRestrictionsChangedEvent = TypedEvent<
  [number, BigNumber, BigNumber] & {
    callingMethod: number;
    maxRoutesLength: BigNumber;
    baseLength: BigNumber;
  }
>;

export type DecreasingGasByReasonChangedEvent = TypedEvent<
  [number, BigNumber] & { reason: number; amount: BigNumber }
>;

export type DefaultMaxGasPriceChangedEvent = TypedEvent<
  [BigNumber] & { defaultMaxGasPrice: BigNumber }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type KeeperRewardUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    keeper: string;
    rewardInPmx: BigNumber;
    rewardInNativeCurrency: BigNumber;
  }
>;

export type MaxGasPerPositionChangedEvent = TypedEvent<
  [
    number,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseMaxGas1: BigNumber;
      baseMaxGas2: BigNumber;
      multiplier1: BigNumber;
      multiplier2: BigNumber;
      inflectionPoint: BigNumber;
    }
  ] & {
    actionType: number;
    config: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseMaxGas1: BigNumber;
      baseMaxGas2: BigNumber;
      multiplier1: BigNumber;
      multiplier2: BigNumber;
      inflectionPoint: BigNumber;
    };
  }
>;

export type MinPositionSizeAddendChangedEvent = TypedEvent<
  [BigNumber] & { newMinPositionSizeAddend: BigNumber }
>;

export type NativePartInRewardChangedEvent = TypedEvent<
  [BigNumber] & { nativePartInReward: BigNumber }
>;

export type OptimisticGasCoefficientChangedEvent = TypedEvent<
  [BigNumber] & { newOptimismGasCoefficient: BigNumber }
>;

export type OracleGasPriceToleranceChangedEvent = TypedEvent<
  [BigNumber] & { oracleGasPriceTolerance: BigNumber }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PmxPartInRewardChangedEvent = TypedEvent<
  [BigNumber] & { pmxPartInReward: BigNumber }
>;

export type PositionSizeCoefficientChangedEvent = TypedEvent<
  [BigNumber] & { positionSizeCoefficient: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class KeeperRewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperRewardDistributorInterface;

  functions: {
    additionalGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _pmxAmount: BigNumberish,
      _nativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dataLengthRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRoutesLength: BigNumber;
        baseLength: BigNumber;
      }
    >;

    decreasingGasByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultMaxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGasCalculationParams(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

    initialize(
      _params: {
        priceOracle: string;
        registry: string;
        pmx: string;
        treasury: string;
        whiteBlackList: string;
        pmxPartInReward: BigNumberish;
        nativePartInReward: BigNumberish;
        positionSizeCoefficient: BigNumberish;
        additionalGas: BigNumberish;
        defaultMaxGasPrice: BigNumberish;
        oracleGasPriceTolerance: BigNumberish;
        paymentModel: BigNumberish;
        maxGasPerPositionParams: {
          actionType: BigNumberish;
          config: {
            baseMaxGas1: BigNumberish;
            baseMaxGas2: BigNumberish;
            multiplier1: BigNumberish;
            multiplier2: BigNumberish;
            inflectionPoint: BigNumberish;
          };
        }[];
        decreasingGasByReasonParams: {
          reason: BigNumberish;
          amount: BigNumberish;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeperBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pmxBalance: BigNumber;
        nativeBalance: BigNumber;
      }
    >;

    maxGasPerPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseMaxGas1: BigNumber;
        baseMaxGas2: BigNumber;
        multiplier1: BigNumber;
        multiplier2: BigNumber;
        inflectionPoint: BigNumber;
      }
    >;

    minPositionSizeAddend(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativePartInReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimisticGasCoefficient(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleGasPriceTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    paymentModel(overrides?: CallOverrides): Promise<[number]>;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    pmxPartInReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionSizeCoefficient(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionSizeCoefficientB(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setAdditionalGas(
      _additionalGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDataLengthRestrictions(
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDecreasingGasByReason(
      _reason: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultMaxGasPrice(
      _defaultMaxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPerPosition(
      _actionType: BigNumberish,
      _config: {
        baseMaxGas1: BigNumberish;
        baseMaxGas2: BigNumberish;
        multiplier1: BigNumberish;
        multiplier2: BigNumberish;
        inflectionPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPositionSizeAddend(
      _minPositionSizeAddend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNativePartInReward(
      _nativePartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptimisticGasCoefficient(
      _newOptimisticGasCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleGasPriceTolerance(
      _oracleGasPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPmxPartInReward(
      _pmxPartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPositionSizeCoefficient(
      _positionSizeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pmxBalance: BigNumber;
        nativeBalance: BigNumber;
      }
    >;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReward(
      _params: {
        keeper: string;
        positionAsset: string;
        positionSize: BigNumberish;
        action: BigNumberish;
        numberOfActions: BigNumberish;
        gasSpent: BigNumberish;
        decreasingCounter: BigNumberish[];
        routesLength: BigNumberish;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  additionalGas(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _pmxAmount: BigNumberish,
    _nativeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dataLengthRestrictions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxRoutesLength: BigNumber;
      baseLength: BigNumber;
    }
  >;

  decreasingGasByReason(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultMaxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getGasCalculationParams(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

  initialize(
    _params: {
      priceOracle: string;
      registry: string;
      pmx: string;
      treasury: string;
      whiteBlackList: string;
      pmxPartInReward: BigNumberish;
      nativePartInReward: BigNumberish;
      positionSizeCoefficient: BigNumberish;
      additionalGas: BigNumberish;
      defaultMaxGasPrice: BigNumberish;
      oracleGasPriceTolerance: BigNumberish;
      paymentModel: BigNumberish;
      maxGasPerPositionParams: {
        actionType: BigNumberish;
        config: {
          baseMaxGas1: BigNumberish;
          baseMaxGas2: BigNumberish;
          multiplier1: BigNumberish;
          multiplier2: BigNumberish;
          inflectionPoint: BigNumberish;
        };
      }[];
      decreasingGasByReasonParams: {
        reason: BigNumberish;
        amount: BigNumberish;
      }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeperBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pmxBalance: BigNumber; nativeBalance: BigNumber }
  >;

  maxGasPerPosition(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseMaxGas1: BigNumber;
      baseMaxGas2: BigNumber;
      multiplier1: BigNumber;
      multiplier2: BigNumber;
      inflectionPoint: BigNumber;
    }
  >;

  minPositionSizeAddend(overrides?: CallOverrides): Promise<BigNumber>;

  nativePartInReward(overrides?: CallOverrides): Promise<BigNumber>;

  optimisticGasCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

  oracleGasPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  paymentModel(overrides?: CallOverrides): Promise<number>;

  pmx(overrides?: CallOverrides): Promise<string>;

  pmxPartInReward(overrides?: CallOverrides): Promise<BigNumber>;

  positionSizeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

  positionSizeCoefficientB(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setAdditionalGas(
    _additionalGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDataLengthRestrictions(
    _callingMethod: BigNumberish,
    _maxRoutesLength: BigNumberish,
    _baseLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDecreasingGasByReason(
    _reason: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultMaxGasPrice(
    _defaultMaxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPerPosition(
    _actionType: BigNumberish,
    _config: {
      baseMaxGas1: BigNumberish;
      baseMaxGas2: BigNumberish;
      multiplier1: BigNumberish;
      multiplier2: BigNumberish;
      inflectionPoint: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPositionSizeAddend(
    _minPositionSizeAddend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNativePartInReward(
    _nativePartInReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptimisticGasCoefficient(
    _newOptimisticGasCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleGasPriceTolerance(
    _oracleGasPriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPmxPartInReward(
    _pmxPartInReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPositionSizeCoefficient(
    _positionSizeCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pmxBalance: BigNumber; nativeBalance: BigNumber }
  >;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReward(
    _params: {
      keeper: string;
      positionAsset: string;
      positionSize: BigNumberish;
      action: BigNumberish;
      numberOfActions: BigNumberish;
      gasSpent: BigNumberish;
      decreasingCounter: BigNumberish[];
      routesLength: BigNumberish;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    additionalGas(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _pmxAmount: BigNumberish,
      _nativeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dataLengthRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRoutesLength: BigNumber;
        baseLength: BigNumber;
      }
    >;

    decreasingGasByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultMaxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGasCalculationParams(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

    initialize(
      _params: {
        priceOracle: string;
        registry: string;
        pmx: string;
        treasury: string;
        whiteBlackList: string;
        pmxPartInReward: BigNumberish;
        nativePartInReward: BigNumberish;
        positionSizeCoefficient: BigNumberish;
        additionalGas: BigNumberish;
        defaultMaxGasPrice: BigNumberish;
        oracleGasPriceTolerance: BigNumberish;
        paymentModel: BigNumberish;
        maxGasPerPositionParams: {
          actionType: BigNumberish;
          config: {
            baseMaxGas1: BigNumberish;
            baseMaxGas2: BigNumberish;
            multiplier1: BigNumberish;
            multiplier2: BigNumberish;
            inflectionPoint: BigNumberish;
          };
        }[];
        decreasingGasByReasonParams: {
          reason: BigNumberish;
          amount: BigNumberish;
        }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    keeperBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pmxBalance: BigNumber;
        nativeBalance: BigNumber;
      }
    >;

    maxGasPerPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseMaxGas1: BigNumber;
        baseMaxGas2: BigNumber;
        multiplier1: BigNumber;
        multiplier2: BigNumber;
        inflectionPoint: BigNumber;
      }
    >;

    minPositionSizeAddend(overrides?: CallOverrides): Promise<BigNumber>;

    nativePartInReward(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticGasCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    oracleGasPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    paymentModel(overrides?: CallOverrides): Promise<number>;

    pmx(overrides?: CallOverrides): Promise<string>;

    pmxPartInReward(overrides?: CallOverrides): Promise<BigNumber>;

    positionSizeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    positionSizeCoefficientB(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setAdditionalGas(
      _additionalGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDataLengthRestrictions(
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecreasingGasByReason(
      _reason: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultMaxGasPrice(
      _defaultMaxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPerPosition(
      _actionType: BigNumberish,
      _config: {
        baseMaxGas1: BigNumberish;
        baseMaxGas2: BigNumberish;
        multiplier1: BigNumberish;
        multiplier2: BigNumberish;
        inflectionPoint: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPositionSizeAddend(
      _minPositionSizeAddend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNativePartInReward(
      _nativePartInReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptimisticGasCoefficient(
      _newOptimisticGasCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleGasPriceTolerance(
      _oracleGasPriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPmxPartInReward(
      _pmxPartInReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionSizeCoefficient(
      _positionSizeCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pmxBalance: BigNumber;
        nativeBalance: BigNumber;
      }
    >;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateReward(
      _params: {
        keeper: string;
        positionAsset: string;
        positionSize: BigNumberish;
        action: BigNumberish;
        numberOfActions: BigNumberish;
        gasSpent: BigNumberish;
        decreasingCounter: BigNumberish[];
        routesLength: BigNumberish;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdditionalGasChanged(uint256)"(
      additionalGas?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { additionalGas: BigNumber }>;

    AdditionalGasChanged(
      additionalGas?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { additionalGas: BigNumber }>;

    "ClaimFees(address,address,uint256)"(
      keeper?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { keeper: string; asset: string; amount: BigNumber }
    >;

    ClaimFees(
      keeper?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { keeper: string; asset: string; amount: BigNumber }
    >;

    "DataLengthRestrictionsChanged(uint8,uint256,uint256)"(
      callingMethod?: null,
      maxRoutesLength?: null,
      baseLength?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      {
        callingMethod: number;
        maxRoutesLength: BigNumber;
        baseLength: BigNumber;
      }
    >;

    DataLengthRestrictionsChanged(
      callingMethod?: null,
      maxRoutesLength?: null,
      baseLength?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      {
        callingMethod: number;
        maxRoutesLength: BigNumber;
        baseLength: BigNumber;
      }
    >;

    "DecreasingGasByReasonChanged(uint8,uint256)"(
      reason?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { reason: number; amount: BigNumber }
    >;

    DecreasingGasByReasonChanged(
      reason?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { reason: number; amount: BigNumber }
    >;

    "DefaultMaxGasPriceChanged(uint256)"(
      defaultMaxGasPrice?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { defaultMaxGasPrice: BigNumber }>;

    DefaultMaxGasPriceChanged(
      defaultMaxGasPrice?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { defaultMaxGasPrice: BigNumber }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "KeeperRewardUpdated(address,uint256,uint256)"(
      keeper?: string | null,
      rewardInPmx?: null,
      rewardInNativeCurrency?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        keeper: string;
        rewardInPmx: BigNumber;
        rewardInNativeCurrency: BigNumber;
      }
    >;

    KeeperRewardUpdated(
      keeper?: string | null,
      rewardInPmx?: null,
      rewardInNativeCurrency?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        keeper: string;
        rewardInPmx: BigNumber;
        rewardInNativeCurrency: BigNumber;
      }
    >;

    "MaxGasPerPositionChanged(uint8,tuple)"(
      actionType?: BigNumberish | null,
      config?: null
    ): TypedEventFilter<
      [
        number,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseMaxGas1: BigNumber;
          baseMaxGas2: BigNumber;
          multiplier1: BigNumber;
          multiplier2: BigNumber;
          inflectionPoint: BigNumber;
        }
      ],
      {
        actionType: number;
        config: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseMaxGas1: BigNumber;
          baseMaxGas2: BigNumber;
          multiplier1: BigNumber;
          multiplier2: BigNumber;
          inflectionPoint: BigNumber;
        };
      }
    >;

    MaxGasPerPositionChanged(
      actionType?: BigNumberish | null,
      config?: null
    ): TypedEventFilter<
      [
        number,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseMaxGas1: BigNumber;
          baseMaxGas2: BigNumber;
          multiplier1: BigNumber;
          multiplier2: BigNumber;
          inflectionPoint: BigNumber;
        }
      ],
      {
        actionType: number;
        config: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseMaxGas1: BigNumber;
          baseMaxGas2: BigNumber;
          multiplier1: BigNumber;
          multiplier2: BigNumber;
          inflectionPoint: BigNumber;
        };
      }
    >;

    "MinPositionSizeAddendChanged(uint256)"(
      newMinPositionSizeAddend?: null
    ): TypedEventFilter<[BigNumber], { newMinPositionSizeAddend: BigNumber }>;

    MinPositionSizeAddendChanged(
      newMinPositionSizeAddend?: null
    ): TypedEventFilter<[BigNumber], { newMinPositionSizeAddend: BigNumber }>;

    "NativePartInRewardChanged(uint256)"(
      nativePartInReward?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { nativePartInReward: BigNumber }>;

    NativePartInRewardChanged(
      nativePartInReward?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { nativePartInReward: BigNumber }>;

    "OptimisticGasCoefficientChanged(uint256)"(
      newOptimismGasCoefficient?: null
    ): TypedEventFilter<[BigNumber], { newOptimismGasCoefficient: BigNumber }>;

    OptimisticGasCoefficientChanged(
      newOptimismGasCoefficient?: null
    ): TypedEventFilter<[BigNumber], { newOptimismGasCoefficient: BigNumber }>;

    "OracleGasPriceToleranceChanged(uint256)"(
      oracleGasPriceTolerance?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleGasPriceTolerance: BigNumber }>;

    OracleGasPriceToleranceChanged(
      oracleGasPriceTolerance?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleGasPriceTolerance: BigNumber }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PmxPartInRewardChanged(uint256)"(
      pmxPartInReward?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { pmxPartInReward: BigNumber }>;

    PmxPartInRewardChanged(
      pmxPartInReward?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { pmxPartInReward: BigNumber }>;

    "PositionSizeCoefficientChanged(uint256)"(
      positionSizeCoefficient?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { positionSizeCoefficient: BigNumber }>;

    PositionSizeCoefficientChanged(
      positionSizeCoefficient?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { positionSizeCoefficient: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    additionalGas(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _pmxAmount: BigNumberish,
      _nativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dataLengthRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasingGasByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultMaxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGasCalculationParams(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _params: {
        priceOracle: string;
        registry: string;
        pmx: string;
        treasury: string;
        whiteBlackList: string;
        pmxPartInReward: BigNumberish;
        nativePartInReward: BigNumberish;
        positionSizeCoefficient: BigNumberish;
        additionalGas: BigNumberish;
        defaultMaxGasPrice: BigNumberish;
        oracleGasPriceTolerance: BigNumberish;
        paymentModel: BigNumberish;
        maxGasPerPositionParams: {
          actionType: BigNumberish;
          config: {
            baseMaxGas1: BigNumberish;
            baseMaxGas2: BigNumberish;
            multiplier1: BigNumberish;
            multiplier2: BigNumberish;
            inflectionPoint: BigNumberish;
          };
        }[];
        decreasingGasByReasonParams: {
          reason: BigNumberish;
          amount: BigNumberish;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeperBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPerPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSizeAddend(overrides?: CallOverrides): Promise<BigNumber>;

    nativePartInReward(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticGasCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    oracleGasPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    paymentModel(overrides?: CallOverrides): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    pmxPartInReward(overrides?: CallOverrides): Promise<BigNumber>;

    positionSizeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    positionSizeCoefficientB(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setAdditionalGas(
      _additionalGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDataLengthRestrictions(
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDecreasingGasByReason(
      _reason: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultMaxGasPrice(
      _defaultMaxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPerPosition(
      _actionType: BigNumberish,
      _config: {
        baseMaxGas1: BigNumberish;
        baseMaxGas2: BigNumberish;
        multiplier1: BigNumberish;
        multiplier2: BigNumberish;
        inflectionPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPositionSizeAddend(
      _minPositionSizeAddend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNativePartInReward(
      _nativePartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptimisticGasCoefficient(
      _newOptimisticGasCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleGasPriceTolerance(
      _oracleGasPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPmxPartInReward(
      _pmxPartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPositionSizeCoefficient(
      _positionSizeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReward(
      _params: {
        keeper: string;
        positionAsset: string;
        positionSize: BigNumberish;
        action: BigNumberish;
        numberOfActions: BigNumberish;
        gasSpent: BigNumberish;
        decreasingCounter: BigNumberish[];
        routesLength: BigNumberish;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    additionalGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _pmxAmount: BigNumberish,
      _nativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dataLengthRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasingGasByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultMaxGasPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCalculationParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _params: {
        priceOracle: string;
        registry: string;
        pmx: string;
        treasury: string;
        whiteBlackList: string;
        pmxPartInReward: BigNumberish;
        nativePartInReward: BigNumberish;
        positionSizeCoefficient: BigNumberish;
        additionalGas: BigNumberish;
        defaultMaxGasPrice: BigNumberish;
        oracleGasPriceTolerance: BigNumberish;
        paymentModel: BigNumberish;
        maxGasPerPositionParams: {
          actionType: BigNumberish;
          config: {
            baseMaxGas1: BigNumberish;
            baseMaxGas2: BigNumberish;
            multiplier1: BigNumberish;
            multiplier2: BigNumberish;
            inflectionPoint: BigNumberish;
          };
        }[];
        decreasingGasByReasonParams: {
          reason: BigNumberish;
          amount: BigNumberish;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeperBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPerPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionSizeAddend(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativePartInReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimisticGasCoefficient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleGasPriceTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pmxPartInReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionSizeCoefficient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionSizeCoefficientB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdditionalGas(
      _additionalGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDataLengthRestrictions(
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDecreasingGasByReason(
      _reason: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultMaxGasPrice(
      _defaultMaxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPerPosition(
      _actionType: BigNumberish,
      _config: {
        baseMaxGas1: BigNumberish;
        baseMaxGas2: BigNumberish;
        multiplier1: BigNumberish;
        multiplier2: BigNumberish;
        inflectionPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPositionSizeAddend(
      _minPositionSizeAddend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNativePartInReward(
      _nativePartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptimisticGasCoefficient(
      _newOptimisticGasCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleGasPriceTolerance(
      _oracleGasPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPmxPartInReward(
      _pmxPartInReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPositionSizeCoefficient(
      _positionSizeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReward(
      _params: {
        keeper: string;
        positionAsset: string;
        positionSize: BigNumberish;
        action: BigNumberish;
        numberOfActions: BigNumberish;
        gasSpent: BigNumberish;
        decreasingCounter: BigNumberish[];
        routesLength: BigNumberish;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
