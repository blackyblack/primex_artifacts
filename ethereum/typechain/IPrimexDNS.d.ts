/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPrimexDNSInterface extends ethers.utils.Interface {
  functions: {
    "aavePool()": FunctionFragment;
    "activateBucket(string)": FunctionFragment;
    "activateDEX(string)": FunctionFragment;
    "addBucket(address,uint256)": FunctionFragment;
    "addDEX(string,address)": FunctionFragment;
    "adminWithdrawalDelay()": FunctionFragment;
    "buckets(string)": FunctionFragment;
    "cmTypeToAddress(uint256)": FunctionFragment;
    "delistingDelay()": FunctionFragment;
    "deprecateBucket(string)": FunctionFragment;
    "dexAdapter()": FunctionFragment;
    "dexes(string)": FunctionFragment;
    "feeRates(uint8,address)": FunctionFragment;
    "freezeBucket(string)": FunctionFragment;
    "freezeDEX(string)": FunctionFragment;
    "getAllDexes()": FunctionFragment;
    "getBucketAddress(string)": FunctionFragment;
    "getDexAddress(string)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,tuple[])": FunctionFragment;
    "pmx()": FunctionFragment;
    "registry()": FunctionFragment;
    "setAavePool(address)": FunctionFragment;
    "setConditionalManager(uint256,address)": FunctionFragment;
    "setDexAdapter(address)": FunctionFragment;
    "setFeeRate((uint8,address,uint256))": FunctionFragment;
    "setPMX(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "activateDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBucket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDEX",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buckets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cmTypeToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dexAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "freezeDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllDexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      { orderType: BigNumberish; feeToken: string; rate: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAavePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConditionalManager",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [{ orderType: BigNumberish; feeToken: string; rate: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setPMX", values: [string]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cmTypeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezeDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConditionalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPMX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "AavePoolChanged(address)": EventFragment;
    "AddNewBucket(tuple)": EventFragment;
    "AddNewDex(tuple)": EventFragment;
    "BucketActivated(address)": EventFragment;
    "BucketDeprecated(address,uint256)": EventFragment;
    "BucketFrozen(address)": EventFragment;
    "ChangeFeeRate(uint8,address,uint256)": EventFragment;
    "ConditionalManagerChanged(uint256,address)": EventFragment;
    "DexActivated(address)": EventFragment;
    "DexAdapterChanged(address)": EventFragment;
    "DexFrozen(address)": EventFragment;
    "PMXchanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AavePoolChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddNewBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddNewDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionalManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexAdapterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PMXchanged"): EventFragment;
}

export type AavePoolChangedEvent = TypedEvent<[string] & { aavePool: string }>;

export type AddNewBucketEvent = TypedEvent<
  [
    [string, number, BigNumber, BigNumber] & {
      bucketAddress: string;
      currentStatus: number;
      delistingDeadline: BigNumber;
      adminDeadline: BigNumber;
    }
  ] & {
    newBucketData: [string, number, BigNumber, BigNumber] & {
      bucketAddress: string;
      currentStatus: number;
      delistingDeadline: BigNumber;
      adminDeadline: BigNumber;
    };
  }
>;

export type AddNewDexEvent = TypedEvent<
  [[string, boolean] & { routerAddress: string; isActive: boolean }] & {
    newDexData: [string, boolean] & {
      routerAddress: string;
      isActive: boolean;
    };
  }
>;

export type BucketActivatedEvent = TypedEvent<
  [string] & { bucketAddress: string }
>;

export type BucketDeprecatedEvent = TypedEvent<
  [string, BigNumber] & { bucketAddress: string; delistingTime: BigNumber }
>;

export type BucketFrozenEvent = TypedEvent<
  [string] & { bucketAddress: string }
>;

export type ChangeFeeRateEvent = TypedEvent<
  [number, string, BigNumber] & {
    orderType: number;
    token: string;
    rate: BigNumber;
  }
>;

export type ConditionalManagerChangedEvent = TypedEvent<
  [BigNumber, string] & { cmType: BigNumber; cmAddress: string }
>;

export type DexActivatedEvent = TypedEvent<
  [string] & { routerAddress: string }
>;

export type DexAdapterChangedEvent = TypedEvent<
  [string] & { newAdapterAddress: string }
>;

export type DexFrozenEvent = TypedEvent<[string] & { routerAddress: string }>;

export type PMXchangedEvent = TypedEvent<[string] & { pmx: string }>;

export class IPrimexDNS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimexDNSInterface;

  functions: {
    aavePool(overrides?: CallOverrides): Promise<[string]>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber, BigNumber]>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delistingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexAdapter(overrides?: CallOverrides): Promise<[string]>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDexes(overrides?: CallOverrides): Promise<[string[]]>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _registry: string,
      _pmx: string,
      _treasury: string,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDexAdapter(
      newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRate(
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  aavePool(overrides?: CallOverrides): Promise<string>;

  activateBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateDEX(
    _dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBucket(
    _newBucket: string,
    _pmxRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDEX(
    _name: string,
    _routerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  buckets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, number, BigNumber, BigNumber]>;

  cmTypeToAddress(
    cmType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  deprecateBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexAdapter(overrides?: CallOverrides): Promise<string>;

  dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

  feeRates(
    _orderType: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freezeBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeDEX(
    _dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDexes(overrides?: CallOverrides): Promise<string[]>;

  getBucketAddress(_name: string, overrides?: CallOverrides): Promise<string>;

  getDexAddress(_name: string, overrides?: CallOverrides): Promise<string>;

  initialize(
    _registry: string,
    _pmx: string,
    _treasury: string,
    _delistingDelay: BigNumberish,
    _adminWithdrawalDelay: BigNumberish,
    _feeRateParams: {
      orderType: BigNumberish;
      feeToken: string;
      rate: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pmx(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setAavePool(
    _aavePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConditionalManager(
    _cmType: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDexAdapter(
    newAdapterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRate(
    _feeRateParams: {
      orderType: BigNumberish;
      feeToken: string;
      rate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPMX(
    _pmx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aavePool(overrides?: CallOverrides): Promise<string>;

    activateBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    activateDEX(_dex: string, overrides?: CallOverrides): Promise<void>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber, BigNumber]>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    deprecateBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    dexAdapter(overrides?: CallOverrides): Promise<string>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<[string, boolean]>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    freezeDEX(_dex: string, overrides?: CallOverrides): Promise<void>;

    getAllDexes(overrides?: CallOverrides): Promise<string[]>;

    getBucketAddress(_name: string, overrides?: CallOverrides): Promise<string>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<string>;

    initialize(
      _registry: string,
      _pmx: string,
      _treasury: string,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    pmx(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setAavePool(_aavePool: string, overrides?: CallOverrides): Promise<void>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexAdapter(
      newAdapterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRate(
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPMX(_pmx: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AavePoolChanged(address)"(
      aavePool?: string | null
    ): TypedEventFilter<[string], { aavePool: string }>;

    AavePoolChanged(
      aavePool?: string | null
    ): TypedEventFilter<[string], { aavePool: string }>;

    "AddNewBucket(tuple)"(
      newBucketData?: null
    ): TypedEventFilter<
      [
        [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        }
      ],
      {
        newBucketData: [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        };
      }
    >;

    AddNewBucket(
      newBucketData?: null
    ): TypedEventFilter<
      [
        [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        }
      ],
      {
        newBucketData: [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        };
      }
    >;

    "AddNewDex(tuple)"(
      newDexData?: null
    ): TypedEventFilter<
      [[string, boolean] & { routerAddress: string; isActive: boolean }],
      {
        newDexData: [string, boolean] & {
          routerAddress: string;
          isActive: boolean;
        };
      }
    >;

    AddNewDex(
      newDexData?: null
    ): TypedEventFilter<
      [[string, boolean] & { routerAddress: string; isActive: boolean }],
      {
        newDexData: [string, boolean] & {
          routerAddress: string;
          isActive: boolean;
        };
      }
    >;

    "BucketActivated(address)"(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    BucketActivated(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    "BucketDeprecated(address,uint256)"(
      bucketAddress?: null,
      delistingTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { bucketAddress: string; delistingTime: BigNumber }
    >;

    BucketDeprecated(
      bucketAddress?: null,
      delistingTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { bucketAddress: string; delistingTime: BigNumber }
    >;

    "BucketFrozen(address)"(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    BucketFrozen(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    "ChangeFeeRate(uint8,address,uint256)"(
      orderType?: null,
      token?: null,
      rate?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { orderType: number; token: string; rate: BigNumber }
    >;

    ChangeFeeRate(
      orderType?: null,
      token?: null,
      rate?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { orderType: number; token: string; rate: BigNumber }
    >;

    "ConditionalManagerChanged(uint256,address)"(
      cmType?: BigNumberish | null,
      cmAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { cmType: BigNumber; cmAddress: string }
    >;

    ConditionalManagerChanged(
      cmType?: BigNumberish | null,
      cmAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { cmType: BigNumber; cmAddress: string }
    >;

    "DexActivated(address)"(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    DexActivated(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    "DexAdapterChanged(address)"(
      newAdapterAddress?: string | null
    ): TypedEventFilter<[string], { newAdapterAddress: string }>;

    DexAdapterChanged(
      newAdapterAddress?: string | null
    ): TypedEventFilter<[string], { newAdapterAddress: string }>;

    "DexFrozen(address)"(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    DexFrozen(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    "PMXchanged(address)"(
      pmx?: string | null
    ): TypedEventFilter<[string], { pmx: string }>;

    PMXchanged(
      pmx?: string | null
    ): TypedEventFilter<[string], { pmx: string }>;
  };

  estimateGas: {
    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDexes(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _registry: string,
      _pmx: string,
      _treasury: string,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDexAdapter(
      newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRate(
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminWithdrawalDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cmTypeToAddress(
      cmType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRates(
      _orderType: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDexes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _pmx: string,
      _treasury: string,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDexAdapter(
      newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRate(
      _feeRateParams: {
        orderType: BigNumberish;
        feeToken: string;
        rate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
