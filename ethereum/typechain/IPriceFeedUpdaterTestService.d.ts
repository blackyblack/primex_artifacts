/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPriceFeedUpdaterTestServiceInterface extends ethers.utils.Interface {
  functions: {
    "addRouter(address)": FunctionFragment;
    "checkArrayPriceFeed(tuple[])": FunctionFragment;
    "checkPriceFeed((address,address,address))": FunctionFragment;
    "deleteRouter(uint256)": FunctionFragment;
    "getRouters()": FunctionFragment;
    "setDivider(uint256)": FunctionFragment;
    "updateArrayPriceFeed(address[],int256[])": FunctionFragment;
    "updatePriceFeed(address,int256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkArrayPriceFeed",
    values: [{ token0: string; token1: string; priceFeed: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceFeed",
    values: [{ token0: string; token1: string; priceFeed: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRouter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDivider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArrayPriceFeed",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkArrayPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDivider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateArrayPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPriceFeedUpdaterTestService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPriceFeedUpdaterTestServiceInterface;

  functions: {
    addRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkArrayPriceFeed(
      _priceFeeds: { token0: string; token1: string; priceFeed: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkPriceFeed(
      _priceFeed: { token0: string; token1: string; priceFeed: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteRouter(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRouters(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _routers: string[] }>;

    setDivider(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateArrayPriceFeed(
      _priceFeeds: string[],
      _newAnswers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeed(
      _priceFeed: string,
      _newAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRouter(
    _newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkArrayPriceFeed(
    _priceFeeds: { token0: string; token1: string; priceFeed: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkPriceFeed(
    _priceFeed: { token0: string; token1: string; priceFeed: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteRouter(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRouters(overrides?: CallOverrides): Promise<string[]>;

  setDivider(
    _multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateArrayPriceFeed(
    _priceFeeds: string[],
    _newAnswers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeed(
    _priceFeed: string,
    _newAnswer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRouter(_newRouter: string, overrides?: CallOverrides): Promise<void>;

    checkArrayPriceFeed(
      _priceFeeds: { token0: string; token1: string; priceFeed: string }[],
      overrides?: CallOverrides
    ): Promise<
      ([boolean, string, BigNumber] & {
        isNeedUpdate: boolean;
        priceFeed: string;
        lastAverageDexPrice: BigNumber;
      })[]
    >;

    checkPriceFeed(
      _priceFeed: { token0: string; token1: string; priceFeed: string },
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        isNeedUpdate: boolean;
        priceFeed: string;
        lastAverageDexPrice: BigNumber;
      }
    >;

    deleteRouter(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRouters(overrides?: CallOverrides): Promise<string[]>;

    setDivider(
      _multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArrayPriceFeed(
      _priceFeeds: string[],
      _newAnswers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeed(
      _priceFeed: string,
      _newAnswer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkArrayPriceFeed(
      _priceFeeds: { token0: string; token1: string; priceFeed: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkPriceFeed(
      _priceFeed: { token0: string; token1: string; priceFeed: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteRouter(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRouters(overrides?: CallOverrides): Promise<BigNumber>;

    setDivider(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateArrayPriceFeed(
      _priceFeeds: string[],
      _newAnswers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceFeed(
      _priceFeed: string,
      _newAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkArrayPriceFeed(
      _priceFeeds: { token0: string; token1: string; priceFeed: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkPriceFeed(
      _priceFeed: { token0: string; token1: string; priceFeed: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteRouter(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRouters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDivider(
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateArrayPriceFeed(
      _priceFeeds: string[],
      _newAnswers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeed(
      _priceFeed: string,
      _newAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
