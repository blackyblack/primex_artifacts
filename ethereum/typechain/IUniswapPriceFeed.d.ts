/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IUniswapPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "activeFees(uint24)": FunctionFragment;
    "addFee(uint24)": FunctionFragment;
    "fees(uint256)": FunctionFragment;
    "getExchangeRate(address,address)": FunctionFragment;
    "getPool(address,address)": FunctionFragment;
    "getQuote(uint128,address,address,uint32)": FunctionFragment;
    "getQuoteAndUpdatePool(uint128,address,address,uint32,uint256,uint8)": FunctionFragment;
    "getUpdatedPool(address,address,uint256,uint8)": FunctionFragment;
    "poolUpdateInterval()": FunctionFragment;
    "pools(address,address)": FunctionFragment;
    "registry()": FunctionFragment;
    "twapInterval()": FunctionFragment;
    "uniswapV3Factory()": FunctionFragment;
    "updatePool(address,address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAndUpdatePool",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedPool",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolUpdateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "twapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "activeFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAndUpdatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;

  events: {};
}

export class IUniswapPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUniswapPriceFeedInterface;

  functions: {
    activeFees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { fee: number }>;

    getExchangeRate(
      baseToken: string,
      quoteToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        }
      ] & {
        pool: [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        };
      }
    >;

    getQuote(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    getQuoteAndUpdatePool(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUpdatedPool(
      tokenA: string,
      tokenB: string,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolUpdateInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        poolAddress: string;
        fee: number;
        lastUpdatedTimestamp: number;
        lastUpdatedCardinality: number;
      }
    >;

    registry(overrides?: CallOverrides): Promise<[string]>;

    twapInterval(overrides?: CallOverrides): Promise<[number]>;

    uniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<[string] & { uniswapV3Factory: string }>;

    updatePool(
      tokenA: string,
      tokenB: string,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeFees(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  addFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fees(index: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getExchangeRate(
    baseToken: string,
    quoteToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPool(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      poolAddress: string;
      fee: number;
      lastUpdatedTimestamp: number;
      lastUpdatedCardinalityNext: number;
    }
  >;

  getQuote(
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    secondsTwapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuoteAndUpdatePool(
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    secondsTwapInterval: BigNumberish,
    secondsUpdateInterval: BigNumberish,
    cardinalityNextIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUpdatedPool(
    tokenA: string,
    tokenB: string,
    secondsUpdateInterval: BigNumberish,
    cardinalityNextIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolUpdateInterval(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      poolAddress: string;
      fee: number;
      lastUpdatedTimestamp: number;
      lastUpdatedCardinality: number;
    }
  >;

  registry(overrides?: CallOverrides): Promise<string>;

  twapInterval(overrides?: CallOverrides): Promise<number>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  updatePool(
    tokenA: string,
    tokenB: string,
    cardinalityNextIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeFees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fees(index: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getExchangeRate(
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        poolAddress: string;
        fee: number;
        lastUpdatedTimestamp: number;
        lastUpdatedCardinalityNext: number;
      }
    >;

    getQuote(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteAndUpdatePool(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdatedPool(
      tokenA: string,
      tokenB: string,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        },
        BigNumber[],
        BigNumber
      ] & {
        pool: [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        };
        tickCumulatives: BigNumber[];
        sqrtPriceX96: BigNumber;
      }
    >;

    poolUpdateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        poolAddress: string;
        fee: number;
        lastUpdatedTimestamp: number;
        lastUpdatedCardinality: number;
      }
    >;

    registry(overrides?: CallOverrides): Promise<string>;

    twapInterval(overrides?: CallOverrides): Promise<number>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    updatePool(
      tokenA: string,
      tokenB: string,
      cardinalityNextIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        },
        BigNumber[],
        BigNumber
      ] & {
        highestLiquidityPool: [string, number, number, number] & {
          poolAddress: string;
          fee: number;
          lastUpdatedTimestamp: number;
          lastUpdatedCardinalityNext: number;
        };
        tickCumulatives: BigNumber[];
        sqrtPriceX96: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    activeFees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fees(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(
      baseToken: string,
      quoteToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteAndUpdatePool(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUpdatedPool(
      tokenA: string,
      tokenB: string,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolUpdateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    twapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      tokenA: string,
      tokenB: string,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeFees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fees(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRate(
      baseToken: string,
      quoteToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteAndUpdatePool(
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUpdatedPool(
      tokenA: string,
      tokenB: string,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolUpdateInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(
      tokenA: string,
      tokenB: string,
      cardinalityNextIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
