/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InterestRateStrategyInterface extends ethers.utils.Interface {
  functions: {
    "calculateInterestRates(uint256,uint256)": FunctionFragment;
    "getBarCalculationParams(address)": FunctionFragment;
    "setBarCalculationParams(bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBarCalculationParams",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBarCalculationParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBarCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBarCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BarCalculationParamsChanged(address,uint256,uint256,uint256,uint256,int256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BarCalculationParamsChanged"
  ): EventFragment;
}

export type BarCalculationParamsChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    bucket: string;
    urOptimal: BigNumber;
    k0: BigNumber;
    k1: BigNumber;
    b0: BigNumber;
    b1: BigNumber;
  }
>;

export class InterestRateStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InterestRateStrategyInterface;

  functions: {
    calculateInterestRates(
      ur: BigNumberish,
      reserveRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBarCalculationParams(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          urOptimal: BigNumber;
          k0: BigNumber;
          k1: BigNumber;
          b0: BigNumber;
          b1: BigNumber;
        }
      ]
    >;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculateInterestRates(
    ur: BigNumberish,
    reserveRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getBarCalculationParams(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      urOptimal: BigNumber;
      k0: BigNumber;
      k1: BigNumber;
      b0: BigNumber;
      b1: BigNumber;
    }
  >;

  setBarCalculationParams(
    _params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculateInterestRates(
      ur: BigNumberish,
      reserveRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBarCalculationParams(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        urOptimal: BigNumber;
        k0: BigNumber;
        k1: BigNumber;
        b0: BigNumber;
        b1: BigNumber;
      }
    >;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BarCalculationParamsChanged(address,uint256,uint256,uint256,uint256,int256)"(
      bucket?: string | null,
      urOptimal?: null,
      k0?: null,
      k1?: null,
      b0?: null,
      b1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        bucket: string;
        urOptimal: BigNumber;
        k0: BigNumber;
        k1: BigNumber;
        b0: BigNumber;
        b1: BigNumber;
      }
    >;

    BarCalculationParamsChanged(
      bucket?: string | null,
      urOptimal?: null,
      k0?: null,
      k1?: null,
      b0?: null,
      b1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        bucket: string;
        urOptimal: BigNumber;
        k0: BigNumber;
        k1: BigNumber;
        b0: BigNumber;
        b1: BigNumber;
      }
    >;
  };

  estimateGas: {
    calculateInterestRates(
      ur: BigNumberish,
      reserveRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBarCalculationParams(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateInterestRates(
      ur: BigNumberish,
      reserveRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBarCalculationParams(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
