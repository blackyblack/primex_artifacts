/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPositionManagerExtensionInterface extends ethers.utils.Interface {
  functions: {
    "decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])": FunctionFragment;
    "getOracleTolerableLimit(address,address)": FunctionFragment;
    "openPosition(((string,uint256,tuple[]),tuple[],address,uint256,address,uint256,uint256,bool,bool,tuple[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))": FunctionFragment;
    "openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),tuple[],tuple[],tuple[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))": FunctionFragment;
    "partiallyClosePosition(uint256,uint256,address,tuple[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])": FunctionFragment;
    "positionManagerExtension()": FunctionFragment;
    "setDefaultOracleTolerableLimit(uint256)": FunctionFragment;
    "setKeeperRewardDistributor(address)": FunctionFragment;
    "setMaintenanceBuffer(uint256)": FunctionFragment;
    "setMaxPositionSize(address,address,uint256,uint256)": FunctionFragment;
    "setMaxPositionSizes(tuple[])": FunctionFragment;
    "setOracleTolerableLimit(address,address,uint256)": FunctionFragment;
    "setOracleTolerableLimitMultiplier(uint256)": FunctionFragment;
    "setOracleTolerableLimits(tuple[])": FunctionFragment;
    "setSecurityBuffer(uint256)": FunctionFragment;
    "setSpotTradingRewardDistributor(address)": FunctionFragment;
    "updatePositionConditions(uint256,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseDeposit",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike[][],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleTolerableLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionByOrder",
    values: [
      {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partiallyClosePosition",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[][],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManagerExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOracleTolerableLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPositionSize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPositionSizes",
    values: [
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumberish;
        amountInToken1: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleTolerableLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleTolerableLimitMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleTolerableLimits",
    values: [{ assetA: string; assetB: string; percent: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurityBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotTradingRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionConditions",
    values: [BigNumberish, { managerType: BigNumberish; params: BytesLike }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partiallyClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManagerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPositionSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleTolerableLimitMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleTolerableLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpotTradingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionConditions",
    data: BytesLike
  ): Result;

  events: {
    "DecreaseDeposit(uint256,address,uint256,uint256)": EventFragment;
    "KeeperRewardDistributorChanged(address)": EventFragment;
    "MaintenanceBufferChanged(uint256)": EventFragment;
    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])": EventFragment;
    "OracleTolerableLimitMultiplierChanged(uint256)": EventFragment;
    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)": EventFragment;
    "SecurityBufferChanged(uint256)": EventFragment;
    "SetDefaultOracleTolerableLimit(uint256)": EventFragment;
    "SetMaxPositionSize(address,address,uint256,uint256)": EventFragment;
    "SetOracleTolerableLimit(address,address,uint256)": EventFragment;
    "UpdatePositionConditions(uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreaseDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "KeeperRewardDistributorChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaintenanceBufferChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleTolerableLimitMultiplierChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecurityBufferChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDefaultOracleTolerableLimit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPositionSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleTolerableLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionConditions"): EventFragment;
}

export type DecreaseDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    positionId: BigNumber;
    trader: string;
    depositDelta: BigNumber;
    scaledDebtAmount: BigNumber;
  }
>;

export type KeeperRewardDistributorChangedEvent = TypedEvent<
  [string] & { _keeperRewardDistributor: string }
>;

export type MaintenanceBufferChangedEvent = TypedEvent<
  [BigNumber] & { maintenanceBuffer: BigNumber }
>;

export type OpenPositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    },
    BigNumber,
    BigNumber,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    openedBy: string;
    position: [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    };
    entryPrice: BigNumber;
    leverage: BigNumber;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export type OracleTolerableLimitMultiplierChangedEvent = TypedEvent<
  [BigNumber] & { newMultiplier: BigNumber }
>;

export type PartialClosePositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionId: BigNumber;
    trader: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: BigNumber;
    depositedAmount: BigNumber;
    scaledDebtAmount: BigNumber;
    profit: BigNumber;
    positionDebt: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SecurityBufferChangedEvent = TypedEvent<
  [BigNumber] & { securityBuffer: BigNumber }
>;

export type SetDefaultOracleTolerableLimitEvent = TypedEvent<
  [BigNumber] & { oracleTolerableLimit: BigNumber }
>;

export type SetMaxPositionSizeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token0: string;
    token1: string;
    amountInToken0: BigNumber;
    amountInToken1: BigNumber;
  }
>;

export type SetOracleTolerableLimitEvent = TypedEvent<
  [string, string, BigNumber] & {
    assetA: string;
    assetB: string;
    oracleTolerableLimit: BigNumber;
  }
>;

export type UpdatePositionConditionsEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export class IPositionManagerExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPositionManagerExtensionInterface;

  functions: {
    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positionManagerExtension(overrides?: CallOverrides): Promise<[string]>;

    setDefaultOracleTolerableLimit(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeperRewardDistributor(
      _keeperRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaintenanceBuffer(
      newMaintenanceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPositionSize(
      _token0: string,
      _token1: string,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPositionSizes(
      _params: {
        token0: string;
        token1: string;
        amountInToken0: BigNumberish;
        amountInToken1: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleTolerableLimit(
      _assetA: string,
      _assetB: string,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleTolerableLimitMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleTolerableLimits(
      _limitParams: { assetA: string; assetB: string; percent: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSecurityBuffer(
      newSecurityBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpotTradingRewardDistributor(
      _spotTradingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decreaseDeposit(
    _positionId: BigNumberish,
    _amount: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    _nativeSoldAssetOracleData: BytesLike,
    _pullOracleData: BytesLike[][],
    _pullOracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOracleTolerableLimit(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    _params: {
      marginParams: {
        bucket: string;
        borrowedAmount: BigNumberish;
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      };
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositAsset: string;
      depositAmount: BigNumberish;
      positionAsset: string;
      amountOutMin: BigNumberish;
      deadline: BigNumberish;
      takeDepositFromWallet: boolean;
      isProtocolFeeInPmx: boolean;
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPositionByOrder(
    _params: {
      sender: string;
      order: {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        feeToken: string;
        protocolFee: BigNumberish;
        trader: string;
        deadline: BigNumberish;
        id: BigNumberish;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      };
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositInThirdAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      borrowedAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  partiallyClosePosition(
    _positionId: BigNumberish,
    _amount: BigNumberish,
    _depositReceiver: string,
    _megaRoutes: {
      shares: BigNumberish;
      routes: {
        to: string;
        paths: { dexName: string; shares: BigNumberish; payload: BytesLike }[];
      }[];
    }[],
    _amountOutMin: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    _nativePositionAssetOracleData: BytesLike,
    _nativeSoldAssetOracleData: BytesLike,
    _pmxSoldAssetOracleData: BytesLike,
    _pullOracleData: BytesLike[][],
    _pullOracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positionManagerExtension(overrides?: CallOverrides): Promise<string>;

  setDefaultOracleTolerableLimit(
    _percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeperRewardDistributor(
    _keeperRewardDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaintenanceBuffer(
    newMaintenanceBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPositionSize(
    _token0: string,
    _token1: string,
    _amountInToken0: BigNumberish,
    _amountInToken1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPositionSizes(
    _params: {
      token0: string;
      token1: string;
      amountInToken0: BigNumberish;
      amountInToken1: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleTolerableLimit(
    _assetA: string,
    _assetB: string,
    _percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleTolerableLimitMultiplier(
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleTolerableLimits(
    _limitParams: { assetA: string; assetB: string; percent: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSecurityBuffer(
    newSecurityBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpotTradingRewardDistributor(
    _spotTradingRewardDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionConditions(
    _positionId: BigNumberish,
    _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    positionManagerExtension(overrides?: CallOverrides): Promise<string>;

    setDefaultOracleTolerableLimit(
      _percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeperRewardDistributor(
      _keeperRewardDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenanceBuffer(
      newMaintenanceBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPositionSize(
      _token0: string,
      _token1: string,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPositionSizes(
      _params: {
        token0: string;
        token1: string;
        amountInToken0: BigNumberish;
        amountInToken1: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleTolerableLimit(
      _assetA: string,
      _assetB: string,
      _percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleTolerableLimitMultiplier(
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleTolerableLimits(
      _limitParams: { assetA: string; assetB: string; percent: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSecurityBuffer(
      newSecurityBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpotTradingRewardDistributor(
      _spotTradingRewardDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreaseDeposit(uint256,address,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    DecreaseDeposit(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    "KeeperRewardDistributorChanged(address)"(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    KeeperRewardDistributorChanged(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    "MaintenanceBufferChanged(uint256)"(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    MaintenanceBufferChanged(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    OpenPosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    "OracleTolerableLimitMultiplierChanged(uint256)"(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    OracleTolerableLimitMultiplierChanged(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    PartialClosePosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    "SecurityBufferChanged(uint256)"(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    SecurityBufferChanged(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    "SetDefaultOracleTolerableLimit(uint256)"(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    SetDefaultOracleTolerableLimit(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    "SetMaxPositionSize(address,address,uint256,uint256)"(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    SetMaxPositionSize(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    "SetOracleTolerableLimit(address,address,uint256)"(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    SetOracleTolerableLimit(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    "UpdatePositionConditions(uint256,address,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    UpdatePositionConditions(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;
  };

  estimateGas: {
    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positionManagerExtension(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultOracleTolerableLimit(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeperRewardDistributor(
      _keeperRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaintenanceBuffer(
      newMaintenanceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPositionSize(
      _token0: string,
      _token1: string,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPositionSizes(
      _params: {
        token0: string;
        token1: string;
        amountInToken0: BigNumberish;
        amountInToken1: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleTolerableLimit(
      _assetA: string,
      _assetB: string,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleTolerableLimitMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleTolerableLimits(
      _limitParams: { assetA: string; assetB: string; percent: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSecurityBuffer(
      newSecurityBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpotTradingRewardDistributor(
      _spotTradingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positionManagerExtension(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultOracleTolerableLimit(
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeperRewardDistributor(
      _keeperRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaintenanceBuffer(
      newMaintenanceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPositionSize(
      _token0: string,
      _token1: string,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPositionSizes(
      _params: {
        token0: string;
        token1: string;
        amountInToken0: BigNumberish;
        amountInToken1: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleTolerableLimit(
      _assetA: string,
      _assetB: string,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleTolerableLimitMultiplier(
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleTolerableLimits(
      _limitParams: { assetA: string; assetB: string; percent: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSecurityBuffer(
      newSecurityBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpotTradingRewardDistributor(
      _spotTradingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
