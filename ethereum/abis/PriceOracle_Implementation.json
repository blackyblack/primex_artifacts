{
  "address": "0xD145933C7938abe3743a83AffAA8AF13c550E109",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "ChainlinkPriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "GasPriceFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "PairPriceDropChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceDropFeed",
          "type": "address"
        }
      ],
      "name": "PriceDropFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        }
      ],
      "name": "PythPairIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "SupraDataFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeTolerance",
          "type": "uint256"
        }
      ],
      "name": "TimeToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "Univ3OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "name": "Univ3TrustedPairUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "chainlinkPriceFeedsUsd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "oracleData",
          "type": "bytes"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        }
      ],
      "name": "getOraclePriceDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        }
      ],
      "name": "getOraclePriceDropFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        }
      ],
      "name": "getPairPriceDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceDrop",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "increasePairPriceDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairPriceDrops",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pythPairIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "setGasPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "setPairPriceDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyth",
          "type": "address"
        }
      ],
      "name": "setPyth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supraPullOracle",
          "type": "address"
        }
      ],
      "name": "setSupraPullOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supraStorageOracle",
          "type": "address"
        }
      ],
      "name": "setSupraStorageOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeTolerance",
          "type": "uint256"
        }
      ],
      "name": "setTimeTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        }
      ],
      "name": "setUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supraDataFeedID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initialize",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supraPullOracle",
      "outputs": [
        {
          "internalType": "contract ISupraOraclePull",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supraStorageOracle",
      "outputs": [
        {
          "internalType": "contract ISupraSValueFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "univ3TrustedPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "univ3TypeOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_feeds",
          "type": "address[]"
        }
      ],
      "name": "updateChainlinkPriceFeedsUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceDropFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceDropFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetB",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceDropFeed",
              "type": "address"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdatePriceDropFeedsParams[]",
          "name": "_updateParams",
          "type": "tuple[]"
        }
      ],
      "name": "updatePriceDropFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[][]",
          "name": "_data",
          "type": "bytes[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_oracleTypes",
          "type": "uint256[]"
        }
      ],
      "name": "updatePullOracle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_priceFeedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updatePythPairId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "initialize",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPriceOracleStorageV3.SupraDataFeedId",
              "name": "feedData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdateSupraDataFeedParams[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "updateSupraDataFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isTrusted",
              "type": "bool"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdateUniv3TrustedPairParams[]",
          "name": "_updateParams",
          "type": "tuple[]"
        }
      ],
      "name": "updateUniv3TrustedPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_oracleTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "updateUniv3TypeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1c0c2f3f3d5f47991adbe21ffeae82b97ca01a9b62d682bec93410fda718893",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xD145933C7938abe3743a83AffAA8AF13c550E109",
    "transactionIndex": 242,
    "gasUsed": "2760924",
    "logsBloom": "0x
    "blockHash": "0xc04a7c6529129b70fb4eeb53d2f51f8dd6668bf883023af54a307ba13fd37650",
    "transactionHash": "0xb1c0c2f3f3d5f47991adbe21ffeae82b97ca01a9b62d682bec93410fda718893",
    "logs": [
      {
        "transactionIndex": 242,
        "blockNumber": 20628391,
        "transactionHash": "0xb1c0c2f3f3d5f47991adbe21ffeae82b97ca01a9b62d682bec93410fda718893",
        "address": "0xD145933C7938abe3743a83AffAA8AF13c550E109",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 369,
        "blockHash": "0xc04a7c6529129b70fb4eeb53d2f51f8dd6668bf883023af54a307ba13fd37650"
      }
    ],
    "blockNumber": 20628391,
    "cumulativeGasUsed": "18680845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a40cbe14c80d3d42e946a5aebe2ca9f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"ChainlinkPriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"GasPriceFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"PairPriceDropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"name\":\"PriceDropFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"}],\"name\":\"PythPairIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SupraDataFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeTolerance\",\"type\":\"uint256\"}],\"name\":\"TimeToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"Univ3OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"Univ3TrustedPairUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainlinkPriceFeedsUsd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"}],\"name\":\"getOraclePriceDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"}],\"name\":\"getOraclePriceDropFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"}],\"name\":\"getPairPriceDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceDrop\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"increasePairPriceDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairPriceDrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pythPairIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"setGasPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"setPairPriceDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"}],\"name\":\"setPyth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supraPullOracle\",\"type\":\"address\"}],\"name\":\"setSupraPullOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supraStorageOracle\",\"type\":\"address\"}],\"name\":\"setSupraStorageOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeTolerance\",\"type\":\"uint256\"}],\"name\":\"setTimeTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supraDataFeedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supraPullOracle\",\"outputs\":[{\"internalType\":\"contract ISupraOraclePull\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supraStorageOracle\",\"outputs\":[{\"internalType\":\"contract ISupraSValueFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"univ3TrustedPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"univ3TypeOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"name\":\"updateChainlinkPriceFeedsUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"name\":\"updatePriceDropFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"internalType\":\"struct IPriceOracleV2.UpdatePriceDropFeedsParams[]\",\"name\":\"_updateParams\",\"type\":\"tuple[]\"}],\"name\":\"updatePriceDropFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"_data\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_oracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"updatePullOracle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_priceFeedIds\",\"type\":\"bytes32[]\"}],\"name\":\"updatePythPairId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracleStorageV3.SupraDataFeedId\",\"name\":\"feedData\",\"type\":\"tuple\"}],\"internalType\":\"struct IPriceOracleV2.UpdateSupraDataFeedParams[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"updateSupraDataFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracleV2.UpdateUniv3TrustedPairParams[]\",\"name\":\"_updateParams\",\"type\":\"tuple[]\"}],\"name\":\"updateUniv3TrustedPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_oracleTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"updateUniv3TypeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getExchangeRate(address,address,bytes)\":{\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\",\"oracleData\":\"The list of oracles to use for price calculations\"},\"returns\":{\"_0\":\"exchangeRate for assetA/assetB in 10**18 decimality\"}},\"getGasPrice()\":{\"returns\":{\"price\":\"The current gas price.\"}},\"getOraclePriceDrop(address,address)\":{\"params\":{\"assetA\":\"The address of the first asset.\",\"assetB\":\"The address of the second asset.\"},\"returns\":{\"_0\":\"The priceDrop rate as a uint256 value.\"}},\"getOraclePriceDropFeed(address,address)\":{\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\"},\"returns\":{\"_0\":\"priceDropFeed The address of the priceDrop feed associated with the asset pair.\"}},\"getPairPriceDrop(address,address)\":{\"params\":{\"_assetA\":\"The address of asset A.\",\"_assetB\":\"The address of asset B.\"},\"returns\":{\"priceDrop\":\"The priceDrop rate.\"}},\"increasePairPriceDrop(address,address,uint256)\":{\"details\":\"Only callable by the EMERGENCY_ADMIN role. The _pairPriceDrop value must be greater than the current priceDrop value for the pair and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\",\"params\":{\"_assetA\":\"The address of position asset\",\"_assetB\":\"The address of borrowed asset\",\"_pairPriceDrop\":\"The new priceDrop value for the pair (in wad)\"}},\"initialize(address,address,address,address)\":{\"params\":{\"_eth\":\"Weth address if eth isn't native token of network. Otherwise set to zero address.\",\"_registry\":\"The address of PrimexRegistry contract\",\"_treasury\":\"Address of the Treasury\",\"_usdt\":\"Address of the USDT token\"}},\"setGasPriceFeed(address)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"priceFeed\":\"The address of the gas price feed contract.\"}},\"setPairPriceDrop(address,address,uint256)\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN.\",\"params\":{\"_assetA\":\"The address of position asset\",\"_assetB\":\"The address of borrowed asset\",\"_pairPriceDrop\":\"The pair priceDrop (in wad)\"}},\"setPyth(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_pyth\":\"the address of the Pyth oracle\"}},\"setSupraPullOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_supraPullOracle\":\"the address of the Supra pull oracle\"}},\"setSupraStorageOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_supraStorageOracle\":\"the address of the Supra storage\"}},\"setTimeTolerance(uint256)\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_timeTolerance\":\"Time tolerance in seconds\"}},\"setTreasury(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_treasury\":\"the address of the treasury\"}},\"setUSDT(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_usdt\":\"the address of the USDT\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"updateChainlinkPriceFeedsUsd(address[],address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_feeds\":\"Array of price feeds.\",\"_tokens\":\"Array of token addresses.\"}},\"updatePriceDropFeed(address,address,address)\":{\"details\":\"Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\",\"priceDropFeed\":\"The chain link priceDrop feed address for the pair assetA/assetB\"}},\"updatePriceDropFeeds((address,address,address)[])\":{\"details\":\"Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_updateParams\":\"The array of the UpdatePriceDropFeedsParams structs\"}},\"updatePullOracle(bytes[][],uint256[])\":{\"params\":{\"_data\":\"An array of update data for passed oracles\",\"_pullOracleTypes\":\"An array of oracle types  (Must conform to the UpdatePullOracle struct)\"}},\"updatePythPairId(address[],bytes32[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_priceFeedIds\":\"Array of pair ids.\",\"_tokens\":\"Array of token addresses.\"}},\"updateSupraDataFeed((address,address,(uint256,bool))[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_params\":\"Array of token pairs and Supra ids.\"}},\"updateUniv3TrustedPair((uint256,address,address,bool)[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_updateParams\":\"Array of token pairs, their DEXs and new trusted status.\"}},\"updateUniv3TypeOracle(uint256[],address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_oracleTypes\":\"Array of ids of TWAP contracts.\",\"_oracles\":\"Array of TWAP contract addresses.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeRate(address,address,bytes)\":{\"notice\":\"Calculates exchange rate of one token to another according to the specific oracle route\"},\"getGasPrice()\":{\"notice\":\"Retrieves the current gas price from the specified gas price feed.\"},\"getOraclePriceDrop(address,address)\":{\"notice\":\"Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\"},\"getOraclePriceDropFeed(address,address)\":{\"notice\":\"Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\"},\"getPairPriceDrop(address,address)\":{\"notice\":\"For a given asset pair retrieves the priceDrop rate which is the higher of the oracle pair priceDrop and the historical pair priceDrop.\"},\"increasePairPriceDrop(address,address,uint256)\":{\"notice\":\"Increases the priceDrop of a pair of assets in the system.\"},\"setGasPriceFeed(address)\":{\"notice\":\"Sets the gas price feed contract address.\"},\"setPairPriceDrop(address,address,uint256)\":{\"notice\":\"Function to set (change) the pair priceDrop of the trading assets\"},\"setPyth(address)\":{\"notice\":\"Sets the Pyth address\"},\"setSupraPullOracle(address)\":{\"notice\":\"Sets the Supra pull oracle address\"},\"setSupraStorageOracle(address)\":{\"notice\":\"Sets the Supra storage address\"},\"setTimeTolerance(uint256)\":{\"notice\":\"Sets the time tolerance\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury address\"},\"setUSDT(address)\":{\"notice\":\"Sets the usdt address\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"updateChainlinkPriceFeedsUsd(address[],address[])\":{\"notice\":\"Sets or updates the Chainlink price feed for the list of tokens to usd.\"},\"updatePriceDropFeed(address,address,address)\":{\"notice\":\"Updates the priceDrop feed for a specific pair of assets.\"},\"updatePriceDropFeeds((address,address,address)[])\":{\"notice\":\"Updates the priceDrop feed for a specific pair of assets.\"},\"updatePullOracle(bytes[][],uint256[])\":{\"notice\":\"Updates pull oracle data for passed oracle types\"},\"updatePythPairId(address[],bytes32[])\":{\"notice\":\"Sets or updates the Pyth pair ids for the list of tokens.\"},\"updateSupraDataFeed((address,address,(uint256,bool))[])\":{\"notice\":\"Sets or updates the Supra price feeds for the list of tokens.\"},\"updateUniv3TrustedPair((uint256,address,address,bool)[])\":{\"notice\":\"Sets or updates the Supra price feeds for the list of tokens.\"},\"updateUniv3TypeOracle(uint256[],address[])\":{\"notice\":\"Sets Uni v3-based TWAP price oracle contracts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\",\"keccak256\":\"0x79925fda117d97ed111d7d1cd0fce18cc9882c1b6c288d5bd499d56f3c2ca871\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa06035e07986c71922230772c7855e2ad6d404f949a2233b61a65c086735fb80\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc45289c8f39e7c6dc4b18d04faf98c6b0400995f8a1954d9e6cffb2fe83746ef\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/PriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {IUniswapPriceFeed} from \\\"../UniswapPriceFeed/IUniswapPriceFeed.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./PriceOracleStorage.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport {BIG_TIMELOCK_ADMIN, MEDIUM_TIMELOCK_ADMIN, SMALL_TIMELOCK_ADMIN, NATIVE_CURRENCY, EMERGENCY_ADMIN, USD} from \\\"../Constants.sol\\\";\\nimport {IPriceOracleV2} from \\\"./IPriceOracle.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {ITreasury} from \\\"../Treasury/ITreasury.sol\\\";\\n\\ncontract PriceOracle is IPriceOracleV2, PriceOracleStorageV3 {\\n    using WadRayMath for uint256;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param role The role identifier to check.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _require(IAccessControl(registry).hasRole(role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function initialize(\\n        address _registry,\\n        address _eth,\\n        address _usdt,\\n        address _treasury\\n    ) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = _registry;\\n        eth = _eth;\\n        usdt = _usdt;\\n        _setTreasury(_treasury);\\n        __ERC165_init();\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setTreasury(address _treasury) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setPyth(address _pyth) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        pyth = IPyth(_pyth);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setUSDT(address _usdt) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        usdt = _usdt;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setSupraPullOracle(address _supraPullOracle) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        supraPullOracle = ISupraOraclePull(_supraPullOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        supraStorageOracle = ISupraSValueFeed(_supraStorageOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function increasePairPriceDrop(\\n        address _assetA,\\n        address _assetB,\\n        uint256 _pairPriceDrop\\n    ) external override onlyRole(EMERGENCY_ADMIN) {\\n        _require(\\n            _pairPriceDrop > pairPriceDrops[_assetA][_assetB] && _pairPriceDrop <= WadRayMath.WAD / 2,\\n            Errors.PAIR_PRICE_DROP_IS_NOT_CORRECT.selector\\n        );\\n        _setPairPriceDrop(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setTimeTolerance(uint256 _timeTolerance) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        timeTolerance = _timeTolerance;\\n        emit TimeToleranceUpdated(_timeTolerance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setPairPriceDrop(\\n        address _assetA,\\n        address _assetB,\\n        uint256 _pairPriceDrop\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_pairPriceDrop > 0 && _pairPriceDrop < WadRayMath.WAD, Errors.PAIR_PRICE_DROP_IS_NOT_CORRECT.selector);\\n        _setPairPriceDrop(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePriceDropFeed(\\n        address assetA,\\n        address assetB,\\n        address priceDropFeed\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _updatePriceDropFeed(assetA, assetB, priceDropFeed);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePriceDropFeeds(\\n        UpdatePriceDropFeedsParams[] calldata _updateParams\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _updateParams.length; i++) {\\n            _updatePriceDropFeed(_updateParams[i].assetA, _updateParams[i].assetB, _updateParams[i].priceDropFeed);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateChainlinkPriceFeedsUsd(\\n        address[] calldata _tokens,\\n        address[] calldata _feeds\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_tokens.length == _feeds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            chainlinkPriceFeedsUsd[_tokens[i]] = _feeds[i];\\n            emit ChainlinkPriceFeedUpdated(_tokens[i], _feeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePythPairId(\\n        address[] calldata _tokens,\\n        bytes32[] calldata _priceFeedIds\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_tokens.length == _priceFeedIds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            pythPairIds[_tokens[i]] = _priceFeedIds[i];\\n            emit PythPairIdUpdated(_tokens[i], _priceFeedIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateSupraDataFeed(\\n        UpdateSupraDataFeedParams[] calldata _params\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _params.length; i++) {\\n            supraDataFeedID[_params[i].tokenA][_params[i].tokenB] = _params[i].feedData;\\n            emit SupraDataFeedUpdated(_params[i].tokenA, _params[i].tokenB, _params[i].feedData.id);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _oracleTypes) external payable override {\\n        _require(_data.length == _oracleTypes.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        uint256 remainingValue = msg.value;\\n        for (uint256 i; i < _oracleTypes.length; i++) {\\n            if (_oracleTypes[i] == uint256(UpdatePullOracle.Pyth)) {\\n                uint256 updateFee = pyth.getUpdateFee(_data[i]);\\n                _require(updateFee <= remainingValue, Errors.NOT_ENOUGH_MSG_VALUE.selector);\\n                remainingValue -= updateFee;\\n                pyth.updatePriceFeeds{value: updateFee}(_data[i]);\\n                continue;\\n            } else if (_oracleTypes[i] == uint256(UpdatePullOracle.Supra)) {\\n                supraPullOracle.verifyOracleProof(_data[i][0]);\\n            }\\n        }\\n        if (remainingValue > 0) {\\n            TokenTransfersLibrary.doTransferOutETH(treasury, remainingValue);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateUniv3TypeOracle(\\n        uint256[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_oracleTypes.length == _oracles.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _oracleTypes.length; i++) {\\n            univ3TypeOracles[_oracleTypes[i]] = _oracles[i];\\n            emit Univ3OracleUpdated(_oracleTypes[i], _oracles[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateUniv3TrustedPair(\\n        UpdateUniv3TrustedPairParams[] calldata _updateParams\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _updateParams.length; i++) {\\n            univ3TrustedPairs[_updateParams[i].oracleType][_updateParams[i].tokenA][\\n                _updateParams[i].tokenB\\n            ] = _updateParams[i].isTrusted;\\n            // reverse order\\n            univ3TrustedPairs[_updateParams[i].oracleType][_updateParams[i].tokenB][\\n                _updateParams[i].tokenA\\n            ] = _updateParams[i].isTrusted;\\n            emit Univ3TrustedPairUpdated(\\n                _updateParams[i].oracleType,\\n                _updateParams[i].tokenA,\\n                _updateParams[i].tokenB,\\n                _updateParams[i].isTrusted\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable override returns (uint256) {\\n        OracleRoute[] memory oracleRoutes = abi.decode(oracleData, (OracleRoute[]));\\n        _require(oracleRoutes.length > 0 && oracleRoutes.length < 5, Errors.WRONG_ORACLE_ROUTES_LENGTH.selector);\\n        _require(oracleRoutes[oracleRoutes.length - 1].tokenTo == assetB, Errors.INCORRECT_TOKEN_TO.selector);\\n        if (oracleRoutes.length == 3)\\n            _require(oracleRoutes[1].oracleType != OracleType.Uniswapv3, Errors.INCORRECT_ROUTE_SEQUENCE.selector);\\n        if (oracleRoutes.length == 4)\\n            _require(\\n                oracleRoutes[1].oracleType != OracleType.Uniswapv3 &&\\n                    oracleRoutes[0].oracleType != OracleType.Pyth &&\\n                    oracleRoutes[0].oracleType != OracleType.Chainlink,\\n                Errors.INCORRECT_ROUTE_SEQUENCE.selector\\n            );\\n\\n        address tokenFrom = assetA;\\n        uint256 price = WadRayMath.WAD;\\n        bool uniWasChecked;\\n\\n        for (uint256 i; i < oracleRoutes.length; i++) {\\n            if (oracleRoutes[i].oracleType == OracleType.Uniswapv3 && !uniWasChecked) {\\n                // try to find a direct route between the assetA and the assetB, if there is one, then revert it\\n                if (_checkTokenToUsd(assetA) && _checkTokenToUsd(assetB))\\n                    _revert(Errors.THERE_IS_DIRECT_ROUTE.selector);\\n                // cache var in case there are two uniswap routes in the oracleData\\n                uniWasChecked = true;\\n            }\\n            price = price.wmul(_getExchangeRate(tokenFrom, oracleRoutes[i]));\\n            tokenFrom = oracleRoutes[i].tokenTo;\\n        }\\n        return price;\\n    }\\n\\n    function _getExchangeRate(address _assetA, OracleRoute memory _oracleRoute) internal returns (uint256) {\\n        bool assetAIsUsd = _assetA == USD;\\n        if (_oracleRoute.oracleType == OracleType.Pyth) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_PYTH_ROUTE.selector);\\n            bytes32 pairID = pythPairIds[assetAIsUsd ? _oracleRoute.tokenTo : _assetA];\\n            _require(pairID != bytes32(0), Errors.NO_PRICEFEED_FOUND.selector);\\n            PythStructs.Price memory price = pyth.getPrice(pairID);\\n            _require(\\n                price.publishTime >= block.timestamp - timeTolerance,\\n                Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector\\n            );\\n            // price in WAD format and invert if necessary\\n            return assetAIsUsd ? WadRayMath.WAD.wdiv(_convertPythPriceToWad(price)) : _convertPythPriceToWad(price);\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Supra) {\\n            SupraDataFeedId memory feedId = supraDataFeedID[_assetA][_oracleRoute.tokenTo];\\n            ISupraSValueFeed.priceFeed memory feedData;\\n            uint256 exchangeRate;\\n            if (feedId.initialize) {\\n                feedData = supraStorageOracle.getSvalue(feedId.id);\\n                exchangeRate = feedData.price * 10 ** (18 - feedData.decimals);\\n            } else {\\n                feedId = supraDataFeedID[_oracleRoute.tokenTo][_assetA];\\n                _require(feedId.initialize, Errors.NO_PRICEFEED_FOUND.selector);\\n                feedData = supraStorageOracle.getSvalue(feedId.id);\\n                exchangeRate = WadRayMath.WAD.wdiv(feedData.price * 10 ** (18 - feedData.decimals));\\n            }\\n            _require(\\n                feedData.time >= block.timestamp - timeTolerance,\\n                Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector\\n            );\\n            return exchangeRate;\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Chainlink) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_CHAINLINK_ROUTE.selector);\\n            address priceFeed = chainlinkPriceFeedsUsd[assetAIsUsd ? _oracleRoute.tokenTo : _assetA];\\n            _require(priceFeed != address(0), Errors.NO_PRICEFEED_FOUND.selector);\\n\\n            (, int256 answer, , , ) = AggregatorV3Interface(priceFeed).latestRoundData();\\n            _require(answer > 0, Errors.ZERO_EXCHANGE_RATE.selector);\\n            // price in WAD format and invert if necessary\\n            return\\n                assetAIsUsd\\n                    ? WadRayMath.WAD.wdiv((uint256(answer) * 10 ** (18 - AggregatorV3Interface(priceFeed).decimals())))\\n                    : (uint256(answer) * 10 ** (18 - AggregatorV3Interface(priceFeed).decimals()));\\n        }\\n        uint256 oracleType = uint256(bytes32(_oracleRoute.oracleData));\\n        address uniOracle = univ3TypeOracles[oracleType];\\n        _require(uniOracle != address(0), Errors.NO_PRICEFEED_FOUND.selector);\\n        _require(\\n            univ3TrustedPairs[oracleType][_assetA][_oracleRoute.tokenTo],\\n            Errors.TOKEN_PAIR_IS_NOT_TRUSTED.selector\\n        );\\n        // always returns price in WAD\\n        return IUniswapPriceFeed(uniOracle).getExchangeRate(_assetA, _oracleRoute.tokenTo);\\n    }\\n\\n    function _convertPythPriceToWad(PythStructs.Price memory price) internal pure returns (uint256) {\\n        if (price.price < 0 || price.expo > 0 || price.expo < -255) {\\n            _revert(Errors.INCORRECT_PYTH_PRICE.selector);\\n        }\\n        uint8 priceDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (18 >= priceDecimals) {\\n            return uint256(uint64(price.price)) * 10 ** uint32(18 - priceDecimals);\\n        } else {\\n            return uint256(uint64(price.price)) / 10 ** uint32(priceDecimals - 18);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view override returns (uint256 priceDrop) {\\n        uint256 oraclePairPriceDrop = getOraclePriceDrop(_assetA, _assetB);\\n        uint256 pairPriceDrop = pairPriceDrops[_assetA][_assetB];\\n        priceDrop = pairPriceDrop > oraclePairPriceDrop ? pairPriceDrop : oraclePairPriceDrop;\\n        if (priceDrop > WadRayMath.WAD) return WadRayMath.WAD;\\n        return priceDrop;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view override returns (address) {\\n        _require(assetA != assetB, Errors.IDENTICAL_TOKEN_ADDRESSES.selector);\\n        address priceDropFeed = oraclePriceDropFeeds[assetA][assetB];\\n        _require(priceDropFeed != address(0), Errors.NO_PRICE_DROP_FEED_FOUND.selector);\\n        return priceDropFeed;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setGasPriceFeed(address priceFeed) public override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        gasPriceFeed = priceFeed;\\n        emit GasPriceFeedChanged(priceFeed);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) public view override returns (uint256) {\\n        address priceDropFeed = oraclePriceDropFeeds[assetA][assetB];\\n        if (priceDropFeed == address(0)) return 0;\\n        (, int256 answer, , , ) = AggregatorV3Interface(priceDropFeed).latestRoundData();\\n        uint256 answerDecimals = AggregatorV3Interface(priceDropFeed).decimals();\\n        return (uint256(answer) * 10 ** (18 - answerDecimals));\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getGasPrice() public view override returns (int256 price) {\\n        if (gasPriceFeed != address(0)) (, price, , , ) = AggregatorV3Interface(gasPriceFeed).latestRoundData();\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPriceOracleV2).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Sets the priceDrop for a pair of assets.\\n     * @param _assetA The address of the first asset in the pair.\\n     * @param _assetB The address of the second asset in the pair.\\n     * @param _pairPriceDrop The priceDrop value in WAD format to be set for the pair.\\n     */\\n    function _setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) internal {\\n        _require(_assetA != address(0) && _assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(_assetA != _assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        pairPriceDrops[_assetA][_assetB] = _pairPriceDrop;\\n        emit PairPriceDropChanged(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    function _updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) internal {\\n        _require(assetA != assetB, Errors.IDENTICAL_TOKEN_ADDRESSES.selector);\\n        oraclePriceDropFeeds[assetA][assetB] = priceDropFeed;\\n        emit PriceDropFeedUpdated(assetA, assetB, priceDropFeed);\\n    }\\n\\n    /**\\n     * @dev Checks, whether a token-to-usd pair exists for the oracles Pyth, CL, and Supra.\\n     */\\n    function _checkTokenToUsd(address _token) internal view returns (bool) {\\n        // check pyth\\n        if (pythPairIds[_token] != bytes32(0)) return true;\\n\\n        // check CL\\n        if (chainlinkPriceFeedsUsd[_token] != address(0)) return true;\\n\\n        // check Supra USD\\n        SupraDataFeedId storage feedUsd = supraDataFeedID[_token][USD];\\n        if (feedUsd.initialize) return true;\\n\\n        // check Supra USDT\\n        SupraDataFeedId storage feedUSDT = supraDataFeedID[_token][usdt];\\n        if (feedUSDT.initialize) return true;\\n        return false;\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        _require(\\n            IERC165Upgradeable(_treasury).supportsInterface(type(ITreasury).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        treasury = _treasury;\\n    }\\n}\\n\",\"keccak256\":\"0xa1e995dbf08854fdef2aca94da44c9f94d04118ccce2231a67b9000fb267efac\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/PriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV2, IPriceOracleStorageV3} from \\\"./IPriceOracleStorage.sol\\\";\\n\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\n\\nabstract contract PriceOracleStorage is IPriceOracleStorage, ERC165Upgradeable {\\n    address public override registry;\\n    address public override eth;\\n    address public override gasPriceFeed;\\n\\n    // PriceDrop of asset A relative to asset B\\n    mapping(address => mapping(address => uint256)) public override pairPriceDrops;\\n\\n    /**\\n     * @notice The mapping stores priceDrop feeds adresses associated with the asset pair.\\n     * @dev 'The address of the first asset in the pair' -> ' The address of the second asset in the pair' -> 'priceDrop feed address'\\n     */\\n    mapping(address => mapping(address => address)) internal oraclePriceDropFeeds;\\n\\n    /**\\n     * @notice The mapping stores price feeds for currency pairs.\\n     * @dev 'base currency address' -> 'quote currency address' -> 'price feed address'\\n     */\\n    mapping(address => mapping(address => address)) internal chainLinkPriceFeeds;\\n}\\n\\nabstract contract PriceOracleStorageV2 is IPriceOracleStorageV2, PriceOracleStorage {\\n    IPyth public override pyth;\\n    uint256 public override timeTolerance;\\n    // baseToken => chainlink usd price feed;\\n    mapping(address => address) public override chainlinkPriceFeedsUsd;\\n\\n    // baseToken => the pyth ID of the price feed to get an update for\\n    mapping(address => bytes32) public override pythPairIds;\\n\\n    // oracleType => corresponding oracle address\\n    mapping(uint256 => address) public override univ3TypeOracles;\\n\\n    // univ3TypeOracles => tokenA => tokenB\\n    mapping(uint256 => mapping(address => mapping(address => bool))) public override univ3TrustedPairs;\\n}\\n\\nabstract contract PriceOracleStorageV3 is IPriceOracleStorageV3, PriceOracleStorageV2 {\\n    ISupraOraclePull public override supraPullOracle;\\n    ISupraSValueFeed public override supraStorageOracle;\\n\\n    // assetA => assetB => feedId\\n    mapping(address => mapping(address => SupraDataFeedId)) public override supraDataFeedID;\\n    address public override usdt;\\n    address public override treasury;\\n}\\n\",\"keccak256\":\"0x9a7e9b3b1e49362696057a576a6b837109981d5587279309558d010bf33693b7\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasury.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITreasuryStorage} from \\\"./ITreasuryStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITreasury is ITreasuryStorage, IPausable {\\n    event MaxSpendingLimitChanged(address indexed spender, address indexed token, SpendingLimits newSpendingLimits);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(address registry) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice Transfers an amount of ERC20 or native token from the contract treasury to\\n     *  a receiver address, subject to certain restrictions imposed by the spender.\\n     * @dev The function checks the spender's transfer restrictions per transaction and per timeframe.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token.\\n     * @param receiver The address of the receiver\\n     */\\n    function transferFromTreasury(uint256 amount, address token, address receiver) external;\\n\\n    /**\\n     * @notice Sets the maximum spending limit and other restrictions for a given spender and token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to set the new spending limit.\\n     * @param token The address of the token for which to set the new spending limit.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function setMaxSpendingLimit(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Decreases Spending limits for a spender for a specific token.\\n     * @dev This function can only be called by an address with the SMALL_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to decrease the maximum transfer amounts and total amount.\\n     * @param token The address of the token for which to decrease the maximum transfer amounts and total amount.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function decreaseLimits(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions.\\n     * @param spender The address of the spender to check for.\\n     * @param token The address of the token for which to check the time restrictions.\\n     * @return A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers.\\n     */\\n    function canTransferByTime(address spender, address token) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd7aded330c00ef654ee0dc462b2f8ac8c6904d39ea0d492a61449408cef33fe0\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasuryStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasuryStorage {\\n    struct SpendingLimits {\\n        //transfer settings\\n        uint256 maxTotalAmount;\\n        uint256 maxAmountPerTransfer;\\n        uint256 maxPercentPerTransfer;\\n        uint256 minTimeBetweenTransfers;\\n        // timeframe settings\\n        uint256 timeframeDuration;\\n        uint256 maxAmountDuringTimeframe;\\n    }\\n    struct SpendingInfo {\\n        bool isSpenderExist;\\n        SpendingLimits limits;\\n        uint256 lastWithdrawalTimestamp;\\n        uint256 withdrawnDuringTimeframe;\\n    }\\n\\n    event TransferFromTreasury(\\n        address indexed spender,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    function spenders(\\n        address spender,\\n        address token\\n    ) external returns (bool, SpendingLimits calldata, uint256, uint256);\\n\\n    function initialTimestamp() external returns (uint256);\\n\\n    function registry() external returns (IAccessControl);\\n}\\n\",\"keccak256\":\"0x95cf210b879cf7510bc35da0306a7c229cb5f90f842c97f341cb5794095e6276\",\"license\":\"BUSL-1.1\"},\"contracts/UniswapPriceFeed/IUniswapPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n/** @notice This contract (originally IPriceFeed) was taken from (https://github.com/decentralizedlabs/uniswap-v3-price-feed)\\n\\n*/\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IUniswapPriceFeed {\\n    struct PoolData {\\n        address poolAddress;\\n        uint24 fee;\\n        uint48 lastUpdatedTimestamp;\\n        uint16 lastUpdatedCardinalityNext;\\n    }\\n\\n    function uniswapV3Factory() external view returns (address uniswapV3Factory);\\n\\n    function activeFees(uint24 index) external view returns (bool);\\n\\n    function fees(uint256 index) external view returns (uint24 fee);\\n\\n    function pools(\\n        address token0,\\n        address token1\\n    )\\n        external\\n        view\\n        returns (address poolAddress, uint24 fee, uint48 lastUpdatedTimestamp, uint16 lastUpdatedCardinality);\\n\\n    function getPool(address tokenA, address tokenB) external view returns (PoolData memory pool);\\n\\n    function getQuote(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval\\n    ) external view returns (uint256 quoteAmount);\\n\\n    function getUpdatedPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (PoolData memory pool, int56[] memory tickCumulatives, uint160 sqrtPriceX96);\\n\\n    function getQuoteAndUpdatePool(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (uint256 quoteAmount);\\n\\n    function updatePool(\\n        address tokenA,\\n        address tokenB,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (PoolData memory highestLiquidityPool, int56[] memory tickCumulatives, uint160 sqrtPriceX96);\\n\\n    function addFee(uint24 fee) external;\\n\\n    function getExchangeRate(address baseToken, address quoteToken) external returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function twapInterval() external view returns (uint32);\\n\\n    function poolUpdateInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc6ab47fb6a5b123c666c4a9c54a5b9b1a5f2463a83cb261f2b1ba9890461773\",\"license\":\"MIT\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `approve` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     */\\n    function approve(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd8ed07c2eb87e6e0e774ef1a92e62e6a3bf1e99d1a3cd365efc21011843688a9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee overhead.\\n    /// @return Current fee overhead.\\n    function overhead() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c38a19fdde45c93a9469ae3d09a03aba4b08ebce84400b91b41f5d6914a52b2\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n}\\n\",\"keccak256\":\"0xac9099b4f5761f6659cdf1d32009ffd8b53cb1e2ac60df6596ab1ac90dd33a88\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x37a08dc6950f94f7156c9b2414fa00fb35ff6e3841f59c29b50316dd83029a86\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xb0991b2c77df3496e4595618675a4279bd187aa4968bfbcf3be47f80c49280b3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c2576000549060ff8260081c16610070575060ff80821603610035575b60405161307b9081620000c88239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611fec575080630a3c434c14611ece5780630bc6b20314611e6f5780630fa95a4214611e515780631e6a948f14611e285780632f48ab7d14611dff57806339d9043414611c78578063416be2f3146117fa578063455259cb146117675780634858138f1461171657806350c1b9231461167c5780635510bfce146114245780635d4934c01461138a57806361d027b31461136157806376b926e4146113355780637b1039991461130c57806384574738146112a85780638c7c9e0c1461127f578063970b6e78146111cb57806398bbc8dd146111975780639fb9b68f146110fd578063a5bbe8b514611043578063a6d1b92014611008578063ac8c5db914610f82578063b29ce00d14610f48578063b45994f814610e65578063bc5adf3714610d3c578063be49304e14610c5f578063cbaf3d0914610ba1578063cc2e4c4b14610a74578063dec0af6a14610a40578063e9a8f4841461092d578063ee22fd6f14610893578063ef44920d1461086a578063f0c9738e14610844578063f0f44260146107a8578063f197ce351461045d578063f8c8765e146101fa5763f98d06f0146101cc57600080fd5b346101f55760003660031901126101f5576039546040516001600160a01b039091168152602090f35b600080fd5b346101f55760803660031901126101f5576102136120b9565b61021b6120cf565b6102236120e5565b606435906001600160a01b0380831683036101f55760005460ff8160081c161595868097610450575b8015610439575b156103dd5760ff1982166001176000558291876103cb575b506040516301ffc9a760e01b8152637965db0b60e01b600482015291169290602081602481875afa9081156103bf57600091610391575b501561037f57816102db956001600160601b0360a01b948560335416176033551683603454161760345516906042541617604255612f89565b6000549060ff8260081c1615610326576102f157005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405163044aa57560e41b8152600490fd5b6103b2915060203d81116103b8575b6103aa81836121b1565b8101906121d2565b876102a2565b503d6103a0565b6040513d6000823e3d90fd5b61ffff1916610101176000558761026b565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156102535750600160ff831614610253565b50600160ff83161061024c565b6104663661206f565b92838392930361079657349360005b81811061051757858061048457005b60018060a01b036043541660405160208101908082106001600160401b03831117610501576000938493848094938194604052525af13d156104fc573d6104ca816123e0565b906104d860405192836121b1565b8152600060203d92013e5b156104ea57005b60405163c71509d160e01b8152600490fd5b6104e3565b634e487b7160e01b600052604160045260246000fd5b61052281838761223d565b3561063b576039546001600160a01b03169061053f81868661226a565b97906040519063d47eed4560e01b8252818061056260209c8d9460048401612344565b0381875afa9889156103bf5760009961060b575b50508088116105fa5787610589916123d3565b9661059582878761226a565b9093803b156101f557604051631df3cbc560e31b8152946000938693849283916105c29160048401612344565b03925af180156103bf576105e0575b6105db915061220a565b610475565b6001600160401b038211610501576105db916040526105d1565b604051624726cd60e11b8152600490fd5b9080929950813d8311610634575b61062381836121b1565b810103126101f55751968880610576565b503d610619565b600161064882848861223d565b3514610658575b6105db9061220a565b603f546001600160a01b03169061067081868661226a565b1561078057803590601e19813603018212156101f557016001600160401b0381358181116101f557602080930181360381136101f5576106d19560009283604051809981958294632ce81dbd60e21b84528a60048501526024840191612323565b03925af180156103bf576106e9575b5050905061064f565b3d806000863e6106f981866121b1565b84019382818603126101f5578051908282116101f557016060818603126101f5576040519261072784612160565b81518381116101f5578661073c9184016122c5565b8452808201518381116101f557866107559184016122c5565b9084015260408101519182116101f5576105db9460409261077692016122c5565b91015287806106e0565b634e487b7160e01b600052603260045260246000fd5b60405163554a08d160e11b8152600490fd5b346101f55760203660031901126101f5576107c16120b9565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156103bf57600091610826575b50156108145761081290612f89565b005b60405163036be76f60e61b8152600490fd5b61083e915060203d81116103b8576103aa81836121b1565b82610803565b346101f55760003660031901126101f557602060018060a01b0360405416604051908152f35b346101f55760003660031901126101f557603f546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f5576108ac6120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf5760009161090f575b501561081457166001600160601b0360a01b6039541617603955600080f35b610927915060203d81116103b8576103aa81836121b1565b836108f0565b346101f55761093b3661206f565b919260018060a01b039081603354166040518091632474521560e21b8252600080516020613026833981519152600483015233602483015281604460209485935afa9081156103bf57600091610a23575b5015610814578486036107965760005b8681106109a557005b806109b4610a1e92888861223d565b35856109c96109c4848c8961223d565b612229565b16600052603c84526040600020556109e56109c4828a8761223d565b856109f1838a8a61223d565b3591167f5f0ac2c1d339aa71cfd244b1806061c2dd58c142319c355a4b503464f39f0ce5600080a361220a565b61099c565b610a3a9150823d84116103b8576103aa81836121b1565b8761098c565b346101f55760203660031901126101f557600435600052603d602052602060018060a01b0360406000205416604051908152f35b346101f557610a823661206f565b603354604051632474521560e21b81526000805160206130268339815191526004820152336024820152602095946001600160a01b03939290919087908290604490829088165afa9081156103bf57600091610b84575b5015610814578181036107965760005b818110610af257005b80610b046109c4610b7f93868961223d565b85610b136109c484878c61223d565b16600052603b895285604060002091166001600160601b0360a01b825416179055610b426109c482858a61223d565b8580610b526109c485898c61223d565b1691167fe57bb0967c057cc1250686db6226a32119cd5417ae09e1905b8f844499880fe2600080a361220a565b610ae9565b610b9b9150873d89116103b8576103aa81836121b1565b87610ad9565b346101f557610baf3661212b565b603354604051632474521560e21b8152600080516020613026833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156103bf57600091610c41575b50156108145781151580610c30575b15610c1e5761081292612e05565b604051633c15d6ff60e21b8152600490fd5b50670de0b6b3a76400008210610c10565b610c59915060203d81116103b8576103aa81836121b1565b84610c01565b346101f557610c6d3661212b565b603354604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb60048201523360248201529192916001600160a01b03916020908290604490829086165afa9081156103bf57600091610d1e575b50156108145780841660005260366020526040600020908216600052602052604060002054821180610d0c5715610c1e5761081292612e05565b506706f05b59d3b20000821115610c10565b610d36915060203d81116103b8576103aa81836121b1565b85610cd2565b346101f5576020806003193601126101f557600435906001600160401b038083116101f557366023840112156101f55782600401359081116101f557602483019260243691606084020101116101f557603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152908390829060449082906001600160a01b03165afa9081156103bf57600091610e48575b50156108145760005b818110610dfe57005b80610e3e610e136109c4610e43948689612219565b610e2886610e2285888b612219565b01612229565b610e386040610e2286898c612219565b91612e9e565b61220a565b610df5565b610e5f9150833d85116103b8576103aa81836121b1565b84610dec565b346101f55760203660031901126101f557610e7e6120b9565b603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6360048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091610f2a575b5015610814577f5689afd64620ca3aba1015be2907df3b5ae25149d96691ba3de19f92e96ec14d9160209116806001600160601b0360a01b6035541617603555604051908152a1005b610f42915060203d81116103b8576103aa81836121b1565b83610ee1565b346101f55760203660031901126101f5576001600160a01b03610f696120b9565b16600052603c6020526020604060002054604051908152f35b346101f55760403660031901126101f557610f9b6120b9565b6001600160a01b03908180610fae6120cf565b169116818114610ff6576000526037602052604060002090600052602052604060002054168015610fe457602090604051908152f35b604051636ae912f160e11b8152600490fd5b60405163b213646160e01b8152600490fd5b346101f55760203660031901126101f55760206001600160a01b038061102c6120b9565b16600052603b825260406000205416604051908152f35b346101f55760603660031901126101f55761105c6120b9565b6110646120cf565b61106c6120e5565b603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156103bf576000916110df575b50156108145761081292612e9e565b6110f7915060203d81116103b8576103aa81836121b1565b846110d0565b346101f55760203660031901126101f5576111166120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091611179575b501561081457166001600160601b0360a01b603f541617603f55600080f35b611191915060203d81116103b8576103aa81836121b1565b8361115a565b346101f55760403660031901126101f55760206111c36111b56120b9565b6111bd6120cf565b90612d0f565b604051908152f35b346101f55760203660031901126101f5576004356044602060018060a01b036033541660405192838092632474521560e21b825260008051602061302683398151915260048301523360248301525afa9081156103bf57600091611261575b5015610814576020817f13c9323fdd8bdc59bca744cb04a1255896c91de5ebfd82b75e0040ffd672a2ec92603a55604051908152a1005b611279915060203d81116103b8576103aa81836121b1565b8261122a565b346101f55760003660031901126101f5576034546040516001600160a01b039091168152602090f35b346101f55760603660031901126101f5576112c16120cf565b6112c96120e5565b90600435600052603e602052604060002060018060a01b0380921660005260205260406000209116600052602052602060ff604060002054166040519015158152f35b346101f55760003660031901126101f5576033546040516001600160a01b039091168152602090f35b346101f55760403660031901126101f55760206111c36113536120b9565b61135b6120cf565b90612cb1565b346101f55760003660031901126101f5576043546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f5576113a36120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091611406575b501561081457166001600160601b0360a01b6040541617604055600080f35b61141e915060203d81116103b8576103aa81836121b1565b836113e7565b346101f5576020806003193601126101f5576004356001600160401b0381116101f5576114559036906004016120fb565b603354604051632474521560e21b815260008051602061302683398151915260048201523360248201529193916001600160a01b039183908290604490829086165afa9081156103bf5760009161165f575b50156108145760005b8481106114b957005b6060806114c783888861224d565b016114d19061225d565b6114dc83888861224d565b35600052603e90818652604060002085876114f8878c8c61224d565b0161150290612229565b166000528652604060002085611519868b8b61224d565b60400161152590612229565b166000528652604060002090611546919060ff801983541691151516179055565b8161155284898961224d565b0161155c9061225d565b9061156884898961224d565b35600052855260406000208461157f858a8a61224d565b60400161158b90612229565b166000528552604060002084866115a3868b8b61224d565b016115ad90612229565b1660005285526040600020906115ce919060ff801983541691151516179055565b836115da83888861224d565b35816115e7858a8a61224d565b016115f190612229565b9285806115ff878c8c61224d565b60400161160b90612229565b92611617888d8d61224d565b016116219061225d565b926040519315158452169416927fb9a3049feba6628f1f03d582f4092ed3d7b923b1e9b3e115ac55f7fd2d78198f91a461165a9061220a565b6114b0565b6116769150833d85116103b8576103aa81836121b1565b856114a7565b346101f55760203660031901126101f5576116956120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf576000916116f8575b501561081457166001600160601b0360a01b6042541617604255600080f35b611710915060203d81116103b8576103aa81836121b1565b836116d9565b346101f55760403660031901126101f55761172f6120b9565b6117376120cf565b9060018060a01b038091166000526036602052604060002091166000526020526020604060002054604051908152f35b346101f55760003660031901126101f5576035546001600160a01b0316600081611797575b602090604051908152f35b5060a060049160405192838092633fabe5a360e21b82525afa80156103bf576020916000916117c7575b5061178c565b6117e8915060a03d81116117f3575b6117e081836121b1565b8101906124ad565b5050509050826117c1565b503d6117d6565b60603660031901126101f55761180e6120b9565b6118166120cf565b906044356001600160401b0381116101f557366023820112156101f5578060040135906001600160401b0382116101f55736602483830101116101f55760208183810103126101f5576024810135916001600160401b0383116101f55760248183010160438484010112156101f5576024838301013590611896826122ae565b936118a460405195866121b1565b828552602085019060248386010160448560051b8388010101116101f557604481860101915b60448560051b83880101018310611b895788888880518015159081611b7e575b5015611b6c5780516000198101919082116119fe576001600160a01b039182906119149083612418565b51511682851603611b5a576003815114611b2a575b6004815114611aad575b829392670de0b6b3a7640000936000946000925b8451841015611aa257611966602061195f8688612418565b510161242c565b6004811015611a8c5760021480611a84575b611a46575b6119929061198b8587612418565b519061251d565b906000918015918215611a26575b505015611a14576706f05b59d3b200008101908181116119fe5781106119ec57670de0b6b3a76400009004956119e3856119da8587612418565b5151169361220a565b92969096611947565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b604051631550e8b760e01b8152600490fd5b91509150611a3e611a378383612483565b92836121ea565b1488806119a0565b9550611a5187612f09565b80611a75575b611a635760019561197d565b604051630efbb43d60e21b8152600490fd5b50611a7f82612f09565b611a57565b508615611978565b634e487b7160e01b600052602160045260246000fd5b602082604051908152f35b611abb602061195f836123fb565b6004811015611a8c576002141580611b0b575b80611aea575b6119335760405163980171a360e01b8152600490fd5b50611af9602061195f8361240b565b6004811015611a8c5760011415611ad4565b50611b1a602061195f8361240b565b6004811015611a8c571515611ace565b611b38602061195f836123fb565b6004811015611a8c576002036119295760405163980171a360e01b8152600490fd5b6040516309bf411560e11b8152600490fd5b60405163308c6ea760e21b8152600490fd5b6005915010846118ea565b82356001600160401b0381116101f557828701016060601f1982878a010301126101f55760405191611bba83612160565b60448201356001600160a01b03811681036101f5578352606482013560048110156101f55760208401526084820135906001600160401b0382116101f5576024878a010160638385010112156101f557611c19604483850101356123e0565b93611c2760405195866121b1565b83830160448101358087528b8a016024019101606401116101f5576044946000602087868882849a99859a0101356064838301018588013701013583010152604082015281520193019290506118ca565b346101f5576020806003193601126101f5576004356001600160401b0381116101f557611ca99036906004016120fb565b603354604051632474521560e21b815260008051602061302683398151915260048201523360248201526001600160a01b03939185908290604490829088165afa9081156103bf57600091611de2575b50156108145760005b828110611d0b57005b80611d7c611d1d611ddd93868661224d565b86611d2c6109c485898961224d565b1660005260418852604060002087611d498a610e22878b8b61224d565b1660005288526001611d696060604060002093604081013585550161225d565b91019060ff801983541691151516179055565b611d8a6109c482868661224d565b611d9987610e2284888861224d565b7fa38bfa44bbba9266438e9ec2c9f2001eb6517aa484626b25ec296ee888517f798888806040611dca888c8c61224d565b01359460405195865216941692a361220a565b611d02565b611df99150853d87116103b8576103aa81836121b1565b85611cf9565b346101f55760003660031901126101f5576042546040516001600160a01b039091168152602090f35b346101f55760003660031901126101f5576035546040516001600160a01b039091168152602090f35b346101f55760003660031901126101f5576020603a54604051908152f35b346101f55760403660031901126101f557611e886120b9565b611e906120cf565b9060018060a01b0380911660005260416020526040600020911660005260205260408060002060ff6001825492015416825191825215156020820152f35b346101f557611edc3661206f565b9260018060a01b039081603354166040518091632474521560e21b8252600080516020613026833981519152600483015233602483015281604460209485935afa9081156103bf57600091611fcf575b5015610814578585036107965760005b858110611f4557005b80611f576109c4611fca938a8961223d565b611f6282898761223d565b35600052603d845285604060002091166001600160601b0360a01b825416179055611f8e81888661223d565b3585611f9e6109c4848c8b61223d565b16907f23e0d9edcf44c0ab085e4918b7030577f9da7dd0c7869257b4598f9e7ff59eff600080a361220a565b611f3c565b611fe69150823d84116103b8576103aa81836121b1565b87611f2c565b346101f55760203660031901126101f5576004359063ffffffff60e01b82168092036101f5576020916333ca6d2360e21b811490811561202e575b5015158152f35b6301ffc9a760e01b14905083612027565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460051b0101116101f557565b60406003198201126101f5576001600160401b03916004358381116101f5578261209b9160040161203f565b939093926024359182116101f5576120b59160040161203f565b9091565b600435906001600160a01b03821682036101f557565b602435906001600160a01b03821682036101f557565b604435906001600160a01b03821682036101f557565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460071b0101116101f557565b60609060031901126101f5576001600160a01b039060043582811681036101f5579160243590811681036101f5579060443590565b606081019081106001600160401b0382111761050157604052565b608081019081106001600160401b0382111761050157604052565b604081019081106001600160401b0382111761050157604052565b90601f801991011681019081106001600160401b0382111761050157604052565b908160209103126101f5575180151581036101f55790565b81156121f4570490565b634e487b7160e01b600052601260045260246000fd5b60001981146119fe5760010190565b9190811015610780576060020190565b356001600160a01b03811681036101f55790565b91908110156107805760051b0190565b91908110156107805760071b0190565b3580151581036101f55790565b91908110156107805760051b81013590601e19813603018212156101f55701908135916001600160401b0383116101f5576020018260051b360381136101f5579190565b6001600160401b0381116105015760051b60200190565b81601f820112156101f5578051916122dc836122ae565b926122ea60405194856121b1565b808452602092838086019260051b8201019283116101f5578301905b828210612314575050505090565b81518152908301908301612306565b908060209392818452848401376000828201840152601f01601f1916010190565b9160208181850182865252604084019360408360051b82010194846000925b858410612374575050505050505090565b90919293949596603f198282030184528735601e19843603018112156101f55783018681019190356001600160401b0381116101f55780360383136101f5576123c288928392600195612323565b990194019401929594939190612363565b919082039182116119fe57565b6001600160401b03811161050157601f01601f191660200190565b8051600110156107805760400190565b8051156107805760200190565b80518210156107805760209160051b010190565b516004811015611a8c5790565b908160809103126101f5576060604051916124538361217b565b8051835260208101516020840152604081015160408401520151606082015290565b604d81116119fe57600a0a90565b818102929181159184041417156119fe57565b519069ffffffffffffffffffff821682036101f557565b908160a09103126101f5576124c181612496565b916020820151916040810151916124df608060608401519301612496565b90565b908160209103126101f5575160ff811681036101f55790565b60ff166012039060ff82116119fe57565b60ff16604d81116119fe57600a0a90565b602082810180516001600160a01b039380851692600492610348808614939092909185811015612a345715612a4957805185811015612a3457600314612839575184811015612824576001146126735750505060409384860151958487519701519685811061265f575b5086600052603d85528186600020541696871561264f57600052603e8552856000208460005285528560002082825116600052855260ff8660002054161561263f5791600060449286959451169787519889958694635d5530df60e11b865285015260248401525af19182156126355750600091612606575b50905090565b82813d831161262e575b61261a81836121b1565b8101031261262b5750518038612600565b80fd5b503d612610565b513d6000823e3d90fd5b8551632ccb516160e21b81528390fd5b86516345f68a8f60e11b81528490fd5b60001990860360031b1b9096169538612587565b828796979399989294955015612800575b829350886000146127f8575051165b16600052603b83526040918260002054169283156127e9578251633fabe5a360e21b81529360a0858481845afa9485156127de576000956127b9575b5060008513156127a9576000961561276a578382939495969750519384809263313ce56760e01b82525afa928315612635575061272161272c936124df95936127269360009261273d575b50506124fb565b61250c565b90612483565b6127388160011c613001565b6121ea565b61275c9250803d10612763575b61275481836121b1565b8101906124e2565b388061271a565b503d61274a565b819084519384809263313ce56760e01b82525afa9283156127a057509161272191612726936124df96979261273d5750506124fb565b513d87823e3d90fd5b83516302eb41cf60e51b81528390fd5b6127d291955060a03d81116117f3576117e081836121b1565b505050905093386126cf565b84513d6000823e3d90fd5b5090516345f68a8f60e11b8152fd5b915050612693565b9181939151160361281357818491612684565b6040516381c30d7b60e01b81528390fd5b602185634e487b7160e01b6000525260246000fd5b5050505092600094919294908382526041865260409384832082855116845287528483209360ff600187519661286e88612196565b805488520154168886019015158152846060885161288b8161217b565b8281528b81018390528981018390520152511561296e575050608090845416925160248551809581936344dca75160e11b8352898301525afa918215612962578192612932575b5081946060830151920151601203906012821161291f575082916127266128f892612475565b935b0151612908603a54426123d3565b1161291257505090565b5163141f934360e31b8152fd5b634e487b7160e01b815260118552602490fd5b61295491925060803d811161295b575b61294c81836121b1565b810190612439565b90386128d2565b503d612942565b508251903d90823e3d90fd5b51821683526041875284832090835286528382208451935060ff9060019061299586612196565b8054865201541615801587850152612a2457608090845416925160248551809581936344dca75160e11b8352898301525afa918215612962578192612a04575b5081946060830151920151601203906012821161291f575061272c83926127266129fe93612475565b936128fa565b612a1d91925060803d811161295b5761294c81836121b1565b90386129d5565b505050516345f68a8f60e11b8152fd5b602186634e487b7160e01b6000525260246000fd5b508697919395945082969215612b8d575b82935086600014612b85575051165b16600052603c81526040908160002054948515612b7657608090603954169560248451809881936331d98b3f60e01b8352888301525afa948515612b6b57600095612ae3575b50506060840151612ac2603a54426123d3565b1161291257505015612ada5761272c6124df91612bc5565b6124df90612bc5565b9091946080823d8211612b63575b81612afe608093836121b1565b8101031261262b57855192612b128461217b565b82518060070b8103612b5f57845280830151906001600160401b0382168203612b5f5784015285820151908160030b820361262b5750906060918684015201516060820152923880612aaf565b8280fd5b3d9150612af1565b82513d6000823e3d90fd5b5050516345f68a8f60e11b8152fd5b915050612a69565b91819391511603612ba057818691612a5a565b604051633c2f4f2360e21b81528490fd5b63ffffffff16604d81116119fe57600a0a90565b60009081815160070b128015612ca1575b8015612c8f575b612c7d57604081015160030b8203808060030b03612c695760ff169160128311612c2557509061272660ff612c1f6001600160401b036124df955116936124fb565b16612bb1565b90516001600160401b031691601119019060ff8211612c55575090612c4f60ff6124df9316612bb1565b906121ea565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b6040516365a5785160e11b8152600490fd5b5060fe19604082015160030b12612bdd565b5081604082015160030b13612bd6565b90612cbc8183612d0f565b9160018060a01b0380911660005260366020526040600020911660005260205260406000205490808211600014612d0857505b670de0b6b3a7640000808211612d03575090565b905090565b9050612cef565b60018060a01b0380600092168252603760205260409281848420911683526020528282205416918215612600578051633fabe5a360e21b81529260a084600481845afa938415612df9578394612dce575b50602060049183519283809263313ce56760e01b82525afa918215612dc557509060ff918391612da7575b50166012039060128211612c555750906127266124df92612475565b612dbf915060203d81116127635761275481836121b1565b38612d8b565b513d84823e3d90fd5b6004919450612dec60209160a03d81116117f3576117e081836121b1565b5050509050949150612d60565b505051903d90823e3d90fd5b6001600160a01b039081169182151580612e93575b15612e81571691828214612e6f5760207ffc6e73fcfea315539ce6038e373ebf76c8fd5169e820723ef2d2f4485528ced8918360005260368252604060002085600052825280604060002055604051908152a3565b604051631d8fdb5560e11b8152600490fd5b604051630803ae7360e11b8152600490fd5b508181161515612e1a565b6001600160a01b039182169190811690818314610ff6577f410d79a2eddf639a562ae356290f947311e7c951e05ee1e957f18898bd664bb39060009083825260376020526040822085835260205260408220951694856001600160601b0360a01b82541617905580a4565b60018060a01b0380911690600091808352602091603c835260409081852054612f7f57603b8452808286205416612f7f57604184528185206103488652845260ff6001838720015416612f7f5760ff9360019386526041815282862091604254168652528320015416612f795790565b50600190565b5050505050600190565b6040516301ffc9a760e01b81526329abf30760e11b60048201526001600160a01b039190911690602081602481855afa9081156103bf57600091612fe3575b501561037f576001600160601b0360a01b6043541617604355565b612ffb915060203d81116103b8576103aa81836121b1565b38612fc8565b906ec097ce7bc90715b34b9f1000000000918201918281116119fe5782106119ec5756fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8a2646970667358221220f9572d32b83bf9ca992d08f4f7f806130ee56b531ee918dbba1fd892f0e91b1764736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611fec575080630a3c434c14611ece5780630bc6b20314611e6f5780630fa95a4214611e515780631e6a948f14611e285780632f48ab7d14611dff57806339d9043414611c78578063416be2f3146117fa578063455259cb146117675780634858138f1461171657806350c1b9231461167c5780635510bfce146114245780635d4934c01461138a57806361d027b31461136157806376b926e4146113355780637b1039991461130c57806384574738146112a85780638c7c9e0c1461127f578063970b6e78146111cb57806398bbc8dd146111975780639fb9b68f146110fd578063a5bbe8b514611043578063a6d1b92014611008578063ac8c5db914610f82578063b29ce00d14610f48578063b45994f814610e65578063bc5adf3714610d3c578063be49304e14610c5f578063cbaf3d0914610ba1578063cc2e4c4b14610a74578063dec0af6a14610a40578063e9a8f4841461092d578063ee22fd6f14610893578063ef44920d1461086a578063f0c9738e14610844578063f0f44260146107a8578063f197ce351461045d578063f8c8765e146101fa5763f98d06f0146101cc57600080fd5b346101f55760003660031901126101f5576039546040516001600160a01b039091168152602090f35b600080fd5b346101f55760803660031901126101f5576102136120b9565b61021b6120cf565b6102236120e5565b606435906001600160a01b0380831683036101f55760005460ff8160081c161595868097610450575b8015610439575b156103dd5760ff1982166001176000558291876103cb575b506040516301ffc9a760e01b8152637965db0b60e01b600482015291169290602081602481875afa9081156103bf57600091610391575b501561037f57816102db956001600160601b0360a01b948560335416176033551683603454161760345516906042541617604255612f89565b6000549060ff8260081c1615610326576102f157005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405163044aa57560e41b8152600490fd5b6103b2915060203d81116103b8575b6103aa81836121b1565b8101906121d2565b876102a2565b503d6103a0565b6040513d6000823e3d90fd5b61ffff1916610101176000558761026b565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156102535750600160ff831614610253565b50600160ff83161061024c565b6104663661206f565b92838392930361079657349360005b81811061051757858061048457005b60018060a01b036043541660405160208101908082106001600160401b03831117610501576000938493848094938194604052525af13d156104fc573d6104ca816123e0565b906104d860405192836121b1565b8152600060203d92013e5b156104ea57005b60405163c71509d160e01b8152600490fd5b6104e3565b634e487b7160e01b600052604160045260246000fd5b61052281838761223d565b3561063b576039546001600160a01b03169061053f81868661226a565b97906040519063d47eed4560e01b8252818061056260209c8d9460048401612344565b0381875afa9889156103bf5760009961060b575b50508088116105fa5787610589916123d3565b9661059582878761226a565b9093803b156101f557604051631df3cbc560e31b8152946000938693849283916105c29160048401612344565b03925af180156103bf576105e0575b6105db915061220a565b610475565b6001600160401b038211610501576105db916040526105d1565b604051624726cd60e11b8152600490fd5b9080929950813d8311610634575b61062381836121b1565b810103126101f55751968880610576565b503d610619565b600161064882848861223d565b3514610658575b6105db9061220a565b603f546001600160a01b03169061067081868661226a565b1561078057803590601e19813603018212156101f557016001600160401b0381358181116101f557602080930181360381136101f5576106d19560009283604051809981958294632ce81dbd60e21b84528a60048501526024840191612323565b03925af180156103bf576106e9575b5050905061064f565b3d806000863e6106f981866121b1565b84019382818603126101f5578051908282116101f557016060818603126101f5576040519261072784612160565b81518381116101f5578661073c9184016122c5565b8452808201518381116101f557866107559184016122c5565b9084015260408101519182116101f5576105db9460409261077692016122c5565b91015287806106e0565b634e487b7160e01b600052603260045260246000fd5b60405163554a08d160e11b8152600490fd5b346101f55760203660031901126101f5576107c16120b9565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156103bf57600091610826575b50156108145761081290612f89565b005b60405163036be76f60e61b8152600490fd5b61083e915060203d81116103b8576103aa81836121b1565b82610803565b346101f55760003660031901126101f557602060018060a01b0360405416604051908152f35b346101f55760003660031901126101f557603f546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f5576108ac6120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf5760009161090f575b501561081457166001600160601b0360a01b6039541617603955600080f35b610927915060203d81116103b8576103aa81836121b1565b836108f0565b346101f55761093b3661206f565b919260018060a01b039081603354166040518091632474521560e21b8252600080516020613026833981519152600483015233602483015281604460209485935afa9081156103bf57600091610a23575b5015610814578486036107965760005b8681106109a557005b806109b4610a1e92888861223d565b35856109c96109c4848c8961223d565b612229565b16600052603c84526040600020556109e56109c4828a8761223d565b856109f1838a8a61223d565b3591167f5f0ac2c1d339aa71cfd244b1806061c2dd58c142319c355a4b503464f39f0ce5600080a361220a565b61099c565b610a3a9150823d84116103b8576103aa81836121b1565b8761098c565b346101f55760203660031901126101f557600435600052603d602052602060018060a01b0360406000205416604051908152f35b346101f557610a823661206f565b603354604051632474521560e21b81526000805160206130268339815191526004820152336024820152602095946001600160a01b03939290919087908290604490829088165afa9081156103bf57600091610b84575b5015610814578181036107965760005b818110610af257005b80610b046109c4610b7f93868961223d565b85610b136109c484878c61223d565b16600052603b895285604060002091166001600160601b0360a01b825416179055610b426109c482858a61223d565b8580610b526109c485898c61223d565b1691167fe57bb0967c057cc1250686db6226a32119cd5417ae09e1905b8f844499880fe2600080a361220a565b610ae9565b610b9b9150873d89116103b8576103aa81836121b1565b87610ad9565b346101f557610baf3661212b565b603354604051632474521560e21b8152600080516020613026833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156103bf57600091610c41575b50156108145781151580610c30575b15610c1e5761081292612e05565b604051633c15d6ff60e21b8152600490fd5b50670de0b6b3a76400008210610c10565b610c59915060203d81116103b8576103aa81836121b1565b84610c01565b346101f557610c6d3661212b565b603354604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb60048201523360248201529192916001600160a01b03916020908290604490829086165afa9081156103bf57600091610d1e575b50156108145780841660005260366020526040600020908216600052602052604060002054821180610d0c5715610c1e5761081292612e05565b506706f05b59d3b20000821115610c10565b610d36915060203d81116103b8576103aa81836121b1565b85610cd2565b346101f5576020806003193601126101f557600435906001600160401b038083116101f557366023840112156101f55782600401359081116101f557602483019260243691606084020101116101f557603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152908390829060449082906001600160a01b03165afa9081156103bf57600091610e48575b50156108145760005b818110610dfe57005b80610e3e610e136109c4610e43948689612219565b610e2886610e2285888b612219565b01612229565b610e386040610e2286898c612219565b91612e9e565b61220a565b610df5565b610e5f9150833d85116103b8576103aa81836121b1565b84610dec565b346101f55760203660031901126101f557610e7e6120b9565b603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6360048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091610f2a575b5015610814577f5689afd64620ca3aba1015be2907df3b5ae25149d96691ba3de19f92e96ec14d9160209116806001600160601b0360a01b6035541617603555604051908152a1005b610f42915060203d81116103b8576103aa81836121b1565b83610ee1565b346101f55760203660031901126101f5576001600160a01b03610f696120b9565b16600052603c6020526020604060002054604051908152f35b346101f55760403660031901126101f557610f9b6120b9565b6001600160a01b03908180610fae6120cf565b169116818114610ff6576000526037602052604060002090600052602052604060002054168015610fe457602090604051908152f35b604051636ae912f160e11b8152600490fd5b60405163b213646160e01b8152600490fd5b346101f55760203660031901126101f55760206001600160a01b038061102c6120b9565b16600052603b825260406000205416604051908152f35b346101f55760603660031901126101f55761105c6120b9565b6110646120cf565b61106c6120e5565b603354604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156103bf576000916110df575b50156108145761081292612e9e565b6110f7915060203d81116103b8576103aa81836121b1565b846110d0565b346101f55760203660031901126101f5576111166120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091611179575b501561081457166001600160601b0360a01b603f541617603f55600080f35b611191915060203d81116103b8576103aa81836121b1565b8361115a565b346101f55760403660031901126101f55760206111c36111b56120b9565b6111bd6120cf565b90612d0f565b604051908152f35b346101f55760203660031901126101f5576004356044602060018060a01b036033541660405192838092632474521560e21b825260008051602061302683398151915260048301523360248301525afa9081156103bf57600091611261575b5015610814576020817f13c9323fdd8bdc59bca744cb04a1255896c91de5ebfd82b75e0040ffd672a2ec92603a55604051908152a1005b611279915060203d81116103b8576103aa81836121b1565b8261122a565b346101f55760003660031901126101f5576034546040516001600160a01b039091168152602090f35b346101f55760603660031901126101f5576112c16120cf565b6112c96120e5565b90600435600052603e602052604060002060018060a01b0380921660005260205260406000209116600052602052602060ff604060002054166040519015158152f35b346101f55760003660031901126101f5576033546040516001600160a01b039091168152602090f35b346101f55760403660031901126101f55760206111c36113536120b9565b61135b6120cf565b90612cb1565b346101f55760003660031901126101f5576043546040516001600160a01b039091168152602090f35b346101f55760203660031901126101f5576113a36120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf57600091611406575b501561081457166001600160601b0360a01b6040541617604055600080f35b61141e915060203d81116103b8576103aa81836121b1565b836113e7565b346101f5576020806003193601126101f5576004356001600160401b0381116101f5576114559036906004016120fb565b603354604051632474521560e21b815260008051602061302683398151915260048201523360248201529193916001600160a01b039183908290604490829086165afa9081156103bf5760009161165f575b50156108145760005b8481106114b957005b6060806114c783888861224d565b016114d19061225d565b6114dc83888861224d565b35600052603e90818652604060002085876114f8878c8c61224d565b0161150290612229565b166000528652604060002085611519868b8b61224d565b60400161152590612229565b166000528652604060002090611546919060ff801983541691151516179055565b8161155284898961224d565b0161155c9061225d565b9061156884898961224d565b35600052855260406000208461157f858a8a61224d565b60400161158b90612229565b166000528552604060002084866115a3868b8b61224d565b016115ad90612229565b1660005285526040600020906115ce919060ff801983541691151516179055565b836115da83888861224d565b35816115e7858a8a61224d565b016115f190612229565b9285806115ff878c8c61224d565b60400161160b90612229565b92611617888d8d61224d565b016116219061225d565b926040519315158452169416927fb9a3049feba6628f1f03d582f4092ed3d7b923b1e9b3e115ac55f7fd2d78198f91a461165a9061220a565b6114b0565b6116769150833d85116103b8576103aa81836121b1565b856114a7565b346101f55760203660031901126101f5576116956120b9565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b0392916020908290604490829087165afa9081156103bf576000916116f8575b501561081457166001600160601b0360a01b6042541617604255600080f35b611710915060203d81116103b8576103aa81836121b1565b836116d9565b346101f55760403660031901126101f55761172f6120b9565b6117376120cf565b9060018060a01b038091166000526036602052604060002091166000526020526020604060002054604051908152f35b346101f55760003660031901126101f5576035546001600160a01b0316600081611797575b602090604051908152f35b5060a060049160405192838092633fabe5a360e21b82525afa80156103bf576020916000916117c7575b5061178c565b6117e8915060a03d81116117f3575b6117e081836121b1565b8101906124ad565b5050509050826117c1565b503d6117d6565b60603660031901126101f55761180e6120b9565b6118166120cf565b906044356001600160401b0381116101f557366023820112156101f5578060040135906001600160401b0382116101f55736602483830101116101f55760208183810103126101f5576024810135916001600160401b0383116101f55760248183010160438484010112156101f5576024838301013590611896826122ae565b936118a460405195866121b1565b828552602085019060248386010160448560051b8388010101116101f557604481860101915b60448560051b83880101018310611b895788888880518015159081611b7e575b5015611b6c5780516000198101919082116119fe576001600160a01b039182906119149083612418565b51511682851603611b5a576003815114611b2a575b6004815114611aad575b829392670de0b6b3a7640000936000946000925b8451841015611aa257611966602061195f8688612418565b510161242c565b6004811015611a8c5760021480611a84575b611a46575b6119929061198b8587612418565b519061251d565b906000918015918215611a26575b505015611a14576706f05b59d3b200008101908181116119fe5781106119ec57670de0b6b3a76400009004956119e3856119da8587612418565b5151169361220a565b92969096611947565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b604051631550e8b760e01b8152600490fd5b91509150611a3e611a378383612483565b92836121ea565b1488806119a0565b9550611a5187612f09565b80611a75575b611a635760019561197d565b604051630efbb43d60e21b8152600490fd5b50611a7f82612f09565b611a57565b508615611978565b634e487b7160e01b600052602160045260246000fd5b602082604051908152f35b611abb602061195f836123fb565b6004811015611a8c576002141580611b0b575b80611aea575b6119335760405163980171a360e01b8152600490fd5b50611af9602061195f8361240b565b6004811015611a8c5760011415611ad4565b50611b1a602061195f8361240b565b6004811015611a8c571515611ace565b611b38602061195f836123fb565b6004811015611a8c576002036119295760405163980171a360e01b8152600490fd5b6040516309bf411560e11b8152600490fd5b60405163308c6ea760e21b8152600490fd5b6005915010846118ea565b82356001600160401b0381116101f557828701016060601f1982878a010301126101f55760405191611bba83612160565b60448201356001600160a01b03811681036101f5578352606482013560048110156101f55760208401526084820135906001600160401b0382116101f5576024878a010160638385010112156101f557611c19604483850101356123e0565b93611c2760405195866121b1565b83830160448101358087528b8a016024019101606401116101f5576044946000602087868882849a99859a0101356064838301018588013701013583010152604082015281520193019290506118ca565b346101f5576020806003193601126101f5576004356001600160401b0381116101f557611ca99036906004016120fb565b603354604051632474521560e21b815260008051602061302683398151915260048201523360248201526001600160a01b03939185908290604490829088165afa9081156103bf57600091611de2575b50156108145760005b828110611d0b57005b80611d7c611d1d611ddd93868661224d565b86611d2c6109c485898961224d565b1660005260418852604060002087611d498a610e22878b8b61224d565b1660005288526001611d696060604060002093604081013585550161225d565b91019060ff801983541691151516179055565b611d8a6109c482868661224d565b611d9987610e2284888861224d565b7fa38bfa44bbba9266438e9ec2c9f2001eb6517aa484626b25ec296ee888517f798888806040611dca888c8c61224d565b01359460405195865216941692a361220a565b611d02565b611df99150853d87116103b8576103aa81836121b1565b85611cf9565b346101f55760003660031901126101f5576042546040516001600160a01b039091168152602090f35b346101f55760003660031901126101f5576035546040516001600160a01b039091168152602090f35b346101f55760003660031901126101f5576020603a54604051908152f35b346101f55760403660031901126101f557611e886120b9565b611e906120cf565b9060018060a01b0380911660005260416020526040600020911660005260205260408060002060ff6001825492015416825191825215156020820152f35b346101f557611edc3661206f565b9260018060a01b039081603354166040518091632474521560e21b8252600080516020613026833981519152600483015233602483015281604460209485935afa9081156103bf57600091611fcf575b5015610814578585036107965760005b858110611f4557005b80611f576109c4611fca938a8961223d565b611f6282898761223d565b35600052603d845285604060002091166001600160601b0360a01b825416179055611f8e81888661223d565b3585611f9e6109c4848c8b61223d565b16907f23e0d9edcf44c0ab085e4918b7030577f9da7dd0c7869257b4598f9e7ff59eff600080a361220a565b611f3c565b611fe69150823d84116103b8576103aa81836121b1565b87611f2c565b346101f55760203660031901126101f5576004359063ffffffff60e01b82168092036101f5576020916333ca6d2360e21b811490811561202e575b5015158152f35b6301ffc9a760e01b14905083612027565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460051b0101116101f557565b60406003198201126101f5576001600160401b03916004358381116101f5578261209b9160040161203f565b939093926024359182116101f5576120b59160040161203f565b9091565b600435906001600160a01b03821682036101f557565b602435906001600160a01b03821682036101f557565b604435906001600160a01b03821682036101f557565b9181601f840112156101f5578235916001600160401b0383116101f5576020808501948460071b0101116101f557565b60609060031901126101f5576001600160a01b039060043582811681036101f5579160243590811681036101f5579060443590565b606081019081106001600160401b0382111761050157604052565b608081019081106001600160401b0382111761050157604052565b604081019081106001600160401b0382111761050157604052565b90601f801991011681019081106001600160401b0382111761050157604052565b908160209103126101f5575180151581036101f55790565b81156121f4570490565b634e487b7160e01b600052601260045260246000fd5b60001981146119fe5760010190565b9190811015610780576060020190565b356001600160a01b03811681036101f55790565b91908110156107805760051b0190565b91908110156107805760071b0190565b3580151581036101f55790565b91908110156107805760051b81013590601e19813603018212156101f55701908135916001600160401b0383116101f5576020018260051b360381136101f5579190565b6001600160401b0381116105015760051b60200190565b81601f820112156101f5578051916122dc836122ae565b926122ea60405194856121b1565b808452602092838086019260051b8201019283116101f5578301905b828210612314575050505090565b81518152908301908301612306565b908060209392818452848401376000828201840152601f01601f1916010190565b9160208181850182865252604084019360408360051b82010194846000925b858410612374575050505050505090565b90919293949596603f198282030184528735601e19843603018112156101f55783018681019190356001600160401b0381116101f55780360383136101f5576123c288928392600195612323565b990194019401929594939190612363565b919082039182116119fe57565b6001600160401b03811161050157601f01601f191660200190565b8051600110156107805760400190565b8051156107805760200190565b80518210156107805760209160051b010190565b516004811015611a8c5790565b908160809103126101f5576060604051916124538361217b565b8051835260208101516020840152604081015160408401520151606082015290565b604d81116119fe57600a0a90565b818102929181159184041417156119fe57565b519069ffffffffffffffffffff821682036101f557565b908160a09103126101f5576124c181612496565b916020820151916040810151916124df608060608401519301612496565b90565b908160209103126101f5575160ff811681036101f55790565b60ff166012039060ff82116119fe57565b60ff16604d81116119fe57600a0a90565b602082810180516001600160a01b039380851692600492610348808614939092909185811015612a345715612a4957805185811015612a3457600314612839575184811015612824576001146126735750505060409384860151958487519701519685811061265f575b5086600052603d85528186600020541696871561264f57600052603e8552856000208460005285528560002082825116600052855260ff8660002054161561263f5791600060449286959451169787519889958694635d5530df60e11b865285015260248401525af19182156126355750600091612606575b50905090565b82813d831161262e575b61261a81836121b1565b8101031261262b5750518038612600565b80fd5b503d612610565b513d6000823e3d90fd5b8551632ccb516160e21b81528390fd5b86516345f68a8f60e11b81528490fd5b60001990860360031b1b9096169538612587565b828796979399989294955015612800575b829350886000146127f8575051165b16600052603b83526040918260002054169283156127e9578251633fabe5a360e21b81529360a0858481845afa9485156127de576000956127b9575b5060008513156127a9576000961561276a578382939495969750519384809263313ce56760e01b82525afa928315612635575061272161272c936124df95936127269360009261273d575b50506124fb565b61250c565b90612483565b6127388160011c613001565b6121ea565b61275c9250803d10612763575b61275481836121b1565b8101906124e2565b388061271a565b503d61274a565b819084519384809263313ce56760e01b82525afa9283156127a057509161272191612726936124df96979261273d5750506124fb565b513d87823e3d90fd5b83516302eb41cf60e51b81528390fd5b6127d291955060a03d81116117f3576117e081836121b1565b505050905093386126cf565b84513d6000823e3d90fd5b5090516345f68a8f60e11b8152fd5b915050612693565b9181939151160361281357818491612684565b6040516381c30d7b60e01b81528390fd5b602185634e487b7160e01b6000525260246000fd5b5050505092600094919294908382526041865260409384832082855116845287528483209360ff600187519661286e88612196565b805488520154168886019015158152846060885161288b8161217b565b8281528b81018390528981018390520152511561296e575050608090845416925160248551809581936344dca75160e11b8352898301525afa918215612962578192612932575b5081946060830151920151601203906012821161291f575082916127266128f892612475565b935b0151612908603a54426123d3565b1161291257505090565b5163141f934360e31b8152fd5b634e487b7160e01b815260118552602490fd5b61295491925060803d811161295b575b61294c81836121b1565b810190612439565b90386128d2565b503d612942565b508251903d90823e3d90fd5b51821683526041875284832090835286528382208451935060ff9060019061299586612196565b8054865201541615801587850152612a2457608090845416925160248551809581936344dca75160e11b8352898301525afa918215612962578192612a04575b5081946060830151920151601203906012821161291f575061272c83926127266129fe93612475565b936128fa565b612a1d91925060803d811161295b5761294c81836121b1565b90386129d5565b505050516345f68a8f60e11b8152fd5b602186634e487b7160e01b6000525260246000fd5b508697919395945082969215612b8d575b82935086600014612b85575051165b16600052603c81526040908160002054948515612b7657608090603954169560248451809881936331d98b3f60e01b8352888301525afa948515612b6b57600095612ae3575b50506060840151612ac2603a54426123d3565b1161291257505015612ada5761272c6124df91612bc5565b6124df90612bc5565b9091946080823d8211612b63575b81612afe608093836121b1565b8101031261262b57855192612b128461217b565b82518060070b8103612b5f57845280830151906001600160401b0382168203612b5f5784015285820151908160030b820361262b5750906060918684015201516060820152923880612aaf565b8280fd5b3d9150612af1565b82513d6000823e3d90fd5b5050516345f68a8f60e11b8152fd5b915050612a69565b91819391511603612ba057818691612a5a565b604051633c2f4f2360e21b81528490fd5b63ffffffff16604d81116119fe57600a0a90565b60009081815160070b128015612ca1575b8015612c8f575b612c7d57604081015160030b8203808060030b03612c695760ff169160128311612c2557509061272660ff612c1f6001600160401b036124df955116936124fb565b16612bb1565b90516001600160401b031691601119019060ff8211612c55575090612c4f60ff6124df9316612bb1565b906121ea565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b6040516365a5785160e11b8152600490fd5b5060fe19604082015160030b12612bdd565b5081604082015160030b13612bd6565b90612cbc8183612d0f565b9160018060a01b0380911660005260366020526040600020911660005260205260406000205490808211600014612d0857505b670de0b6b3a7640000808211612d03575090565b905090565b9050612cef565b60018060a01b0380600092168252603760205260409281848420911683526020528282205416918215612600578051633fabe5a360e21b81529260a084600481845afa938415612df9578394612dce575b50602060049183519283809263313ce56760e01b82525afa918215612dc557509060ff918391612da7575b50166012039060128211612c555750906127266124df92612475565b612dbf915060203d81116127635761275481836121b1565b38612d8b565b513d84823e3d90fd5b6004919450612dec60209160a03d81116117f3576117e081836121b1565b5050509050949150612d60565b505051903d90823e3d90fd5b6001600160a01b039081169182151580612e93575b15612e81571691828214612e6f5760207ffc6e73fcfea315539ce6038e373ebf76c8fd5169e820723ef2d2f4485528ced8918360005260368252604060002085600052825280604060002055604051908152a3565b604051631d8fdb5560e11b8152600490fd5b604051630803ae7360e11b8152600490fd5b508181161515612e1a565b6001600160a01b039182169190811690818314610ff6577f410d79a2eddf639a562ae356290f947311e7c951e05ee1e957f18898bd664bb39060009083825260376020526040822085835260205260408220951694856001600160601b0360a01b82541617905580a4565b60018060a01b0380911690600091808352602091603c835260409081852054612f7f57603b8452808286205416612f7f57604184528185206103488652845260ff6001838720015416612f7f5760ff9360019386526041815282862091604254168652528320015416612f795790565b50600190565b5050505050600190565b6040516301ffc9a760e01b81526329abf30760e11b60048201526001600160a01b039190911690602081602481855afa9081156103bf57600091612fe3575b501561037f576001600160601b0360a01b6043541617604355565b612ffb915060203d81116103b8576103aa81836121b1565b38612fc8565b906ec097ce7bc90715b34b9f1000000000918201918281116119fe5782106119ec5756fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8a2646970667358221220f9572d32b83bf9ca992d08f4f7f806130ee56b531ee918dbba1fd892f0e91b1764736f6c63430008120033",
  "libraries": {},
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getExchangeRate(address,address,bytes)": {
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair.",
          "oracleData": "The list of oracles to use for price calculations"
        },
        "returns": {
          "_0": "exchangeRate for assetA/assetB in 10**18 decimality"
        }
      },
      "getGasPrice()": {
        "returns": {
          "price": "The current gas price."
        }
      },
      "getOraclePriceDrop(address,address)": {
        "params": {
          "assetA": "The address of the first asset.",
          "assetB": "The address of the second asset."
        },
        "returns": {
          "_0": "The priceDrop rate as a uint256 value."
        }
      },
      "getOraclePriceDropFeed(address,address)": {
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair."
        },
        "returns": {
          "_0": "priceDropFeed The address of the priceDrop feed associated with the asset pair."
        }
      },
      "getPairPriceDrop(address,address)": {
        "params": {
          "_assetA": "The address of asset A.",
          "_assetB": "The address of asset B."
        },
        "returns": {
          "priceDrop": "The priceDrop rate."
        }
      },
      "increasePairPriceDrop(address,address,uint256)": {
        "details": "Only callable by the EMERGENCY_ADMIN role. The _pairPriceDrop value must be greater than the current priceDrop value for the pair and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).",
        "params": {
          "_assetA": "The address of position asset",
          "_assetB": "The address of borrowed asset",
          "_pairPriceDrop": "The new priceDrop value for the pair (in wad)"
        }
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_eth": "Weth address if eth isn't native token of network. Otherwise set to zero address.",
          "_registry": "The address of PrimexRegistry contract",
          "_treasury": "Address of the Treasury",
          "_usdt": "Address of the USDT token"
        }
      },
      "setGasPriceFeed(address)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "priceFeed": "The address of the gas price feed contract."
        }
      },
      "setPairPriceDrop(address,address,uint256)": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN.",
        "params": {
          "_assetA": "The address of position asset",
          "_assetB": "The address of borrowed asset",
          "_pairPriceDrop": "The pair priceDrop (in wad)"
        }
      },
      "setPyth(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_pyth": "the address of the Pyth oracle"
        }
      },
      "setSupraPullOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_supraPullOracle": "the address of the Supra pull oracle"
        }
      },
      "setSupraStorageOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_supraStorageOracle": "the address of the Supra storage"
        }
      },
      "setTimeTolerance(uint256)": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_timeTolerance": "Time tolerance in seconds"
        }
      },
      "setTreasury(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_treasury": "the address of the treasury"
        }
      },
      "setUSDT(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_usdt": "the address of the USDT"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "updateChainlinkPriceFeedsUsd(address[],address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_feeds": "Array of price feeds.",
          "_tokens": "Array of token addresses."
        }
      },
      "updatePriceDropFeed(address,address,address)": {
        "details": "Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair.",
          "priceDropFeed": "The chain link priceDrop feed address for the pair assetA/assetB"
        }
      },
      "updatePriceDropFeeds((address,address,address)[])": {
        "details": "Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_updateParams": "The array of the UpdatePriceDropFeedsParams structs"
        }
      },
      "updatePullOracle(bytes[][],uint256[])": {
        "params": {
          "_data": "An array of update data for passed oracles",
          "_pullOracleTypes": "An array of oracle types  (Must conform to the UpdatePullOracle struct)"
        }
      },
      "updatePythPairId(address[],bytes32[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_priceFeedIds": "Array of pair ids.",
          "_tokens": "Array of token addresses."
        }
      },
      "updateSupraDataFeed((address,address,(uint256,bool))[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_params": "Array of token pairs and Supra ids."
        }
      },
      "updateUniv3TrustedPair((uint256,address,address,bool)[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_updateParams": "Array of token pairs, their DEXs and new trusted status."
        }
      },
      "updateUniv3TypeOracle(uint256[],address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_oracleTypes": "Array of ids of TWAP contracts.",
          "_oracles": "Array of TWAP contract addresses."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeRate(address,address,bytes)": {
        "notice": "Calculates exchange rate of one token to another according to the specific oracle route"
      },
      "getGasPrice()": {
        "notice": "Retrieves the current gas price from the specified gas price feed."
      },
      "getOraclePriceDrop(address,address)": {
        "notice": "Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop."
      },
      "getOraclePriceDropFeed(address,address)": {
        "notice": "Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping"
      },
      "getPairPriceDrop(address,address)": {
        "notice": "For a given asset pair retrieves the priceDrop rate which is the higher of the oracle pair priceDrop and the historical pair priceDrop."
      },
      "increasePairPriceDrop(address,address,uint256)": {
        "notice": "Increases the priceDrop of a pair of assets in the system."
      },
      "setGasPriceFeed(address)": {
        "notice": "Sets the gas price feed contract address."
      },
      "setPairPriceDrop(address,address,uint256)": {
        "notice": "Function to set (change) the pair priceDrop of the trading assets"
      },
      "setPyth(address)": {
        "notice": "Sets the Pyth address"
      },
      "setSupraPullOracle(address)": {
        "notice": "Sets the Supra pull oracle address"
      },
      "setSupraStorageOracle(address)": {
        "notice": "Sets the Supra storage address"
      },
      "setTimeTolerance(uint256)": {
        "notice": "Sets the time tolerance"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury address"
      },
      "setUSDT(address)": {
        "notice": "Sets the usdt address"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "updateChainlinkPriceFeedsUsd(address[],address[])": {
        "notice": "Sets or updates the Chainlink price feed for the list of tokens to usd."
      },
      "updatePriceDropFeed(address,address,address)": {
        "notice": "Updates the priceDrop feed for a specific pair of assets."
      },
      "updatePriceDropFeeds((address,address,address)[])": {
        "notice": "Updates the priceDrop feed for a specific pair of assets."
      },
      "updatePullOracle(bytes[][],uint256[])": {
        "notice": "Updates pull oracle data for passed oracle types"
      },
      "updatePythPairId(address[],bytes32[])": {
        "notice": "Sets or updates the Pyth pair ids for the list of tokens."
      },
      "updateSupraDataFeed((address,address,(uint256,bool))[])": {
        "notice": "Sets or updates the Supra price feeds for the list of tokens."
      },
      "updateUniv3TrustedPair((uint256,address,address,bool)[])": {
        "notice": "Sets or updates the Supra price feeds for the list of tokens."
      },
      "updateUniv3TypeOracle(uint256[],address[])": {
        "notice": "Sets Uni v3-based TWAP price oracle contracts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6506,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 53312,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 53315,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "eth",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 53318,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "gasPriceFeed",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 53325,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pairPriceDrops",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 53332,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "oraclePriceDropFeeds",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 53339,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "chainLinkPriceFeeds",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 53348,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IPyth)15115"
      },
      {
        "astId": 53351,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "timeTolerance",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 53356,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "chainlinkPriceFeedsUsd",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 53361,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pythPairIds",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 53366,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "univ3TypeOracles",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 53375,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "univ3TrustedPairs",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 53384,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraPullOracle",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(ISupraOraclePull)69535"
      },
      {
        "astId": 53388,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraStorageOracle",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(ISupraSValueFeed)69574"
      },
      {
        "astId": 53396,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraDataFeedID",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(SupraDataFeedId)51456_storage))"
      },
      {
        "astId": 53399,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "usdt",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 53402,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "treasury",
        "offset": 0,
        "slot": "67",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)15115": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_contract(ISupraOraclePull)69535": {
        "encoding": "inplace",
        "label": "contract ISupraOraclePull",
        "numberOfBytes": "20"
      },
      "t_contract(ISupraSValueFeed)69574": {
        "encoding": "inplace",
        "label": "contract ISupraSValueFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(SupraDataFeedId)51456_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IPriceOracleStorageV3.SupraDataFeedId))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SupraDataFeedId)51456_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SupraDataFeedId)51456_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceOracleStorageV3.SupraDataFeedId)",
        "numberOfBytes": "32",
        "value": "t_struct(SupraDataFeedId)51456_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_struct(SupraDataFeedId)51456_storage": {
        "encoding": "inplace",
        "label": "struct IPriceOracleStorageV3.SupraDataFeedId",
        "members": [
          {
            "astId": 51453,
            "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 51455,
            "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
            "label": "initialize",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}