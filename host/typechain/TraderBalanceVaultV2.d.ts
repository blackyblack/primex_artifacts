/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TraderBalanceVaultV2Interface extends ethers.utils.Interface {
  functions: {
    "balances(address,address)": FunctionFragment;
    "batchTopUpAvailableBalance((address[],uint256[],address,uint256))": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "increaseLockedBalance(address,address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registry()": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "testUpgrade()": FunctionFragment;
    "topUpAvailableBalance(address,address,uint256)": FunctionFragment;
    "unlockAsset((address,address,address,uint256))": FunctionFragment;
    "unpause()": FunctionFragment;
    "useTraderAssets((address,address,address,uint256,uint8))": FunctionFragment;
    "value()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFrom(address,address,address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTopUpAvailableBalance",
    values: [
      {
        traders: string[];
        amounts: BigNumberish[];
        asset: string;
        length: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockedBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUpAvailableBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAsset",
    values: [
      { trader: string; receiver: string; asset: string; amount: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useTraderAssets",
    values: [
      {
        trader: string;
        depositReceiver: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        openType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [string, string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTopUpAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useTraderAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    depositer: string;
    asset: string;
    amount: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    withdrawer: string;
    asset: string;
    amount: BigNumber;
  }
>;

export class TraderBalanceVaultV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TraderBalanceVaultV2Interface;

  functions: {
    balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        lockedBalance: BigNumber;
      }
    >;

    batchTopUpAvailableBalance(
      _params: {
        traders: string[];
        amounts: BigNumberish[];
        asset: string;
        length: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLockedBalance(
      _trader: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testUpgrade(overrides?: CallOverrides): Promise<[string]>;

    topUpAvailableBalance(
      receiver: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockAsset(
      _params: {
        trader: string;
        receiver: string;
        asset: string;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useTraderAssets(
      _params: {
        trader: string;
        depositReceiver: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        openType: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFrom(
      _from: string,
      _to: string,
      _asset: string,
      _amount: BigNumberish,
      fromLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      lockedBalance: BigNumber;
    }
  >;

  batchTopUpAvailableBalance(
    _params: {
      traders: string[];
      amounts: BigNumberish[];
      asset: string;
      length: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _asset: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLockedBalance(
    _trader: string,
    _asset: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _whiteBlackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  setValue(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testUpgrade(overrides?: CallOverrides): Promise<string>;

  topUpAvailableBalance(
    receiver: string,
    asset: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockAsset(
    _params: {
      trader: string;
      receiver: string;
      asset: string;
      amount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useTraderAssets(
    _params: {
      trader: string;
      depositReceiver: string;
      depositAsset: string;
      depositAmount: BigNumberish;
      openType: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _asset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFrom(
    _from: string,
    _to: string,
    _asset: string,
    _amount: BigNumberish,
    fromLocked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        lockedBalance: BigNumber;
      }
    >;

    batchTopUpAvailableBalance(
      _params: {
        traders: string[];
        amounts: BigNumberish[];
        asset: string;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLockedBalance(
      _trader: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _whiteBlackList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    setValue(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testUpgrade(overrides?: CallOverrides): Promise<string>;

    topUpAvailableBalance(
      receiver: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockAsset(
      _params: {
        trader: string;
        receiver: string;
        asset: string;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    useTraderAssets(
      _params: {
        trader: string;
        depositReceiver: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        openType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrom(
      _from: string,
      _to: string,
      _asset: string,
      _amount: BigNumberish,
      fromLocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      depositer?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositer: string; asset: string; amount: BigNumber }
    >;

    Deposit(
      depositer?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositer: string; asset: string; amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdraw(address,address,uint256)"(
      withdrawer?: string | null,
      asset?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { withdrawer: string; asset: string; amount: BigNumber }
    >;

    Withdraw(
      withdrawer?: string | null,
      asset?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { withdrawer: string; asset: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTopUpAvailableBalance(
      _params: {
        traders: string[];
        amounts: BigNumberish[];
        asset: string;
        length: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLockedBalance(
      _trader: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    topUpAvailableBalance(
      receiver: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockAsset(
      _params: {
        trader: string;
        receiver: string;
        asset: string;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useTraderAssets(
      _params: {
        trader: string;
        depositReceiver: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        openType: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFrom(
      _from: string,
      _to: string,
      _asset: string,
      _amount: BigNumberish,
      fromLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTopUpAvailableBalance(
      _params: {
        traders: string[];
        amounts: BigNumberish[];
        asset: string;
        length: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLockedBalance(
      _trader: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topUpAvailableBalance(
      receiver: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockAsset(
      _params: {
        trader: string;
        receiver: string;
        asset: string;
        amount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useTraderAssets(
      _params: {
        trader: string;
        depositReceiver: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        openType: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFrom(
      _from: string,
      _to: string,
      _asset: string,
      _amount: BigNumberish,
      fromLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
