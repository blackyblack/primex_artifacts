/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBestDexLensInterface extends ethers.utils.Interface {
  functions: {
    "getBestDexByOrder((address,address,uint256,(uint256,uint256,uint256),tuple[],bytes,bytes[][],uint256[]))": FunctionFragment;
    "getBestDexByPosition(address,uint256,uint256,tuple[])": FunctionFragment;
    "getBestDexForOpenablePosition((address,address,uint256,address,uint256,address,(uint256,uint256,uint256),tuple[]))": FunctionFragment;
    "getBestMultipleDexes((address,address,address,uint256,bool,uint256,uint256,tuple[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBestDexByOrder",
    values: [
      {
        positionManager: string;
        limitOrderManager: string;
        orderId: BigNumberish;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
        depositBorrowedAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestDexByPosition",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      { dex: string; ancillaryData: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestDexForOpenablePosition",
    values: [
      {
        positionManager: string;
        borrowedAsset: string;
        borrowedAmount: BigNumberish;
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestMultipleDexes",
    values: [
      {
        positionManager: string;
        assetToBuy: string;
        assetToSell: string;
        amount: BigNumberish;
        isAmountToBuy: boolean;
        shares: BigNumberish;
        gasPriceInCheckedAsset: BigNumberish;
        dexes: { dex: string; ancillaryData: BytesLike }[];
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBestDexByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestDexByPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestDexForOpenablePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestMultipleDexes",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBestDexLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBestDexLensInterface;

  functions: {
    getBestDexByOrder(
      _params: {
        positionManager: string;
        limitOrderManager: string;
        orderId: BigNumberish;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
        depositBorrowedAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestDexByPosition(
      _positionManager: string,
      _positionId: BigNumberish,
      _shares: BigNumberish,
      _dexesWithAncillaryData: { dex: string; ancillaryData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestDexForOpenablePosition(
      _params: {
        positionManager: string;
        borrowedAsset: string;
        borrowedAmount: BigNumberish;
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestMultipleDexes(
      _params: {
        positionManager: string;
        assetToBuy: string;
        assetToSell: string;
        amount: BigNumberish;
        isAmountToBuy: boolean;
        shares: BigNumberish;
        gasPriceInCheckedAsset: BigNumberish;
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBestDexByOrder(
    _params: {
      positionManager: string;
      limitOrderManager: string;
      orderId: BigNumberish;
      shares: {
        firstAssetShares: BigNumberish;
        depositInThirdAssetShares: BigNumberish;
        depositToBorrowedShares: BigNumberish;
      };
      dexes: { dex: string; ancillaryData: BytesLike }[];
      depositBorrowedAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestDexByPosition(
    _positionManager: string,
    _positionId: BigNumberish,
    _shares: BigNumberish,
    _dexesWithAncillaryData: { dex: string; ancillaryData: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestDexForOpenablePosition(
    _params: {
      positionManager: string;
      borrowedAsset: string;
      borrowedAmount: BigNumberish;
      depositAsset: string;
      depositAmount: BigNumberish;
      positionAsset: string;
      shares: {
        firstAssetShares: BigNumberish;
        depositInThirdAssetShares: BigNumberish;
        depositToBorrowedShares: BigNumberish;
      };
      dexes: { dex: string; ancillaryData: BytesLike }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestMultipleDexes(
    _params: {
      positionManager: string;
      assetToBuy: string;
      assetToSell: string;
      amount: BigNumberish;
      isAmountToBuy: boolean;
      shares: BigNumberish;
      gasPriceInCheckedAsset: BigNumberish;
      dexes: { dex: string; ancillaryData: BytesLike }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBestDexByOrder(
      _params: {
        positionManager: string;
        limitOrderManager: string;
        orderId: BigNumberish;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
        depositBorrowedAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        },
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        },
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        }
      ] & {
        firstAssetReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
        depositInThirdAssetReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
        depositToBorrowedReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
      }
    >;

    getBestDexByPosition(
      _positionManager: string,
      _positionId: BigNumberish,
      _shares: BigNumberish,
      _dexesWithAncillaryData: { dex: string; ancillaryData: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        ([
          BigNumber,
          ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[]
        ] & {
          shares: BigNumber;
          routes: ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[];
        })[]
      ] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        megaRoutes: ([
          BigNumber,
          ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[]
        ] & {
          shares: BigNumber;
          routes: ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[];
        })[];
      }
    >;

    getBestDexForOpenablePosition(
      _params: {
        positionManager: string;
        borrowedAsset: string;
        borrowedAmount: BigNumberish;
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        },
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        },
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        }
      ] & {
        _firstAssetReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
        _depositInThirdAssetReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
        _depositToBorrowedReturnParams: [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[]
        ] & {
          returnAmount: BigNumber;
          estimateGasAmount: BigNumber;
          megaRoutes: ([
            BigNumber,
            ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[]
          ] & {
            shares: BigNumber;
            routes: ([
              string,
              ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[]
            ] & {
              to: string;
              paths: ([string, BigNumber, string] & {
                dexName: string;
                shares: BigNumber;
                payload: string;
              })[];
            })[];
          })[];
        };
      }
    >;

    getBestMultipleDexes(
      _params: {
        positionManager: string;
        assetToBuy: string;
        assetToSell: string;
        amount: BigNumberish;
        isAmountToBuy: boolean;
        shares: BigNumberish;
        gasPriceInCheckedAsset: BigNumberish;
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        ([
          BigNumber,
          ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[]
        ] & {
          shares: BigNumber;
          routes: ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[];
        })[]
      ] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        megaRoutes: ([
          BigNumber,
          ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[]
        ] & {
          shares: BigNumber;
          routes: ([
            string,
            ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[]
          ] & {
            to: string;
            paths: ([string, BigNumber, string] & {
              dexName: string;
              shares: BigNumber;
              payload: string;
            })[];
          })[];
        })[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    getBestDexByOrder(
      _params: {
        positionManager: string;
        limitOrderManager: string;
        orderId: BigNumberish;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
        depositBorrowedAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestDexByPosition(
      _positionManager: string,
      _positionId: BigNumberish,
      _shares: BigNumberish,
      _dexesWithAncillaryData: { dex: string; ancillaryData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestDexForOpenablePosition(
      _params: {
        positionManager: string;
        borrowedAsset: string;
        borrowedAmount: BigNumberish;
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestMultipleDexes(
      _params: {
        positionManager: string;
        assetToBuy: string;
        assetToSell: string;
        amount: BigNumberish;
        isAmountToBuy: boolean;
        shares: BigNumberish;
        gasPriceInCheckedAsset: BigNumberish;
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBestDexByOrder(
      _params: {
        positionManager: string;
        limitOrderManager: string;
        orderId: BigNumberish;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
        depositBorrowedAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestDexByPosition(
      _positionManager: string,
      _positionId: BigNumberish,
      _shares: BigNumberish,
      _dexesWithAncillaryData: { dex: string; ancillaryData: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestDexForOpenablePosition(
      _params: {
        positionManager: string;
        borrowedAsset: string;
        borrowedAmount: BigNumberish;
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        shares: {
          firstAssetShares: BigNumberish;
          depositInThirdAssetShares: BigNumberish;
          depositToBorrowedShares: BigNumberish;
        };
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestMultipleDexes(
      _params: {
        positionManager: string;
        assetToBuy: string;
        assetToSell: string;
        amount: BigNumberish;
        isAmountToBuy: boolean;
        shares: BigNumberish;
        gasPriceInCheckedAsset: BigNumberish;
        dexes: { dex: string; ancillaryData: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
