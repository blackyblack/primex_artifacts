/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITreasuryStorageInterface extends ethers.utils.Interface {
  functions: {
    "initialTimestamp()": FunctionFragment;
    "registry()": FunctionFragment;
    "spenders(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spenders",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "initialTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;

  events: {
    "TransferFromTreasury(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferFromTreasury"): EventFragment;
}

export type TransferFromTreasuryEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    spender: string;
    receiver: string;
    token: string;
    amount: BigNumber;
  }
>;

export class ITreasuryStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITreasuryStorageInterface;

  functions: {
    initialTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spenders(
      spender: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  initialTimestamp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spenders(
    spender: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    spenders(
      spender: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        },
        BigNumber,
        BigNumber
      ]
    >;
  };

  filters: {
    "TransferFromTreasury(address,address,address,uint256)"(
      spender?: string | null,
      receiver?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { spender: string; receiver: string; token: string; amount: BigNumber }
    >;

    TransferFromTreasury(
      spender?: string | null,
      receiver?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { spender: string; receiver: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    initialTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spenders(
      spender: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spenders(
      spender: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
