/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPrimexUpkeepInterface extends ethers.utils.Interface {
  functions: {
    "bestDexLens()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "lom()": FunctionFragment;
    "performUpkeepOrders(tuple[],address)": FunctionFragment;
    "performUpkeepOrdersUnsafe(tuple[],address)": FunctionFragment;
    "performUpkeepPositions(tuple[],address)": FunctionFragment;
    "performUpkeepPositionsUnsafe(tuple[],address)": FunctionFragment;
    "pm()": FunctionFragment;
    "primexLens()": FunctionFragment;
    "registry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bestDexLens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "lom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeepOrders",
    values: [
      {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeepOrdersUnsafe",
    values: [
      {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeepPositions",
    values: [
      {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeepPositionsUnsafe",
    values: [
      {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "pm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "primexLens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bestDexLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepOrdersUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepPositionsUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "primexLens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {
    "ErrorHandled(uint256,address,string)": EventFragment;
    "LowLevelErrorHandled(bytes)": EventFragment;
    "PanicErrorHandled(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ErrorHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LowLevelErrorHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PanicErrorHandled"): EventFragment;
}

export type ErrorHandledEvent = TypedEvent<
  [BigNumber, string, string] & {
    positionId: BigNumber;
    keeper: string;
    reason: string;
  }
>;

export type LowLevelErrorHandledEvent = TypedEvent<
  [string] & { revertReason: string }
>;

export type PanicErrorHandledEvent = TypedEvent<
  [BigNumber] & { panicErrorId: BigNumber }
>;

export class IPrimexUpkeep extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimexUpkeepInterface;

  functions: {
    bestDexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _positionManager: string,
      _limitOrderManager: string,
      _bestDexLens: string,
      _primexLens: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepOrders(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepOrdersUnsafe(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepPositions(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepPositionsUnsafe(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bestDexLens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _positionManager: string,
    _limitOrderManager: string,
    _bestDexLens: string,
    _primexLens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lom(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepOrders(
    toOpenByOrder: {
      id: BigNumberish;
      conditionIndex: BigNumberish;
      comAdditionalParams: BytesLike;
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositInThirdAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
      value: BigNumberish;
      borrowedAmount: BigNumberish;
    }[],
    keeper: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepOrdersUnsafe(
    toOpenByOrder: {
      id: BigNumberish;
      conditionIndex: BigNumberish;
      comAdditionalParams: BytesLike;
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositInThirdAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
      value: BigNumberish;
      borrowedAmount: BigNumberish;
    }[],
    keeper: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepPositions(
    toLiquidate: {
      id: BigNumberish;
      conditionIndex: BigNumberish;
      ccmAdditionalParams: BytesLike;
      positionAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      closeReason: BigNumberish;
      positionSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      pmxSoldAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
      value: BigNumberish;
    }[],
    keeper: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepPositionsUnsafe(
    toLiquidate: {
      id: BigNumberish;
      conditionIndex: BigNumberish;
      ccmAdditionalParams: BytesLike;
      positionAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      closeReason: BigNumberish;
      positionSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      pmxSoldAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
      value: BigNumberish;
    }[],
    keeper: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pm(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primexLens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bestDexLens(overrides?: CallOverrides): Promise<string>;

    initialize(
      _positionManager: string,
      _limitOrderManager: string,
      _bestDexLens: string,
      _primexLens: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lom(overrides?: CallOverrides): Promise<string>;

    performUpkeepOrders(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    performUpkeepOrdersUnsafe(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    performUpkeepPositions(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    performUpkeepPositionsUnsafe(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pm(overrides?: CallOverrides): Promise<string>;

    primexLens(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ErrorHandled(uint256,address,string)"(
      positionId?: BigNumberish | null,
      keeper?: string | null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { positionId: BigNumber; keeper: string; reason: string }
    >;

    ErrorHandled(
      positionId?: BigNumberish | null,
      keeper?: string | null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { positionId: BigNumber; keeper: string; reason: string }
    >;

    "LowLevelErrorHandled(bytes)"(
      revertReason?: null
    ): TypedEventFilter<[string], { revertReason: string }>;

    LowLevelErrorHandled(
      revertReason?: null
    ): TypedEventFilter<[string], { revertReason: string }>;

    "PanicErrorHandled(uint256)"(
      panicErrorId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { panicErrorId: BigNumber }>;

    PanicErrorHandled(
      panicErrorId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { panicErrorId: BigNumber }>;
  };

  estimateGas: {
    bestDexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _positionManager: string,
      _limitOrderManager: string,
      _bestDexLens: string,
      _primexLens: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepOrders(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepOrdersUnsafe(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepPositions(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepPositionsUnsafe(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bestDexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _positionManager: string,
      _limitOrderManager: string,
      _bestDexLens: string,
      _primexLens: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepOrders(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepOrdersUnsafe(
      toOpenByOrder: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
        borrowedAmount: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepPositions(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepPositionsUnsafe(
      toLiquidate: {
        id: BigNumberish;
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        positionAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        value: BigNumberish;
      }[],
      keeper: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primexLens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
