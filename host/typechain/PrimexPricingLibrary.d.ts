/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrimexPricingLibraryInterface extends ethers.utils.Interface {
  functions: {
    "decodePath(bytes,address,address)": FunctionFragment;
    "encodePath(address[],address,bytes32,address,bool)": FunctionFragment;
    "getLiquidationPrice(address,address,uint256,uint256,address)": FunctionFragment;
    "minPositionSize(address,IKeeperRewardDistributorV3,IPrimexDNSV3,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodePath",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodePath",
    values: [string[], string, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "decodePath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodePath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;

  events: {
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    withdrawer: string;
    borrowAssetReceiver: string;
    borrowedAsset: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export class PrimexPricingLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimexPricingLibraryInterface;

  functions: {
    decodePath(
      encodedPath: BytesLike,
      dexRouter: string,
      dexAdapter: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { path: string[] }>;

    encodePath(
      path: string[],
      dexRouter: string,
      ancillaryData: BytesLike,
      dexAdapter: string,
      isAmountToBuy: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minPositionSize(
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _primexDNS: string,
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minPositionSizeInNativeAsset: BigNumber }>;
  };

  decodePath(
    encodedPath: BytesLike,
    dexRouter: string,
    dexAdapter: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  encodePath(
    path: string[],
    dexRouter: string,
    ancillaryData: BytesLike,
    dexAdapter: string,
    isAmountToBuy: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getLiquidationPrice(
    _bucket: string,
    _positionAsset: string,
    _positionAmount: BigNumberish,
    _positionDebt: BigNumberish,
    _primexDNS: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minPositionSize(
    _priceOracle: string,
    _keeperRewardDistributor: string,
    _primexDNS: string,
    _tradingOrderType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    decodePath(
      encodedPath: BytesLike,
      dexRouter: string,
      dexAdapter: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    encodePath(
      path: string[],
      dexRouter: string,
      ancillaryData: BytesLike,
      dexAdapter: string,
      isAmountToBuy: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _primexDNS: string,
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Withdraw(address,address,address,uint256,uint256)"(
      withdrawer?: string | null,
      borrowAssetReceiver?: null,
      borrowedAsset?: null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        withdrawer: string;
        borrowAssetReceiver: string;
        borrowedAsset: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Withdraw(
      withdrawer?: string | null,
      borrowAssetReceiver?: null,
      borrowedAsset?: null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        withdrawer: string;
        borrowAssetReceiver: string;
        borrowedAsset: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    decodePath(
      encodedPath: BytesLike,
      dexRouter: string,
      dexAdapter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodePath(
      path: string[],
      dexRouter: string,
      ancillaryData: BytesLike,
      dexAdapter: string,
      isAmountToBuy: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _primexDNS: string,
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodePath(
      encodedPath: BytesLike,
      dexRouter: string,
      dexAdapter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodePath(
      path: string[],
      dexRouter: string,
      ancillaryData: BytesLike,
      dexAdapter: string,
      isAmountToBuy: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionSize(
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _primexDNS: string,
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
