/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPositionManagerV2Interface extends ethers.utils.Interface {
  functions: {
    "bucketPositionIds(address,uint256)": FunctionFragment;
    "closePosition(uint256,address,tuple[],uint256,bytes,bytes,bytes,bytes[][],uint256[])": FunctionFragment;
    "closePositionByCondition((uint256,address,tuple[],uint256,bytes,uint8,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))": FunctionFragment;
    "decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])": FunctionFragment;
    "defaultOracleTolerableLimit()": FunctionFragment;
    "deletePositions(uint256[],address[],uint256,address)": FunctionFragment;
    "doTransferOut(address,address,uint256)": FunctionFragment;
    "getAllPositionsLength()": FunctionFragment;
    "getBucketPositionsLength(address)": FunctionFragment;
    "getCloseCondition(uint256,uint256)": FunctionFragment;
    "getCloseConditions(uint256)": FunctionFragment;
    "getOracleTolerableLimit(address,address)": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "getPositionByIndex(uint256)": FunctionFragment;
    "getPositionDebt(uint256)": FunctionFragment;
    "getTraderPositionsLength(address)": FunctionFragment;
    "increaseDeposit(uint256,uint256,address,bool,tuple[],uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isDelistedPosition(uint256)": FunctionFragment;
    "keeperRewardDistributor()": FunctionFragment;
    "maintenanceBuffer()": FunctionFragment;
    "maxPositionSize(address,address)": FunctionFragment;
    "minPositionAsset()": FunctionFragment;
    "minPositionSize()": FunctionFragment;
    "openPosition(((string,uint256,tuple[]),tuple[],address,uint256,address,uint256,uint256,bool,bool,tuple[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))": FunctionFragment;
    "openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),tuple[],tuple[],tuple[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))": FunctionFragment;
    "partiallyClosePosition(uint256,uint256,address,tuple[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])": FunctionFragment;
    "pause()": FunctionFragment;
    "positionManagerExtension()": FunctionFragment;
    "positionsId()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "primexDNS()": FunctionFragment;
    "registry()": FunctionFragment;
    "securityBuffer()": FunctionFragment;
    "setPositionManagerExtension(address)": FunctionFragment;
    "setProtocolParamsByAdmin(bytes)": FunctionFragment;
    "spotTradingRewardDistributor()": FunctionFragment;
    "traderBalanceVault()": FunctionFragment;
    "traderPositionIds(address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePositionConditions(uint256,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bucketPositionIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      BigNumberish,
      string,
      {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[][],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionByCondition",
    values: [
      {
        id: BigNumberish;
        keeper: string;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDeposit",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike[][],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOracleTolerableLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deletePositions",
    values: [BigNumberish[], string[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doTransferOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketPositionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleTolerableLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderPositionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDeposit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelistedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionByOrder",
    values: [
      {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partiallyClosePosition",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[][],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionManagerExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionsId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "securityBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionManagerExtension",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolParamsByAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spotTradingRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderPositionIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePositionConditions",
    values: [BigNumberish, { managerType: BigNumberish; params: BytesLike }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bucketPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionByCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doTransferOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelistedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partiallyClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManagerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securityBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionManagerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolParamsByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spotTradingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionConditions",
    data: BytesLike
  ): Result;

  events: {
    "ChangePositionManagerExtension(address)": EventFragment;
    "DecreaseDeposit(uint256,address,uint256,uint256)": EventFragment;
    "IncreaseDeposit(uint256,address,uint256,uint256)": EventFragment;
    "KeeperRewardDistributorChanged(address)": EventFragment;
    "MaintenanceBufferChanged(uint256)": EventFragment;
    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])": EventFragment;
    "OracleTolerableLimitMultiplierChanged(uint256)": EventFragment;
    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)": EventFragment;
    "SecurityBufferChanged(uint256)": EventFragment;
    "SetDefaultOracleTolerableLimit(uint256)": EventFragment;
    "SetMaxPositionSize(address,address,uint256,uint256)": EventFragment;
    "SetOracleTolerableLimit(address,address,uint256)": EventFragment;
    "UpdatePositionConditions(uint256,address,tuple[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangePositionManagerExtension"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "KeeperRewardDistributorChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaintenanceBufferChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleTolerableLimitMultiplierChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecurityBufferChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDefaultOracleTolerableLimit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPositionSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleTolerableLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionConditions"): EventFragment;
}

export type ChangePositionManagerExtensionEvent = TypedEvent<
  [string] & { newPositionManagerExtension: string }
>;

export type DecreaseDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    positionId: BigNumber;
    trader: string;
    depositDelta: BigNumber;
    scaledDebtAmount: BigNumber;
  }
>;

export type IncreaseDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    positionId: BigNumber;
    trader: string;
    depositDelta: BigNumber;
    scaledDebtAmount: BigNumber;
  }
>;

export type KeeperRewardDistributorChangedEvent = TypedEvent<
  [string] & { _keeperRewardDistributor: string }
>;

export type MaintenanceBufferChangedEvent = TypedEvent<
  [BigNumber] & { maintenanceBuffer: BigNumber }
>;

export type OpenPositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    },
    BigNumber,
    BigNumber,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    openedBy: string;
    position: [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    };
    entryPrice: BigNumber;
    leverage: BigNumber;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export type OracleTolerableLimitMultiplierChangedEvent = TypedEvent<
  [BigNumber] & { newMultiplier: BigNumber }
>;

export type PartialClosePositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionId: BigNumber;
    trader: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: BigNumber;
    depositedAmount: BigNumber;
    scaledDebtAmount: BigNumber;
    profit: BigNumber;
    positionDebt: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SecurityBufferChangedEvent = TypedEvent<
  [BigNumber] & { securityBuffer: BigNumber }
>;

export type SetDefaultOracleTolerableLimitEvent = TypedEvent<
  [BigNumber] & { oracleTolerableLimit: BigNumber }
>;

export type SetMaxPositionSizeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token0: string;
    token1: string;
    amountInToken0: BigNumber;
    amountInToken1: BigNumber;
  }
>;

export type SetOracleTolerableLimitEvent = TypedEvent<
  [string, string, BigNumber] & {
    assetA: string;
    assetB: string;
    oracleTolerableLimit: BigNumber;
  }
>;

export type UpdatePositionConditionsEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export class IPositionManagerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPositionManagerV2Interface;

  functions: {
    bucketPositionIds(
      _bucket: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closePosition(
      _id: BigNumberish,
      _dealReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePositionByCondition(
      _params: {
        id: BigNumberish;
        keeper: string;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultOracleTolerableLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePositions(
      _ids: BigNumberish[],
      _traders: string[],
      _length: BigNumberish,
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doTransferOut(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllPositionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBucketPositionsLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCloseCondition(
      _positionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, string] & { managerType: BigNumber; params: string }]
    >;

    getCloseConditions(
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, string] & { managerType: BigNumber; params: string })[]]
    >;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        }
      ]
    >;

    getPositionByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        }
      ]
    >;

    getPositionDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTraderPositionsLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      _takeDepositFromWallet: boolean,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _traderBalanceVault: string,
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _whiteBlackList: string,
      _positionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDelistedPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeperRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    maintenanceBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPositionSize(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minPositionAsset(overrides?: CallOverrides): Promise<[string]>;

    minPositionSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positionManagerExtension(overrides?: CallOverrides): Promise<[string]>;

    positionsId(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    primexDNS(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    securityBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPositionManagerExtension(
      _newPositionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolParamsByAdmin(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spotTradingRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    traderBalanceVault(overrides?: CallOverrides): Promise<[string]>;

    traderPositionIds(
      _trader: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bucketPositionIds(
    _bucket: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    _id: BigNumberish,
    _dealReceiver: string,
    _megaRoutes: {
      shares: BigNumberish;
      routes: {
        to: string;
        paths: { dexName: string; shares: BigNumberish; payload: BytesLike }[];
      }[];
    }[],
    _amountOutMin: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    _pmxSoldAssetOracleData: BytesLike,
    _nativeSoldAssetOracleData: BytesLike,
    _pullOracleData: BytesLike[][],
    _pullOracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePositionByCondition(
    _params: {
      id: BigNumberish;
      keeper: string;
      megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      conditionIndex: BigNumberish;
      ccmAdditionalParams: BytesLike;
      closeReason: BigNumberish;
      positionSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      pmxSoldAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseDeposit(
    _positionId: BigNumberish,
    _amount: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    _nativeSoldAssetOracleData: BytesLike,
    _pullOracleData: BytesLike[][],
    _pullOracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultOracleTolerableLimit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePositions(
    _ids: BigNumberish[],
    _traders: string[],
    _length: BigNumberish,
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doTransferOut(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllPositionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBucketPositionsLength(
    _bucket: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCloseCondition(
    _positionId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { managerType: BigNumber; params: string }>;

  getCloseConditions(
    _positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  >;

  getOracleTolerableLimit(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    }
  >;

  getPositionByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    }
  >;

  getPositionDebt(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTraderPositionsLength(
    _trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseDeposit(
    _positionId: BigNumberish,
    _amount: BigNumberish,
    _asset: string,
    _takeDepositFromWallet: boolean,
    _megaRoutes: {
      shares: BigNumberish;
      routes: {
        to: string;
        paths: { dexName: string; shares: BigNumberish; payload: BytesLike }[];
      }[];
    }[],
    _amountOutMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _primexDNS: string,
    _traderBalanceVault: string,
    _priceOracle: string,
    _keeperRewardDistributor: string,
    _whiteBlackList: string,
    _positionManagerExtension: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDelistedPosition(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeperRewardDistributor(overrides?: CallOverrides): Promise<string>;

  maintenanceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  maxPositionSize(
    arg0: string,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minPositionAsset(overrides?: CallOverrides): Promise<string>;

  minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

  openPosition(
    _params: {
      marginParams: {
        bucket: string;
        borrowedAmount: BigNumberish;
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      };
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositAsset: string;
      depositAmount: BigNumberish;
      positionAsset: string;
      amountOutMin: BigNumberish;
      deadline: BigNumberish;
      takeDepositFromWallet: boolean;
      isProtocolFeeInPmx: boolean;
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPositionByOrder(
    _params: {
      sender: string;
      order: {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumberish;
        feeToken: string;
        protocolFee: BigNumberish;
        trader: string;
        deadline: BigNumberish;
        id: BigNumberish;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      };
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositInThirdAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      borrowedAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  partiallyClosePosition(
    _positionId: BigNumberish,
    _amount: BigNumberish,
    _depositReceiver: string,
    _megaRoutes: {
      shares: BigNumberish;
      routes: {
        to: string;
        paths: { dexName: string; shares: BigNumberish; payload: BytesLike }[];
      }[];
    }[],
    _amountOutMin: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    _nativePositionAssetOracleData: BytesLike,
    _nativeSoldAssetOracleData: BytesLike,
    _pmxSoldAssetOracleData: BytesLike,
    _pullOracleData: BytesLike[][],
    _pullOracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positionManagerExtension(overrides?: CallOverrides): Promise<string>;

  positionsId(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  primexDNS(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  securityBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  setPositionManagerExtension(
    _newPositionManagerExtension: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolParamsByAdmin(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spotTradingRewardDistributor(overrides?: CallOverrides): Promise<string>;

  traderBalanceVault(overrides?: CallOverrides): Promise<string>;

  traderPositionIds(
    _trader: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionConditions(
    _positionId: BigNumberish,
    _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bucketPositionIds(
      _bucket: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _id: BigNumberish,
      _dealReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    closePositionByCondition(
      _params: {
        id: BigNumberish;
        keeper: string;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultOracleTolerableLimit(overrides?: CallOverrides): Promise<BigNumber>;

    deletePositions(
      _ids: BigNumberish[],
      _traders: string[],
      _length: BigNumberish,
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doTransferOut(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllPositionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketPositionsLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseCondition(
      _positionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { managerType: BigNumber; params: string }
    >;

    getCloseConditions(
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string] & { managerType: BigNumber; params: string })[]
    >;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        scaledDebtAmount: BigNumber;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumber;
        positionAsset: string;
        positionAmount: BigNumber;
        trader: string;
        openBorrowIndex: BigNumber;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      }
    >;

    getPositionByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        scaledDebtAmount: BigNumber;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumber;
        positionAsset: string;
        positionAmount: BigNumber;
        trader: string;
        openBorrowIndex: BigNumber;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      }
    >;

    getPositionDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderPositionsLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      _takeDepositFromWallet: boolean,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _traderBalanceVault: string,
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _whiteBlackList: string,
      _positionManagerExtension: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDelistedPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeperRewardDistributor(overrides?: CallOverrides): Promise<string>;

    maintenanceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    maxPositionSize(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionAsset(overrides?: CallOverrides): Promise<string>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    positionManagerExtension(overrides?: CallOverrides): Promise<string>;

    positionsId(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    primexDNS(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    securityBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    setPositionManagerExtension(
      _newPositionManagerExtension: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolParamsByAdmin(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    spotTradingRewardDistributor(overrides?: CallOverrides): Promise<string>;

    traderBalanceVault(overrides?: CallOverrides): Promise<string>;

    traderPositionIds(
      _trader: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangePositionManagerExtension(address)"(
      newPositionManagerExtension?: string | null
    ): TypedEventFilter<[string], { newPositionManagerExtension: string }>;

    ChangePositionManagerExtension(
      newPositionManagerExtension?: string | null
    ): TypedEventFilter<[string], { newPositionManagerExtension: string }>;

    "DecreaseDeposit(uint256,address,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    DecreaseDeposit(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    "IncreaseDeposit(uint256,address,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    IncreaseDeposit(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    "KeeperRewardDistributorChanged(address)"(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    KeeperRewardDistributorChanged(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    "MaintenanceBufferChanged(uint256)"(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    MaintenanceBufferChanged(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    OpenPosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    "OracleTolerableLimitMultiplierChanged(uint256)"(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    OracleTolerableLimitMultiplierChanged(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    PartialClosePosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    "SecurityBufferChanged(uint256)"(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    SecurityBufferChanged(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    "SetDefaultOracleTolerableLimit(uint256)"(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    SetDefaultOracleTolerableLimit(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    "SetMaxPositionSize(address,address,uint256,uint256)"(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    SetMaxPositionSize(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    "SetOracleTolerableLimit(address,address,uint256)"(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    SetOracleTolerableLimit(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    "UpdatePositionConditions(uint256,address,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    UpdatePositionConditions(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;
  };

  estimateGas: {
    bucketPositionIds(
      _bucket: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _id: BigNumberish,
      _dealReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePositionByCondition(
      _params: {
        id: BigNumberish;
        keeper: string;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultOracleTolerableLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePositions(
      _ids: BigNumberish[],
      _traders: string[],
      _length: BigNumberish,
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doTransferOut(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllPositionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketPositionsLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseCondition(
      _positionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseConditions(
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderPositionsLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      _takeDepositFromWallet: boolean,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _traderBalanceVault: string,
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _whiteBlackList: string,
      _positionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDelistedPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    maxPositionSize(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minPositionAsset(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positionManagerExtension(overrides?: CallOverrides): Promise<BigNumber>;

    positionsId(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    primexDNS(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    securityBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    setPositionManagerExtension(
      _newPositionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolParamsByAdmin(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spotTradingRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    traderBalanceVault(overrides?: CallOverrides): Promise<BigNumber>;

    traderPositionIds(
      _trader: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bucketPositionIds(
      _bucket: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      _id: BigNumberish,
      _dealReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePositionByCondition(
      _params: {
        id: BigNumberish;
        keeper: string;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        conditionIndex: BigNumberish;
        ccmAdditionalParams: BytesLike;
        closeReason: BigNumberish;
        positionSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        pmxSoldAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultOracleTolerableLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePositions(
      _ids: BigNumberish[],
      _traders: string[],
      _length: BigNumberish,
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doTransferOut(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllPositionsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketPositionsLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloseCondition(
      _positionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloseConditions(
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleTolerableLimit(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderPositionsLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDeposit(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      _takeDepositFromWallet: boolean,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _traderBalanceVault: string,
      _priceOracle: string,
      _keeperRewardDistributor: string,
      _whiteBlackList: string,
      _positionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDelistedPosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintenanceBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPositionSize(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minPositionAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      _params: {
        marginParams: {
          bucket: string;
          borrowedAmount: BigNumberish;
          depositInThirdAssetMegaRoutes: {
            shares: BigNumberish;
            routes: {
              to: string;
              paths: {
                dexName: string;
                shares: BigNumberish;
                payload: BytesLike;
              }[];
            }[];
          }[];
        };
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositAsset: string;
        depositAmount: BigNumberish;
        positionAsset: string;
        amountOutMin: BigNumberish;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        isProtocolFeeInPmx: boolean;
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPositionByOrder(
      _params: {
        sender: string;
        order: {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumberish;
          feeToken: string;
          protocolFee: BigNumberish;
          trader: string;
          deadline: BigNumberish;
          id: BigNumberish;
          leverage: BigNumberish;
          shouldOpenPosition: boolean;
          createdAt: BigNumberish;
          updatedConditionsAt: BigNumberish;
          extraParams: BytesLike;
        };
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        borrowedAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    partiallyClosePosition(
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      _nativePositionAssetOracleData: BytesLike,
      _nativeSoldAssetOracleData: BytesLike,
      _pmxSoldAssetOracleData: BytesLike,
      _pullOracleData: BytesLike[][],
      _pullOracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positionManagerExtension(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primexDNS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    securityBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPositionManagerExtension(
      _newPositionManagerExtension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolParamsByAdmin(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spotTradingRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderBalanceVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderPositionIds(
      _trader: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionConditions(
      _positionId: BigNumberish,
      _closeConditions: { managerType: BigNumberish; params: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
