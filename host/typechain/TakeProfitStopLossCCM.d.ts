/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TakeProfitStopLossCCMInterface extends ethers.utils.Interface {
  functions: {
    "canBeClosedAfterSwap((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,bytes)": FunctionFragment;
    "getTakeProfitStopLossPrices(bytes)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)": FunctionFragment;
    "isTakeProfitReached(bytes,uint256)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "primexDNS()": FunctionFragment;
    "registry()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canBeClosedAfterSwap",
    values: [
      {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakeProfitStopLossPrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStopLossReached",
    values: [
      {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTakeProfitReached",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canBeClosedAfterSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakeProfitStopLossPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStopLossReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTakeProfitReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export class TakeProfitStopLossCCM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TakeProfitStopLossCCMInterface;

  functions: {
    canBeClosedAfterSwap(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTakeProfitStopLossPrices(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      _primexDNS: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "isStopLossReached(bytes,uint256)"(
      _params: BytesLike,
      oracleExchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTakeProfitReached(
      _params: BytesLike,
      exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    primexDNS(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  canBeClosedAfterSwap(
    _position: {
      id: BigNumberish;
      scaledDebtAmount: BigNumberish;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumberish;
      positionAsset: string;
      positionAmount: BigNumberish;
      trader: string;
      openBorrowIndex: BigNumberish;
      createdAt: BigNumberish;
      updatedConditionsAt: BigNumberish;
      extraParams: BytesLike;
    },
    _params: BytesLike,
    arg2: BytesLike,
    _closeAmount: BigNumberish,
    _borowedAssetAmount: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTakeProfitStopLossPrices(
    _params: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  initialize(
    _primexDNS: string,
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"(
    _position: {
      id: BigNumberish;
      scaledDebtAmount: BigNumberish;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumberish;
      positionAsset: string;
      positionAmount: BigNumberish;
      trader: string;
      openBorrowIndex: BigNumberish;
      createdAt: BigNumberish;
      updatedConditionsAt: BigNumberish;
      extraParams: BytesLike;
    },
    _stopLossPrice: BigNumberish,
    _positionSoldAssetOracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "isStopLossReached(bytes,uint256)"(
    _params: BytesLike,
    oracleExchangeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTakeProfitReached(
    _params: BytesLike,
    exchangeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  primexDNS(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    canBeClosedAfterSwap(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTakeProfitStopLossPrices(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      _primexDNS: string,
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isStopLossReached(bytes,uint256)"(
      _params: BytesLike,
      oracleExchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTakeProfitReached(
      _params: BytesLike,
      exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    primexDNS(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    canBeClosedAfterSwap(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTakeProfitStopLossPrices(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _primexDNS: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "isStopLossReached(bytes,uint256)"(
      _params: BytesLike,
      oracleExchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTakeProfitReached(
      _params: BytesLike,
      exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    primexDNS(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canBeClosedAfterSwap(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTakeProfitStopLossPrices(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _primexDNS: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"(
      _position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "isStopLossReached(bytes,uint256)"(
      _params: BytesLike,
      oracleExchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTakeProfitReached(
      _params: BytesLike,
      exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primexDNS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
