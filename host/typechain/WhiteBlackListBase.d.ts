/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WhiteBlackListBaseInterface extends ethers.utils.Interface {
  functions: {
    "addAddressToBlacklist(address)": FunctionFragment;
    "addAddressToWhitelist(address)": FunctionFragment;
    "addAddressesToBlacklist(address[])": FunctionFragment;
    "addAddressesToWhitelist(address[])": FunctionFragment;
    "getAccessType(address)": FunctionFragment;
    "isBlackListed(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeAddressFromBlacklist(address)": FunctionFragment;
    "removeAddressFromWhitelist(address)": FunctionFragment;
    "removeAddressesFromBlacklist(address[])": FunctionFragment;
    "removeAddressesFromWhitelist(address[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAddressToBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressesToBlacklist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressesToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlackListed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressesFromBlacklist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressesFromWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAddressToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressesToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressesToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlackListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressesFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressesFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BlacklistedAddressAdded(address)": EventFragment;
    "BlacklistedAddressRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "WhitelistedAddressAdded(address)": EventFragment;
    "WhitelistedAddressRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlacklistedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlacklistedAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressRemoved"): EventFragment;
}

export type BlacklistedAddressAddedEvent = TypedEvent<
  [string] & { addr: string }
>;

export type BlacklistedAddressRemovedEvent = TypedEvent<
  [string] & { addr: string }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type WhitelistedAddressAddedEvent = TypedEvent<
  [string] & { addr: string }
>;

export type WhitelistedAddressRemovedEvent = TypedEvent<
  [string] & { addr: string }
>;

export class WhiteBlackListBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WhiteBlackListBaseInterface;

  functions: {
    addAddressToBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAddressToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAddressesToBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAddressesToWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccessType(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isBlackListed(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeAddressFromBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAddressFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAddressesFromBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAddressesFromWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addAddressToBlacklist(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAddressToWhitelist(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAddressesToBlacklist(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAddressesToWhitelist(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccessType(_address: string, overrides?: CallOverrides): Promise<number>;

  isBlackListed(_address: string, overrides?: CallOverrides): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeAddressFromBlacklist(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAddressFromWhitelist(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAddressesFromBlacklist(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAddressesFromWhitelist(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addAddressToBlacklist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAddressToWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAddressesToBlacklist(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addAddressesToWhitelist(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccessType(_address: string, overrides?: CallOverrides): Promise<number>;

    isBlackListed(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeAddressFromBlacklist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAddressFromWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAddressesFromBlacklist(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeAddressesFromWhitelist(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BlacklistedAddressAdded(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    BlacklistedAddressAdded(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "BlacklistedAddressRemoved(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    BlacklistedAddressRemoved(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "WhitelistedAddressAdded(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    WhitelistedAddressAdded(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "WhitelistedAddressRemoved(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    WhitelistedAddressRemoved(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;
  };

  estimateGas: {
    addAddressToBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAddressToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAddressesToBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAddressesToWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccessType(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlackListed(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeAddressFromBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAddressFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAddressesFromBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAddressesFromWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAddressToBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAddressToWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAddressesToBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAddressesToWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccessType(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlackListed(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAddressFromBlacklist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAddressFromWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAddressesFromBlacklist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAddressesFromWhitelist(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
