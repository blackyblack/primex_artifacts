/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBucketMockInterface extends ethers.utils.Interface {
  functions: {
    "burnDebtToken(address,uint256,uint256)": FunctionFragment;
    "burnPToken(address,uint256,uint256)": FunctionFragment;
    "mintDebtToken(address,uint256,uint256)": FunctionFragment;
    "mintPToken(address,uint256,uint256)": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setCanClaimReward(bool)": FunctionFragment;
    "setDebtToken(address)": FunctionFragment;
    "setDelisted(bool)": FunctionFragment;
    "setLiquidityIndex(uint128)": FunctionFragment;
    "setLiquidityMiningParams((address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setNormalizedIncome(uint256)": FunctionFragment;
    "setPToken(address)": FunctionFragment;
    "setVariableBorrowIndex(uint128)": FunctionFragment;
    "setWhiteBlackList(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnDebtToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDebtToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setActive", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setCanClaimReward",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelisted",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityMiningParams",
    values: [
      {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumberish;
        deadlineTimestamp: BigNumberish;
        stabilizationDuration: BigNumberish;
        stabilizationEndTimestamp: BigNumberish;
        maxAmountPerUser: BigNumberish;
        maxDuration: BigNumberish;
        maxStabilizationEndTimestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNormalizedIncome",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVariableBorrowIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteBlackList",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCanClaimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityMiningParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVariableBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteBlackList",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBucketMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBucketMockInterface;

  functions: {
    burnDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActive(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCanClaimReward(
      _isClaimable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtToken(
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelisted(
      _delisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityIndex(
      _liquidityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityMiningParams(
      _newLMparams: {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumberish;
        deadlineTimestamp: BigNumberish;
        stabilizationDuration: BigNumberish;
        stabilizationEndTimestamp: BigNumberish;
        maxAmountPerUser: BigNumberish;
        maxDuration: BigNumberish;
        maxStabilizationEndTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNormalizedIncome(
      _normalizedIncome: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPToken(
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVariableBorrowIndex(
      _variableBorrowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteBlackList(
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnDebtToken(
    _trader: string,
    _amount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnPToken(
    _trader: string,
    _amount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintDebtToken(
    _trader: string,
    _amount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPToken(
    _trader: string,
    _amount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActive(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCanClaimReward(
    _isClaimable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtToken(
    _debtToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelisted(
    _delisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityIndex(
    _liquidityIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityMiningParams(
    _newLMparams: {
      liquidityMiningRewardDistributor: string;
      isBucketLaunched: boolean;
      accumulatingAmount: BigNumberish;
      deadlineTimestamp: BigNumberish;
      stabilizationDuration: BigNumberish;
      stabilizationEndTimestamp: BigNumberish;
      maxAmountPerUser: BigNumberish;
      maxDuration: BigNumberish;
      maxStabilizationEndTimestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNormalizedIncome(
    _normalizedIncome: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPToken(
    _pToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVariableBorrowIndex(
    _variableBorrowIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteBlackList(
    _whiteBlackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setActive(_active: boolean, overrides?: CallOverrides): Promise<boolean>;

    setCanClaimReward(
      _isClaimable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtToken(_debtToken: string, overrides?: CallOverrides): Promise<void>;

    setDelisted(
      _delisted: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLiquidityIndex(
      _liquidityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityMiningParams(
      _newLMparams: {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumberish;
        deadlineTimestamp: BigNumberish;
        stabilizationDuration: BigNumberish;
        stabilizationEndTimestamp: BigNumberish;
        maxAmountPerUser: BigNumberish;
        maxDuration: BigNumberish;
        maxStabilizationEndTimestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setNormalizedIncome(
      _normalizedIncome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPToken(_pToken: string, overrides?: CallOverrides): Promise<void>;

    setVariableBorrowIndex(
      _variableBorrowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhiteBlackList(
      _whiteBlackList: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActive(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCanClaimReward(
      _isClaimable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtToken(
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelisted(
      _delisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityIndex(
      _liquidityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityMiningParams(
      _newLMparams: {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumberish;
        deadlineTimestamp: BigNumberish;
        stabilizationDuration: BigNumberish;
        stabilizationEndTimestamp: BigNumberish;
        maxAmountPerUser: BigNumberish;
        maxDuration: BigNumberish;
        maxStabilizationEndTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNormalizedIncome(
      _normalizedIncome: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPToken(
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVariableBorrowIndex(
      _variableBorrowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteBlackList(
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintDebtToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPToken(
      _trader: string,
      _amount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActive(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCanClaimReward(
      _isClaimable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtToken(
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelisted(
      _delisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityIndex(
      _liquidityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityMiningParams(
      _newLMparams: {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumberish;
        deadlineTimestamp: BigNumberish;
        stabilizationDuration: BigNumberish;
        stabilizationEndTimestamp: BigNumberish;
        maxAmountPerUser: BigNumberish;
        maxDuration: BigNumberish;
        maxStabilizationEndTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNormalizedIncome(
      _normalizedIncome: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPToken(
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVariableBorrowIndex(
      _variableBorrowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteBlackList(
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
