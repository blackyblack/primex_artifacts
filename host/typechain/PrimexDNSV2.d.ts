/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrimexDNSV2Interface extends ethers.utils.Interface {
  functions: {
    "aavePool()": FunctionFragment;
    "activateBucket(string)": FunctionFragment;
    "activateDEX(string)": FunctionFragment;
    "addBucket(address,uint256)": FunctionFragment;
    "addDEX(string,address)": FunctionFragment;
    "additionalGasSpent()": FunctionFragment;
    "adminWithdrawalDelay()": FunctionFragment;
    "averageGasPerAction(uint8)": FunctionFragment;
    "buckets(string)": FunctionFragment;
    "cmTypeToAddress(uint256)": FunctionFragment;
    "delistingDelay()": FunctionFragment;
    "deprecateBucket(string)": FunctionFragment;
    "dexAdapter()": FunctionFragment;
    "dexes(string)": FunctionFragment;
    "feeRates(uint8,address)": FunctionFragment;
    "feeRestrictions(uint8)": FunctionFragment;
    "freezeBucket(string)": FunctionFragment;
    "freezeDEX(string)": FunctionFragment;
    "gasPriceBuffer()": FunctionFragment;
    "getAllDexes()": FunctionFragment;
    "getBucketAddress(string)": FunctionFragment;
    "getDexAddress(string)": FunctionFragment;
    "getL1BaseLengthForTradingOrderType(uint8)": FunctionFragment;
    "getParamsForMinPositionSize(uint8)": FunctionFragment;
    "getParamsForMinProtocolFee(uint8)": FunctionFragment;
    "getPrimexDNSParams(uint8)": FunctionFragment;
    "initialize((address,address,address,uint256,uint256,tuple[],tuple[],uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "leverageTolerance()": FunctionFragment;
    "liquidationGasAmount()": FunctionFragment;
    "maxProtocolFee()": FunctionFragment;
    "minFeeRestrictions(uint8)": FunctionFragment;
    "pmx()": FunctionFragment;
    "pmxDiscountMultiplier()": FunctionFragment;
    "protocolFeeCoefficient()": FunctionFragment;
    "protocolFeeRates(uint8)": FunctionFragment;
    "registry()": FunctionFragment;
    "setAavePool(address)": FunctionFragment;
    "setAdditionalGasSpent(uint256)": FunctionFragment;
    "setAverageGasPerAction((uint8,uint256))": FunctionFragment;
    "setConditionalManager(uint256,address)": FunctionFragment;
    "setDexAdapter(address)": FunctionFragment;
    "setGasPriceBuffer(uint256)": FunctionFragment;
    "setLeverageTolerance(uint256)": FunctionFragment;
    "setLiquidationGasAmount(uint256)": FunctionFragment;
    "setMaxProtocolFee(uint256)": FunctionFragment;
    "setMinFeeRestrictions(uint8,(uint256,uint256))": FunctionFragment;
    "setPMX(address)": FunctionFragment;
    "setPmxDiscountMultiplier(uint256)": FunctionFragment;
    "setProtocolFeeCoefficient(uint256)": FunctionFragment;
    "setProtocolFeeRate((uint8,uint256))": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "testUpgrade()": FunctionFragment;
    "treasury()": FunctionFragment;
    "value()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "activateDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBucket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDEX",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalGasSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "averageGasPerAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buckets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cmTypeToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dexAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "freezeDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gasPriceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1BaseLengthForTradingOrderType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForMinPositionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForMinProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimexDNSParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        registry: string;
        pmx: string;
        treasury: string;
        delistingDelay: BigNumberish;
        adminWithdrawalDelay: BigNumberish;
        feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
        averageGasPerActionParams: {
          tradingOrderType: BigNumberish;
          averageGasPerAction: BigNumberish;
        }[];
        maxProtocolFee: BigNumberish;
        liquidationGasAmount: BigNumberish;
        protocolFeeCoefficient: BigNumberish;
        additionalGasSpent: BigNumberish;
        pmxDiscountMultiplier: BigNumberish;
        gasPriceBuffer: BigNumberish;
        leverageTolerance: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationGasAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFeeRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pmxDiscountMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAavePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAdditionalGasSpent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAverageGasPerAction",
    values: [
      { tradingOrderType: BigNumberish; averageGasPerAction: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConditionalManager",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPriceBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationGasAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFeeRestrictions",
    values: [
      BigNumberish,
      { maxGasAmount: BigNumberish; baseLength: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setPMX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPmxDiscountMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRate",
    values: [{ feeRateType: BigNumberish; feeRate: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "additionalGasSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageGasPerAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cmTypeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezeDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1BaseLengthForTradingOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForMinProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimexDNSParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFeeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pmxDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdditionalGasSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAverageGasPerAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConditionalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinFeeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPMX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPmxDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {
    "AavePoolChanged(address)": EventFragment;
    "AddNewBucket(tuple)": EventFragment;
    "AddNewDex(tuple)": EventFragment;
    "BucketActivated(address)": EventFragment;
    "BucketDeprecated(address,uint256)": EventFragment;
    "BucketFrozen(address)": EventFragment;
    "ChangeAdditionalGasSpent(uint256)": EventFragment;
    "ChangeAverageGasPerAction(uint8,uint256)": EventFragment;
    "ChangeGasPriceBuffer(uint256)": EventFragment;
    "ChangeLeverageTolerance(uint256)": EventFragment;
    "ChangeLiquidationGasAmount(uint256)": EventFragment;
    "ChangeMaxProtocolFee(uint256)": EventFragment;
    "ChangeMinFeeRestrictions(uint8,tuple)": EventFragment;
    "ChangePmxDiscountMultiplier(uint256)": EventFragment;
    "ChangeProtocolFeeCoefficient(uint256)": EventFragment;
    "ChangeProtocolFeeRate(uint8,uint256)": EventFragment;
    "ConditionalManagerChanged(uint256,address)": EventFragment;
    "DexActivated(address)": EventFragment;
    "DexAdapterChanged(address)": EventFragment;
    "DexFrozen(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PMXchanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AavePoolChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddNewBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddNewDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeAdditionalGasSpent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeAverageGasPerAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeGasPriceBuffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeLeverageTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeLiquidationGasAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMaxProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinFeeRestrictions"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangePmxDiscountMultiplier"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangeProtocolFeeCoefficient"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeProtocolFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionalManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexAdapterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PMXchanged"): EventFragment;
}

export type AavePoolChangedEvent = TypedEvent<[string] & { aavePool: string }>;

export type AddNewBucketEvent = TypedEvent<
  [
    [string, number, BigNumber, BigNumber] & {
      bucketAddress: string;
      currentStatus: number;
      delistingDeadline: BigNumber;
      adminDeadline: BigNumber;
    }
  ] & {
    newBucketData: [string, number, BigNumber, BigNumber] & {
      bucketAddress: string;
      currentStatus: number;
      delistingDeadline: BigNumber;
      adminDeadline: BigNumber;
    };
  }
>;

export type AddNewDexEvent = TypedEvent<
  [[string, boolean] & { routerAddress: string; isActive: boolean }] & {
    newDexData: [string, boolean] & {
      routerAddress: string;
      isActive: boolean;
    };
  }
>;

export type BucketActivatedEvent = TypedEvent<
  [string] & { bucketAddress: string }
>;

export type BucketDeprecatedEvent = TypedEvent<
  [string, BigNumber] & { bucketAddress: string; delistingTime: BigNumber }
>;

export type BucketFrozenEvent = TypedEvent<
  [string] & { bucketAddress: string }
>;

export type ChangeAdditionalGasSpentEvent = TypedEvent<
  [BigNumber] & { additionalGasSpent: BigNumber }
>;

export type ChangeAverageGasPerActionEvent = TypedEvent<
  [number, BigNumber] & {
    tradingOrderType: number;
    averageGasPerAction: BigNumber;
  }
>;

export type ChangeGasPriceBufferEvent = TypedEvent<
  [BigNumber] & { gasPriceBuffer: BigNumber }
>;

export type ChangeLeverageToleranceEvent = TypedEvent<
  [BigNumber] & { leverageTolerance: BigNumber }
>;

export type ChangeLiquidationGasAmountEvent = TypedEvent<
  [BigNumber] & { liquidationGasAmount: BigNumber }
>;

export type ChangeMaxProtocolFeeEvent = TypedEvent<
  [BigNumber] & { maxProtocolFee: BigNumber }
>;

export type ChangeMinFeeRestrictionsEvent = TypedEvent<
  [
    number,
    [BigNumber, BigNumber] & { maxGasAmount: BigNumber; baseLength: BigNumber }
  ] & {
    callingMethod: number;
    minFeeRestrictions: [BigNumber, BigNumber] & {
      maxGasAmount: BigNumber;
      baseLength: BigNumber;
    };
  }
>;

export type ChangePmxDiscountMultiplierEvent = TypedEvent<
  [BigNumber] & { pmxDiscountMultiplier: BigNumber }
>;

export type ChangeProtocolFeeCoefficientEvent = TypedEvent<
  [BigNumber] & { protocolFeeCoefficient: BigNumber }
>;

export type ChangeProtocolFeeRateEvent = TypedEvent<
  [number, BigNumber] & { feeRateType: number; feeRate: BigNumber }
>;

export type ConditionalManagerChangedEvent = TypedEvent<
  [BigNumber, string] & { cmType: BigNumber; cmAddress: string }
>;

export type DexActivatedEvent = TypedEvent<
  [string] & { routerAddress: string }
>;

export type DexAdapterChangedEvent = TypedEvent<
  [string] & { newAdapterAddress: string }
>;

export type DexFrozenEvent = TypedEvent<[string] & { routerAddress: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PMXchangedEvent = TypedEvent<[string] & { pmx: string }>;

export class PrimexDNSV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimexDNSV2Interface;

  functions: {
    aavePool(overrides?: CallOverrides): Promise<[string]>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    additionalGasSpent(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    averageGasPerAction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        bucketAddress: string;
        currentStatus: number;
        delistingDeadline: BigNumber;
        adminDeadline: BigNumber;
      }
    >;

    cmTypeToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delistingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexAdapter(overrides?: CallOverrides): Promise<[string]>;

    dexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { routerAddress: string; isActive: boolean }
    >;

    feeRates(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minProtocolFee: BigNumber;
        maxProtocolFee: BigNumber;
      }
    >;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasPriceBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllDexes(overrides?: CallOverrides): Promise<[string[]]>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<[string]>;

    getL1BaseLengthForTradingOrderType(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getParamsForMinPositionSize(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getParamsForMinProtocolFee(
      _callingMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getPrimexDNSParams(
      _feeRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    initialize(
      _params: {
        registry: string;
        pmx: string;
        treasury: string;
        delistingDelay: BigNumberish;
        adminWithdrawalDelay: BigNumberish;
        feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
        averageGasPerActionParams: {
          tradingOrderType: BigNumberish;
          averageGasPerAction: BigNumberish;
        }[];
        maxProtocolFee: BigNumberish;
        liquidationGasAmount: BigNumberish;
        protocolFeeCoefficient: BigNumberish;
        additionalGasSpent: BigNumberish;
        pmxDiscountMultiplier: BigNumberish;
        gasPriceBuffer: BigNumberish;
        leverageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leverageTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationGasAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minFeeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxGasAmount: BigNumber;
        baseLength: BigNumber;
      }
    >;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    pmxDiscountMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeCoefficient(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdditionalGasSpent(
      _additionalGasSpent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAverageGasPerAction(
      _averageGasPerActionParams: {
        tradingOrderType: BigNumberish;
        averageGasPerAction: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDexAdapter(
      _newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasPriceBuffer(
      _gasPriceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLeverageTolerance(
      _leverageTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationGasAmount(
      _liquidationGasAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxProtocolFee(
      _maxProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinFeeRestrictions(
      _callingMethod: BigNumberish,
      _minFeeRestrictions: {
        maxGasAmount: BigNumberish;
        baseLength: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPmxDiscountMultiplier(
      _pmxDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeCoefficient(
      _protocolFeeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeRate(
      _feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testUpgrade(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  aavePool(overrides?: CallOverrides): Promise<string>;

  activateBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateDEX(
    _dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBucket(
    _newBucket: string,
    _pmxRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDEX(
    _name: string,
    _routerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  additionalGasSpent(overrides?: CallOverrides): Promise<BigNumber>;

  adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  averageGasPerAction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buckets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber] & {
      bucketAddress: string;
      currentStatus: number;
      delistingDeadline: BigNumber;
      adminDeadline: BigNumber;
    }
  >;

  cmTypeToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  deprecateBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexAdapter(overrides?: CallOverrides): Promise<string>;

  dexes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { routerAddress: string; isActive: boolean }>;

  feeRates(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeRestrictions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      minProtocolFee: BigNumber;
      maxProtocolFee: BigNumber;
    }
  >;

  freezeBucket(
    _bucket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeDEX(
    _dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasPriceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  getAllDexes(overrides?: CallOverrides): Promise<string[]>;

  getBucketAddress(_name: string, overrides?: CallOverrides): Promise<string>;

  getDexAddress(_name: string, overrides?: CallOverrides): Promise<string>;

  getL1BaseLengthForTradingOrderType(
    _tradingOrderType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParamsForMinPositionSize(
    _tradingOrderType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getParamsForMinProtocolFee(
    _callingMethod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getPrimexDNSParams(
    _feeRateType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

  initialize(
    _params: {
      registry: string;
      pmx: string;
      treasury: string;
      delistingDelay: BigNumberish;
      adminWithdrawalDelay: BigNumberish;
      feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
      averageGasPerActionParams: {
        tradingOrderType: BigNumberish;
        averageGasPerAction: BigNumberish;
      }[];
      maxProtocolFee: BigNumberish;
      liquidationGasAmount: BigNumberish;
      protocolFeeCoefficient: BigNumberish;
      additionalGasSpent: BigNumberish;
      pmxDiscountMultiplier: BigNumberish;
      gasPriceBuffer: BigNumberish;
      leverageTolerance: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leverageTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  minFeeRestrictions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { maxGasAmount: BigNumber; baseLength: BigNumber }
  >;

  pmx(overrides?: CallOverrides): Promise<string>;

  pmxDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  setAavePool(
    _aavePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdditionalGasSpent(
    _additionalGasSpent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAverageGasPerAction(
    _averageGasPerActionParams: {
      tradingOrderType: BigNumberish;
      averageGasPerAction: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConditionalManager(
    _cmType: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDexAdapter(
    _newAdapterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasPriceBuffer(
    _gasPriceBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLeverageTolerance(
    _leverageTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationGasAmount(
    _liquidationGasAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxProtocolFee(
    _maxProtocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinFeeRestrictions(
    _callingMethod: BigNumberish,
    _minFeeRestrictions: {
      maxGasAmount: BigNumberish;
      baseLength: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPMX(
    _pmx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPmxDiscountMultiplier(
    _pmxDiscountMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeCoefficient(
    _protocolFeeCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeRate(
    _feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValue(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testUpgrade(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aavePool(overrides?: CallOverrides): Promise<string>;

    activateBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    activateDEX(_dex: string, overrides?: CallOverrides): Promise<void>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    additionalGasSpent(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    averageGasPerAction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        bucketAddress: string;
        currentStatus: number;
        delistingDeadline: BigNumber;
        adminDeadline: BigNumber;
      }
    >;

    cmTypeToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    deprecateBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    dexAdapter(overrides?: CallOverrides): Promise<string>;

    dexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { routerAddress: string; isActive: boolean }
    >;

    feeRates(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minProtocolFee: BigNumber;
        maxProtocolFee: BigNumber;
      }
    >;

    freezeBucket(_bucket: string, overrides?: CallOverrides): Promise<void>;

    freezeDEX(_dex: string, overrides?: CallOverrides): Promise<void>;

    gasPriceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDexes(overrides?: CallOverrides): Promise<string[]>;

    getBucketAddress(_name: string, overrides?: CallOverrides): Promise<string>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<string>;

    getL1BaseLengthForTradingOrderType(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamsForMinPositionSize(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getParamsForMinProtocolFee(
      _callingMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getPrimexDNSParams(
      _feeRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    initialize(
      _params: {
        registry: string;
        pmx: string;
        treasury: string;
        delistingDelay: BigNumberish;
        adminWithdrawalDelay: BigNumberish;
        feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
        averageGasPerActionParams: {
          tradingOrderType: BigNumberish;
          averageGasPerAction: BigNumberish;
        }[];
        maxProtocolFee: BigNumberish;
        liquidationGasAmount: BigNumberish;
        protocolFeeCoefficient: BigNumberish;
        additionalGasSpent: BigNumberish;
        pmxDiscountMultiplier: BigNumberish;
        gasPriceBuffer: BigNumberish;
        leverageTolerance: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    leverageTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    minFeeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxGasAmount: BigNumber;
        baseLength: BigNumber;
      }
    >;

    pmx(overrides?: CallOverrides): Promise<string>;

    pmxDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    setAavePool(_aavePool: string, overrides?: CallOverrides): Promise<void>;

    setAdditionalGasSpent(
      _additionalGasSpent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAverageGasPerAction(
      _averageGasPerActionParams: {
        tradingOrderType: BigNumberish;
        averageGasPerAction: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexAdapter(
      _newAdapterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasPriceBuffer(
      _gasPriceBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeverageTolerance(
      _leverageTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationGasAmount(
      _liquidationGasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxProtocolFee(
      _maxProtocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinFeeRestrictions(
      _callingMethod: BigNumberish,
      _minFeeRestrictions: {
        maxGasAmount: BigNumberish;
        baseLength: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPMX(_pmx: string, overrides?: CallOverrides): Promise<void>;

    setPmxDiscountMultiplier(
      _pmxDiscountMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeCoefficient(
      _protocolFeeCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeRate(
      _feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setValue(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testUpgrade(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AavePoolChanged(address)"(
      aavePool?: string | null
    ): TypedEventFilter<[string], { aavePool: string }>;

    AavePoolChanged(
      aavePool?: string | null
    ): TypedEventFilter<[string], { aavePool: string }>;

    "AddNewBucket(tuple)"(
      newBucketData?: null
    ): TypedEventFilter<
      [
        [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        }
      ],
      {
        newBucketData: [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        };
      }
    >;

    AddNewBucket(
      newBucketData?: null
    ): TypedEventFilter<
      [
        [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        }
      ],
      {
        newBucketData: [string, number, BigNumber, BigNumber] & {
          bucketAddress: string;
          currentStatus: number;
          delistingDeadline: BigNumber;
          adminDeadline: BigNumber;
        };
      }
    >;

    "AddNewDex(tuple)"(
      newDexData?: null
    ): TypedEventFilter<
      [[string, boolean] & { routerAddress: string; isActive: boolean }],
      {
        newDexData: [string, boolean] & {
          routerAddress: string;
          isActive: boolean;
        };
      }
    >;

    AddNewDex(
      newDexData?: null
    ): TypedEventFilter<
      [[string, boolean] & { routerAddress: string; isActive: boolean }],
      {
        newDexData: [string, boolean] & {
          routerAddress: string;
          isActive: boolean;
        };
      }
    >;

    "BucketActivated(address)"(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    BucketActivated(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    "BucketDeprecated(address,uint256)"(
      bucketAddress?: null,
      delistingTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { bucketAddress: string; delistingTime: BigNumber }
    >;

    BucketDeprecated(
      bucketAddress?: null,
      delistingTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { bucketAddress: string; delistingTime: BigNumber }
    >;

    "BucketFrozen(address)"(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    BucketFrozen(
      bucketAddress?: string | null
    ): TypedEventFilter<[string], { bucketAddress: string }>;

    "ChangeAdditionalGasSpent(uint256)"(
      additionalGasSpent?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { additionalGasSpent: BigNumber }>;

    ChangeAdditionalGasSpent(
      additionalGasSpent?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { additionalGasSpent: BigNumber }>;

    "ChangeAverageGasPerAction(uint8,uint256)"(
      tradingOrderType?: BigNumberish | null,
      averageGasPerAction?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber],
      { tradingOrderType: number; averageGasPerAction: BigNumber }
    >;

    ChangeAverageGasPerAction(
      tradingOrderType?: BigNumberish | null,
      averageGasPerAction?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber],
      { tradingOrderType: number; averageGasPerAction: BigNumber }
    >;

    "ChangeGasPriceBuffer(uint256)"(
      gasPriceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { gasPriceBuffer: BigNumber }>;

    ChangeGasPriceBuffer(
      gasPriceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { gasPriceBuffer: BigNumber }>;

    "ChangeLeverageTolerance(uint256)"(
      leverageTolerance?: null
    ): TypedEventFilter<[BigNumber], { leverageTolerance: BigNumber }>;

    ChangeLeverageTolerance(
      leverageTolerance?: null
    ): TypedEventFilter<[BigNumber], { leverageTolerance: BigNumber }>;

    "ChangeLiquidationGasAmount(uint256)"(
      liquidationGasAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { liquidationGasAmount: BigNumber }>;

    ChangeLiquidationGasAmount(
      liquidationGasAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { liquidationGasAmount: BigNumber }>;

    "ChangeMaxProtocolFee(uint256)"(
      maxProtocolFee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maxProtocolFee: BigNumber }>;

    ChangeMaxProtocolFee(
      maxProtocolFee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maxProtocolFee: BigNumber }>;

    "ChangeMinFeeRestrictions(uint8,tuple)"(
      callingMethod?: BigNumberish | null,
      minFeeRestrictions?: null
    ): TypedEventFilter<
      [
        number,
        [BigNumber, BigNumber] & {
          maxGasAmount: BigNumber;
          baseLength: BigNumber;
        }
      ],
      {
        callingMethod: number;
        minFeeRestrictions: [BigNumber, BigNumber] & {
          maxGasAmount: BigNumber;
          baseLength: BigNumber;
        };
      }
    >;

    ChangeMinFeeRestrictions(
      callingMethod?: BigNumberish | null,
      minFeeRestrictions?: null
    ): TypedEventFilter<
      [
        number,
        [BigNumber, BigNumber] & {
          maxGasAmount: BigNumber;
          baseLength: BigNumber;
        }
      ],
      {
        callingMethod: number;
        minFeeRestrictions: [BigNumber, BigNumber] & {
          maxGasAmount: BigNumber;
          baseLength: BigNumber;
        };
      }
    >;

    "ChangePmxDiscountMultiplier(uint256)"(
      pmxDiscountMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { pmxDiscountMultiplier: BigNumber }>;

    ChangePmxDiscountMultiplier(
      pmxDiscountMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { pmxDiscountMultiplier: BigNumber }>;

    "ChangeProtocolFeeCoefficient(uint256)"(
      protocolFeeCoefficient?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { protocolFeeCoefficient: BigNumber }>;

    ChangeProtocolFeeCoefficient(
      protocolFeeCoefficient?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { protocolFeeCoefficient: BigNumber }>;

    "ChangeProtocolFeeRate(uint8,uint256)"(
      feeRateType?: BigNumberish | null,
      feeRate?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber],
      { feeRateType: number; feeRate: BigNumber }
    >;

    ChangeProtocolFeeRate(
      feeRateType?: BigNumberish | null,
      feeRate?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber],
      { feeRateType: number; feeRate: BigNumber }
    >;

    "ConditionalManagerChanged(uint256,address)"(
      cmType?: BigNumberish | null,
      cmAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { cmType: BigNumber; cmAddress: string }
    >;

    ConditionalManagerChanged(
      cmType?: BigNumberish | null,
      cmAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { cmType: BigNumber; cmAddress: string }
    >;

    "DexActivated(address)"(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    DexActivated(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    "DexAdapterChanged(address)"(
      newAdapterAddress?: string | null
    ): TypedEventFilter<[string], { newAdapterAddress: string }>;

    DexAdapterChanged(
      newAdapterAddress?: string | null
    ): TypedEventFilter<[string], { newAdapterAddress: string }>;

    "DexFrozen(address)"(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    DexFrozen(
      routerAddress?: string | null
    ): TypedEventFilter<[string], { routerAddress: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "PMXchanged(address)"(
      pmx?: string | null
    ): TypedEventFilter<[string], { pmx: string }>;

    PMXchanged(
      pmx?: string | null
    ): TypedEventFilter<[string], { pmx: string }>;
  };

  estimateGas: {
    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    additionalGasSpent(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    averageGasPerAction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buckets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cmTypeToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    dexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRates(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasPriceBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDexes(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexAddress(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getL1BaseLengthForTradingOrderType(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamsForMinPositionSize(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamsForMinProtocolFee(
      _callingMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimexDNSParams(
      _feeRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _params: {
        registry: string;
        pmx: string;
        treasury: string;
        delistingDelay: BigNumberish;
        adminWithdrawalDelay: BigNumberish;
        feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
        averageGasPerActionParams: {
          tradingOrderType: BigNumberish;
          averageGasPerAction: BigNumberish;
        }[];
        maxProtocolFee: BigNumberish;
        liquidationGasAmount: BigNumberish;
        protocolFeeCoefficient: BigNumberish;
        additionalGasSpent: BigNumberish;
        pmxDiscountMultiplier: BigNumberish;
        gasPriceBuffer: BigNumberish;
        leverageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leverageTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    minFeeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    pmxDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCoefficient(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdditionalGasSpent(
      _additionalGasSpent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAverageGasPerAction(
      _averageGasPerActionParams: {
        tradingOrderType: BigNumberish;
        averageGasPerAction: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDexAdapter(
      _newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasPriceBuffer(
      _gasPriceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLeverageTolerance(
      _leverageTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationGasAmount(
      _liquidationGasAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxProtocolFee(
      _maxProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinFeeRestrictions(
      _callingMethod: BigNumberish,
      _minFeeRestrictions: {
        maxGasAmount: BigNumberish;
        baseLength: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPmxDiscountMultiplier(
      _pmxDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeCoefficient(
      _protocolFeeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeRate(
      _feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBucket(
      _newBucket: string,
      _pmxRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDEX(
      _name: string,
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    additionalGasSpent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminWithdrawalDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    averageGasPerAction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buckets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cmTypeToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deprecateBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRates(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeBucket(
      _bucket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeDEX(
      _dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasPriceBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllDexes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBucketAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL1BaseLengthForTradingOrderType(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamsForMinPositionSize(
      _tradingOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamsForMinProtocolFee(
      _callingMethod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimexDNSParams(
      _feeRateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _params: {
        registry: string;
        pmx: string;
        treasury: string;
        delistingDelay: BigNumberish;
        adminWithdrawalDelay: BigNumberish;
        feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish }[];
        averageGasPerActionParams: {
          tradingOrderType: BigNumberish;
          averageGasPerAction: BigNumberish;
        }[];
        maxProtocolFee: BigNumberish;
        liquidationGasAmount: BigNumberish;
        protocolFeeCoefficient: BigNumberish;
        additionalGasSpent: BigNumberish;
        pmxDiscountMultiplier: BigNumberish;
        gasPriceBuffer: BigNumberish;
        leverageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leverageTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationGasAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minFeeRestrictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pmxDiscountMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeCoefficient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdditionalGasSpent(
      _additionalGasSpent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAverageGasPerAction(
      _averageGasPerActionParams: {
        tradingOrderType: BigNumberish;
        averageGasPerAction: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConditionalManager(
      _cmType: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDexAdapter(
      _newAdapterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasPriceBuffer(
      _gasPriceBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLeverageTolerance(
      _leverageTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationGasAmount(
      _liquidationGasAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxProtocolFee(
      _maxProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinFeeRestrictions(
      _callingMethod: BigNumberish,
      _minFeeRestrictions: {
        maxGasAmount: BigNumberish;
        baseLength: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPMX(
      _pmx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPmxDiscountMultiplier(
      _pmxDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeCoefficient(
      _protocolFeeCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeRate(
      _feeRateParams: { feeRateType: BigNumberish; feeRate: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
