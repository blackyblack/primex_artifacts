/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IConditionalOpeningManager,
  IConditionalOpeningManagerInterface,
} from "../IConditionalOpeningManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IBucketV3",
            name: "bucket",
            type: "address",
          },
          {
            internalType: "address",
            name: "positionAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "depositAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "protocolFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "leverage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "shouldOpenPosition",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedConditionsAt",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "extraParams",
            type: "bytes",
          },
        ],
        internalType: "struct LimitOrderLibrary.LimitOrder",
        name: "_order",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_additionalParams",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_exchangeRate",
        type: "uint256",
      },
    ],
    name: "canBeFilledAfterSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class IConditionalOpeningManager__factory {
  static readonly abi = _abi;
  static createInterface(): IConditionalOpeningManagerInterface {
    return new utils.Interface(_abi) as IConditionalOpeningManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IConditionalOpeningManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IConditionalOpeningManager;
  }
}
