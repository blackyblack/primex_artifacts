/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TraderBalanceVaultV2,
  TraderBalanceVaultV2Interface,
} from "../TraderBalanceVaultV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "availableBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockedBalance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "traders",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256",
          },
        ],
        internalType:
          "struct ITraderBalanceVault.BatchTopUpAvailableBalanceParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "batchTopUpAvailableBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "increaseLockedBalance",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_whiteBlackList",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testUpgrade",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "topUpAvailableBalance",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ITraderBalanceVault.UnlockAssetParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "unlockAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "depositReceiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "depositAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "enum ITraderBalanceVault.OpenType",
            name: "openType",
            type: "uint8",
          },
        ],
        internalType: "struct ITraderBalanceVault.LockAssetParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "useTraderAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "fromLocked",
        type: "bool",
      },
    ],
    name: "withdrawFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b6040516119b490816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561013a575b50361561001b57600080fd5b61002361173b565b60cb54604051630723eb0360e51b81523360048201526020918290829060249082906001600160a01b03165afa90811561012e57600091610101575b506100ef5761006c611869565b341515806100e7575b156100d5573360005260ca81526040600020907399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e9182600052815260406000206100b43482546117aa565b905560008051602061193f833981519152604051913483523392a360018055005b604051633abe877f60e11b8152600490fd5b506001610075565b6040516333df015b60e01b8152600490fd5b6101219150823d8411610127575b610119818361167e565b8101906116a0565b3861005f565b503d61010f565b6040513d6000823e3d90fd5b600090813560e01c90816301ffc9a714611599575080633f4ba83a146114885780633fa4f2451461146a578063441d68ca1461137557806347e7ef2414611167578063485cc95514610f065780635524107714610eeb5780635c975abb14610ec85780637b10399914610e9f5780638291732014610d465780638456cb5914610c6f5780639d6aed0b14610bbf578063a0fd10ad14610abe578063b1a11ae914610850578063c23f001f146107fa578063c268dd31146105f9578063f3fef3a3146104565763fb4ef4660361000f57346103825760a03660031901126103825760c954604051632474521560e21b815260008051602061195f83398151915260048201523360248201526001600160a01b03916020908290604490829086165afa90811561044b57839161042d575b501561041b57806102786117b7565b16825260ca602052604082208161028d6117cd565b166000526020526040600020608435600381101561041757801580156103f9575b600182036103a75750506102c56064358254611718565b90555b806102d16117e3565b166102da575080f35b7399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e906102f86117cd565b1614610395578073__$183737d697d7aa9b5df9988cbe11bc4947$__61031c6117cd565b6103246117e3565b90823b1561039057604051636336129b60e11b81526001600160a01b0391821660048201529116602482015260648035604483015290918391839182905af480156103855761037257505080f35b61037b90611654565b6103825780f35b80fd5b6040513d84823e3d90fd5b505050fd5b604051637414865560e01b8152600490fd5b156103c457506001016103bd6064358254611718565b90556102c8565b6002146103d2575b506102c8565b6103f16001606435926103e6848254611718565b8155019182546117aa565b9055386103cc565b825460643511156102ae575b60405163317cf4f160e01b8152600490fd5b8380fd5b60405163036be76f60e61b8152600490fd5b610445915060203d811161012757610119818361167e565b38610269565b6040513d85823e3d90fd5b5034610382576040366003190112610382576104706115ee565b60243561047b61173b565b60cb54604051630723eb0360e51b81523360048201526001600160a01b039360209290919083908290602490829089165afa9081156105ee5786916105d1575b506100ef5782156100d55733855260ca82526040852093811693846000528252604060002090815491828511610405576104f6858894611718565b90557399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e850361055557505061051f82336118ad565b6040519283528201527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60403392a26001805580f35b73__$183737d697d7aa9b5df9988cbe11bc4947$__803b156105cd57604051636336129b60e11b81526001600160a01b03929092166004830152336024830152604482018590528290829060649082905af48015610385576105b9575b505061051f565b6105c290611654565b6104175783386105b2565b8280fd5b6105e89150833d851161012757610119818361167e565b386104bb565b6040513d88823e3d90fd5b50346103825760a0366003190112610382576106136115ee565b61061b611609565b604435916001600160a01b0391908284168085036107f657606435936084359283151584036107f2578160c95416936040518095632474521560e21b825260008051602061195f833981519152600483015233602483015281604460209889935afa9081156107e7578a916107ca575b501561041b571561077057169081875260ca8352604087208188528352846001604089200154106104055786927399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e92845260ca8152604084209082855252600160408420016106ef868254611718565b90555b03610705575061070292506118ad565b80f35b919073__$183737d697d7aa9b5df9988cbe11bc4947$__90813b1561041757604051636336129b60e11b81526001600160a01b039586166004820152941660248501526044840191909152829060649082905af4801561038557610767575080f35b61070290611654565b169081875260ca8352604087208188528352846040882054106104055786927399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e92845260ca8152604084209082855252604083206107c3868254611718565b90556106f2565b6107e19150863d881161012757610119818361167e565b3861068b565b6040513d8c823e3d90fd5b8780fd5b8580fd5b503461038257604036600319011261038257604080916108186115ee565b610820611609565b9060018060a01b03809116835260ca60205283832091168252602052206001815491015482519182526020820152f35b503461038257600319602036820112610aba5767ffffffffffffffff60043511610aba57608090600435360301126103825760018060a01b0360c95416604051632474521560e21b815260008051602061195f833981519152600482015260208160448160249533878301525afa90811561044b578391610a9b575b501561041b57815b6064600435013581106108e5578280f35b610902816108fc846004350160043560040161180d565b90611843565b3561092c575b6000198114610919576001016108d4565b50634e487b7160e01b8252601160045290fd5b610946610941826108fc60048035018061180d565b6117f9565b6109546044600435016117f9565b61096b836108fc866004350160043560040161180d565b60c954604051632474521560e21b815260008051602061195f833981519152600482015233878201529135939190602090829060449082906001600160a01b03165afa908115610a90578791610a71575b501561041b576001600160a01b038216151580610a5f575b15610a4d576001600160a01b0382167399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e14610a35575b60018060a01b0316855260ca602052604085209060018060a01b03168552602052610a2e604085209182546117aa565b9055610908565b82156109fe5760405163fae8279160e01b8152600490fd5b60405163044aa57560e41b8152600490fd5b506001600160a01b03811615156109d4565b610a8a915060203d60201161012757610119818361167e565b386109bc565b6040513d89823e3d90fd5b610ab4915060203d60201161012757610119818361167e565b386108cc565b5080fd5b50346103825760803660031901126103825760c954604051632474521560e21b815260008051602061195f83398151915260048201523360248201526020916001600160a01b03919083908290604490829086165afa908115610bb4578491610b97575b501561041b576064359181610b356117b7565b16845260ca81526040842082610b496117cd565b168552815260016040852001610b60848254611718565b905581610b6b6117e3565b16845260ca81526040842091610b7f6117cd565b16845252610b92604083209182546117aa565b905580f35b610bae9150833d851161012757610119818361167e565b38610b22565b6040513d86823e3d90fd5b50346103825780600319360112610382576040516040810181811067ffffffffffffffff821117610c5b5760405260148152602091732a3930b232b92130b630b731b2ab30bab63a2b1960611b838301526040519283918183528351918281850152815b838110610c4457505060408094508284010152601f80199101168101030190f35b808601820151878201604001528694508101610c23565b634e487b7160e01b83526041600452602483fd5b503461038257806003193601126103825760c954604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa908115610385578291610d28575b501561041b57610cee611869565b600160ff1960655416176065557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b610d40915060203d811161012757610119818361167e565b38610ce0565b50610d503661161f565b60c954604051632474521560e21b815260008051602061195f83398151915260048201523360248201526001600160a01b039492936020929091908390829060449082908a165afa908115610a90578791610e82575b501561041b578416937399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e8503610e11575b83156100d55760008051602061193f83398151915292169283865260ca825260408620858752825260016040872001610e058282546117aa565b9055604051908152a380f35b60405163313ce56760e01b81528281600481895afa908115610a905760129160ff918991610e55575b50161115610dcb575b60405163b7c73c5d60e01b8152600490fd5b610e759150853d8711610e7b575b610e6d818361167e565b810190611791565b38610e3a565b503d610e63565b610e999150833d851161012757610119818361167e565b38610da6565b503461038257806003193601126103825760c9546040516001600160a01b039091168152602090f35b5034610382578060031936011261038257602060ff606554166040519015158152f35b50346103825760203660031901126103825760043560cc5580f35b503461038257604036600319011261038257610f206115ee565b610f28611609565b82549160ff8360081c16159081809261115a575b8015611143575b156110e75760ff19848116600117865593826110d6575b506040516301ffc9a760e01b808252637965db0b60e01b60048301526020946001600160a01b03938416939290918682602481885afa9182156110cb5789926110ac575b5081611050575b5015610a4d576bffffffffffffffffffffffff60a01b928360c954161760c955169060cb54161760cb5561101184549360ff8560081c1690610fe6826116b8565b610fef826116b8565b60655416606555610fff816116b8565b611008816116b8565b600180556116b8565b611019578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001916835560405160018152a138808280f35b604051908152633df6cef760e01b6004820152905085816024818587165afa9081156110a1578891611084575b5038610fa5565b61109b9150863d881161012757610119818361167e565b3861107d565b6040513d8a823e3d90fd5b6110c4919250873d891161012757610119818361167e565b9038610f9e565b6040513d8b823e3d90fd5b61ffff191661010117855538610f5a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f435750600160ff851614610f43565b50600160ff851610610f3c565b5060403660031901126103825761117c6115ee565b60243561118761173b565b60cb54604051630723eb0360e51b81523360048201526001600160a01b039260209290919083908290602490829088165afa9081156105ee578691611358575b506100ef576111d4611869565b80928416937399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e85146000146112575750909150341515908161124e575b50156100d55760008051602061193f83398151915234915b33855260ca81526040852084865281526040852061123c8482546117aa565b90556040519283523392a36001805580f35b90501538611205565b34158061134f575b156100d55760405163313ce56760e01b81528381600481895afa908115610a905760129160ff918991611332575b501611610e435760405163c37f7f7f60e01b81526001600160a01b039190911660048201523360248201526044810191909152818160648173__$183737d697d7aa9b5df9988cbe11bc4947$__5af48015611327576112fd575b5060008051602061193f8339815191529061121d565b8190813d8311611320575b611312818361167e565b8101031261041757386112e7565b503d611308565b6040513d87823e3d90fd5b6113499150863d8811610e7b57610e6d818361167e565b3861128d565b5081151561125f565b61136f9150833d851161012757610119818361167e565b386111c7565b5061137f3661161f565b60c954604051632474521560e21b815260008051602061195f83398151915260048201523360248201529193926001600160a01b039290916020908290604490829087165afa9081156105ee57869161144c575b501561041b5781169182151580611441575b15610a4d577399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e8314611427575b16835260ca60205260408320908352602052610b92604083209182546117aa565b833410156114065760405163fae8279160e01b8152600490fd5b5081811615156113e5565b611464915060203d811161012757610119818361167e565b386113d3565b5034610382578060031936011261038257602060cc54604051908152f35b503461038257806003193601126103825760c954604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa90811561038557829161157b575b501561041b5760655460ff81161561153f5760ff19166065557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b611593915060203d811161012757610119818361167e565b386114f9565b905034610aba576020366003190112610aba5760043563ffffffff60e01b81168091036105cd57602092506301ffc9a760e01b81149081156115dd575b5015158152f35b6312b3ed2b60e01b149050386115d6565b600435906001600160a01b038216820361160457565b600080fd5b602435906001600160a01b038216820361160457565b6060906003190112611604576001600160a01b0390600435828116810361160457916024359081168103611604579060443590565b67ffffffffffffffff811161166857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761166857604052565b90816020910312611604575180151581036116045790565b156116bf57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9190820391821161172557565b634e487b7160e01b600052601160045260246000fd5b60026001541461174c576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b90816020910312611604575160ff811681036116045790565b9190820180921161172557565b6004356001600160a01b03811681036116045790565b6044356001600160a01b03811681036116045790565b6024356001600160a01b03811681036116045790565b356001600160a01b03811681036116045790565b903590601e1981360301821215611604570180359067ffffffffffffffff821161160457602001918160051b3603831361160457565b91908110156118535760051b0190565b634e487b7160e01b600052603260045260246000fd5b60ff6065541661187557565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b60405167ffffffffffffffff919060208101838111828210176116685760405260008080958194828095525af1913d15611937573d9182116119235760405191611901601f8201601f19166020018461167e565b825260203d92013e5b1561191157565b60405163c71509d160e01b8152600490fd5b634e487b7160e01b81526041600452602490fd5b505061190a56fe5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62e965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf365a264697066735822122037ae92dad1d36c4f85e26f1f51ae834ba5a5542b2c33bec89b8e2ebd38cff65764736f6c63430008120033";

type TraderBalanceVaultV2ConstructorParams =
  | [
      linkLibraryAddresses: TraderBalanceVaultV2LibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TraderBalanceVaultV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TraderBalanceVaultV2__factory extends ContractFactory {
  constructor(...args: TraderBalanceVaultV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        TraderBalanceVaultV2__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: TraderBalanceVaultV2LibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$183737d697d7aa9b5df9988cbe11bc4947\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TraderBalanceVaultV2> {
    return super.deploy(overrides || {}) as Promise<TraderBalanceVaultV2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TraderBalanceVaultV2 {
    return super.attach(address) as TraderBalanceVaultV2;
  }
  connect(signer: Signer): TraderBalanceVaultV2__factory {
    return super.connect(signer) as TraderBalanceVaultV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TraderBalanceVaultV2Interface {
    return new utils.Interface(_abi) as TraderBalanceVaultV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TraderBalanceVaultV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TraderBalanceVaultV2;
  }
}

export interface TraderBalanceVaultV2LibraryAddresses {
  ["contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"]: string;
}
