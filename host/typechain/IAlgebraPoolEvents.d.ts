/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAlgebraPoolEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
    "CommunityFee(uint8,uint8)": EventFragment;
    "Fee(uint16)": EventFragment;
    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Incentive(address)": EventFragment;
    "Initialize(uint160,int24)": EventFragment;
    "LiquidityCooldown(uint32)": EventFragment;
    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Incentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    bottomTick: number;
    topTick: number;
    liquidityAmount: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type CollectEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber] & {
    owner: string;
    recipient: string;
    bottomTick: number;
    topTick: number;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type CommunityFeeEvent = TypedEvent<
  [number, number] & { communityFee0New: number; communityFee1New: number }
>;

export type FeeEvent = TypedEvent<[number] & { fee: number }>;

export type FlashEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
    paid0: BigNumber;
    paid1: BigNumber;
  }
>;

export type IncentiveEvent = TypedEvent<
  [string] & { virtualPoolAddress: string }
>;

export type InitializeEvent = TypedEvent<
  [BigNumber, number] & { price: BigNumber; tick: number }
>;

export type LiquidityCooldownEvent = TypedEvent<
  [number] & { liquidityCooldown: number }
>;

export type MintEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    owner: string;
    bottomTick: number;
    topTick: number;
    liquidityAmount: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
    sender: string;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
    price: BigNumber;
    liquidity: BigNumber;
    tick: number;
  }
>;

export class IAlgebraPoolEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAlgebraPoolEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Burn(address,int24,int24,uint128,uint256,uint256)"(
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        bottomTick: number;
        topTick: number;
        liquidityAmount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Burn(
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        bottomTick: number;
        topTick: number;
        liquidityAmount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Collect(address,address,int24,int24,uint128,uint128)"(
      owner?: string | null,
      recipient?: null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber],
      {
        owner: string;
        recipient: string;
        bottomTick: number;
        topTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Collect(
      owner?: string | null,
      recipient?: null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber],
      {
        owner: string;
        recipient: string;
        bottomTick: number;
        topTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "CommunityFee(uint8,uint8)"(
      communityFee0New?: null,
      communityFee1New?: null
    ): TypedEventFilter<
      [number, number],
      { communityFee0New: number; communityFee1New: number }
    >;

    CommunityFee(
      communityFee0New?: null,
      communityFee1New?: null
    ): TypedEventFilter<
      [number, number],
      { communityFee0New: number; communityFee1New: number }
    >;

    "Fee(uint16)"(fee?: null): TypedEventFilter<[number], { fee: number }>;

    Fee(fee?: null): TypedEventFilter<[number], { fee: number }>;

    "Flash(address,address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        paid0: BigNumber;
        paid1: BigNumber;
      }
    >;

    Flash(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        paid0: BigNumber;
        paid1: BigNumber;
      }
    >;

    "Incentive(address)"(
      virtualPoolAddress?: string | null
    ): TypedEventFilter<[string], { virtualPoolAddress: string }>;

    Incentive(
      virtualPoolAddress?: string | null
    ): TypedEventFilter<[string], { virtualPoolAddress: string }>;

    "Initialize(uint160,int24)"(
      price?: null,
      tick?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; tick: number }
    >;

    Initialize(
      price?: null,
      tick?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; tick: number }
    >;

    "LiquidityCooldown(uint32)"(
      liquidityCooldown?: null
    ): TypedEventFilter<[number], { liquidityCooldown: number }>;

    LiquidityCooldown(
      liquidityCooldown?: null
    ): TypedEventFilter<[number], { liquidityCooldown: number }>;

    "Mint(address,address,int24,int24,uint128,uint256,uint256)"(
      sender?: null,
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        owner: string;
        bottomTick: number;
        topTick: number;
        liquidityAmount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Mint(
      sender?: null,
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        owner: string;
        bottomTick: number;
        topTick: number;
        liquidityAmount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Swap(address,address,int256,int256,uint160,uint128,int24)"(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tick: number;
      }
    >;

    Swap(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tick: number;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
