/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LimitOrderManagerV2Interface extends ethers.utils.Interface {
  functions: {
    "bucketOrderIds(address,uint256)": FunctionFragment;
    "bucketOrderIndexes(uint256)": FunctionFragment;
    "cancelExpiredLimitOrders(uint256[])": FunctionFragment;
    "cancelLimitOrder(uint256)": FunctionFragment;
    "closeConditions(uint256,uint256)": FunctionFragment;
    "createLimitOrder((string,uint256,address,address,uint256,bool,uint256,bool,tuple[],tuple[],bool,bytes,bytes[][],uint256[]))": FunctionFragment;
    "getBucketOrders(address)": FunctionFragment;
    "getBucketOrdersLength(address)": FunctionFragment;
    "getCloseConditions(uint256)": FunctionFragment;
    "getOpenConditions(uint256)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getOrderByIndex(uint256)": FunctionFragment;
    "getOrdersLength()": FunctionFragment;
    "getTraderOrders(address)": FunctionFragment;
    "getTraderOrdersLength(address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "openConditions(uint256,uint256)": FunctionFragment;
    "openPositionByOrder((uint256,uint256,bytes,tuple[],tuple[],address,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[],uint256))": FunctionFragment;
    "orderIndexes(uint256)": FunctionFragment;
    "ordersId()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pm()": FunctionFragment;
    "primexDNS()": FunctionFragment;
    "registry()": FunctionFragment;
    "setSwapManager(address)": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapManager()": FunctionFragment;
    "testUpgrade()": FunctionFragment;
    "traderBalanceVault()": FunctionFragment;
    "traderOrderIds(address,uint256)": FunctionFragment;
    "traderOrderIndexes(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOrder((uint256,uint256,uint256,bool,bool,bytes,bytes[][],uint256[]))": FunctionFragment;
    "updateOrderConditions((uint256,tuple[],tuple[]))": FunctionFragment;
    "value()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bucketOrderIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketOrderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpiredLimitOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeConditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLimitOrder",
    values: [
      {
        bucket: string;
        depositAmount: BigNumberish;
        depositAsset: string;
        positionAsset: string;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        isProtocolFeeInPmx: boolean;
        nativeDepositAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketOrders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketOrdersLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderOrders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderOrdersLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openConditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionByOrder",
    values: [
      {
        orderId: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        keeper: string;
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        borrowedAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ordersId", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pm", values?: undefined): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSwapManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderOrderIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traderOrderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [
      {
        orderId: BigNumberish;
        depositAmount: BigNumberish;
        leverage: BigNumberish;
        isProtocolFeeInPmx: boolean;
        takeDepositFromWallet: boolean;
        nativeDepositOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderConditions",
    values: [
      {
        orderId: BigNumberish;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bucketOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketOrderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpiredLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ordersId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderOrderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {
    "ChangeSwapManager(address)": EventFragment;
    "CloseLimitOrder(uint256,address,address,uint8,uint256,string,address,address,uint256,address,uint256)": EventFragment;
    "CreateLimitOrder(uint256,address,tuple,tuple[],tuple[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateOrder(uint256,address,uint256,uint256,address)": EventFragment;
    "UpdateOrderConditions(uint256,address,tuple[],tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeSwapManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseLimitOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateLimitOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOrderConditions"): EventFragment;
}

export type ChangeSwapManagerEvent = TypedEvent<
  [string] & { swapManager: string }
>;

export type CloseLimitOrderEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    orderId: BigNumber;
    trader: string;
    closedBy: string;
    reason: number;
    positionId: BigNumber;
    bucket: string;
    borrowedAsset: string;
    positionAsset: string;
    leverage: BigNumber;
    depositAsset: string;
    depositAmount: BigNumber;
  }
>;

export type CreateLimitOrderEvent = TypedEvent<
  [
    BigNumber,
    string,
    [
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    },
    ([BigNumber, string] & { managerType: BigNumber; params: string })[],
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    orderId: BigNumber;
    trader: string;
    order: [
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    };
    openConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpdateOrderEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string] & {
    orderId: BigNumber;
    trader: string;
    depositAmount: BigNumber;
    leverage: BigNumber;
    feeToken: string;
  }
>;

export type UpdateOrderConditionsEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[],
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    orderId: BigNumber;
    trader: string;
    openConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export class LimitOrderManagerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimitOrderManagerV2Interface;

  functions: {
    bucketOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bucketOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelExpiredLimitOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelLimitOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { managerType: BigNumber; params: string }
    >;

    createLimitOrder(
      _params: {
        bucket: string;
        depositAmount: BigNumberish;
        depositAsset: string;
        positionAsset: string;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        isProtocolFeeInPmx: boolean;
        nativeDepositAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBucketOrders(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        })[]
      ]
    >;

    getBucketOrdersLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCloseConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, string] & { managerType: BigNumber; params: string })[]]
    >;

    getOpenConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, string] & { managerType: BigNumber; params: string })[]]
    >;

    getOrder(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        }
      ]
    >;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        }
      ]
    >;

    getOrdersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTraderOrders(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        })[]
      ]
    >;

    getTraderOrdersLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _pm: string,
      _traderBalanceVault: string,
      _swapManager: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { managerType: BigNumber; params: string }
    >;

    openPositionByOrder(
      _params: {
        orderId: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        keeper: string;
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        borrowedAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    orderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ordersId(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pm(overrides?: CallOverrides): Promise<[string]>;

    primexDNS(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setSwapManager(
      _swapManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapManager(overrides?: CallOverrides): Promise<[string]>;

    testUpgrade(overrides?: CallOverrides): Promise<[string]>;

    traderBalanceVault(overrides?: CallOverrides): Promise<[string]>;

    traderOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    traderOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrder(
      _params: {
        orderId: BigNumberish;
        depositAmount: BigNumberish;
        leverage: BigNumberish;
        isProtocolFeeInPmx: boolean;
        takeDepositFromWallet: boolean;
        nativeDepositOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrderConditions(
      _params: {
        orderId: BigNumberish;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bucketOrderIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bucketOrderIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelExpiredLimitOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelLimitOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeConditions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { managerType: BigNumber; params: string }>;

  createLimitOrder(
    _params: {
      bucket: string;
      depositAmount: BigNumberish;
      depositAsset: string;
      positionAsset: string;
      deadline: BigNumberish;
      takeDepositFromWallet: boolean;
      leverage: BigNumberish;
      shouldOpenPosition: boolean;
      openConditions: { managerType: BigNumberish; params: BytesLike }[];
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      isProtocolFeeInPmx: boolean;
      nativeDepositAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBucketOrders(
    _bucket: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    })[]
  >;

  getBucketOrdersLength(
    _bucket: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCloseConditions(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  >;

  getOpenConditions(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  >;

  getOrder(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    }
  >;

  getOrderByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    }
  >;

  getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getTraderOrders(
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string
    ] & {
      bucket: string;
      positionAsset: string;
      depositAsset: string;
      depositAmount: BigNumber;
      feeToken: string;
      protocolFee: BigNumber;
      trader: string;
      deadline: BigNumber;
      id: BigNumber;
      leverage: BigNumber;
      shouldOpenPosition: boolean;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    })[]
  >;

  getTraderOrdersLength(
    _trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _registry: string,
    _primexDNS: string,
    _pm: string,
    _traderBalanceVault: string,
    _swapManager: string,
    _whiteBlackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openConditions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { managerType: BigNumber; params: string }>;

  openPositionByOrder(
    _params: {
      orderId: BigNumberish;
      conditionIndex: BigNumberish;
      comAdditionalParams: BytesLike;
      firstAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      depositInThirdAssetMegaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      keeper: string;
      firstAssetOracleData: BytesLike;
      thirdAssetOracleData: BytesLike;
      depositSoldAssetOracleData: BytesLike;
      nativePmxOracleData: BytesLike;
      positionNativeAssetOracleData: BytesLike;
      nativePositionAssetOracleData: BytesLike;
      pmxPositionAssetOracleData: BytesLike;
      positionUsdOracleData: BytesLike;
      nativeSoldAssetOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
      borrowedAmount: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  orderIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ordersId(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pm(overrides?: CallOverrides): Promise<string>;

  primexDNS(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setSwapManager(
    _swapManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValue(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapManager(overrides?: CallOverrides): Promise<string>;

  testUpgrade(overrides?: CallOverrides): Promise<string>;

  traderBalanceVault(overrides?: CallOverrides): Promise<string>;

  traderOrderIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  traderOrderIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrder(
    _params: {
      orderId: BigNumberish;
      depositAmount: BigNumberish;
      leverage: BigNumberish;
      isProtocolFeeInPmx: boolean;
      takeDepositFromWallet: boolean;
      nativeDepositOracleData: BytesLike;
      pullOracleData: BytesLike[][];
      pullOracleTypes: BigNumberish[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrderConditions(
    _params: {
      orderId: BigNumberish;
      openConditions: { managerType: BigNumberish; params: BytesLike }[];
      closeConditions: { managerType: BigNumberish; params: BytesLike }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bucketOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelExpiredLimitOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLimitOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { managerType: BigNumber; params: string }
    >;

    createLimitOrder(
      _params: {
        bucket: string;
        depositAmount: BigNumberish;
        depositAsset: string;
        positionAsset: string;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        isProtocolFeeInPmx: boolean;
        nativeDepositAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getBucketOrders(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumber;
        feeToken: string;
        protocolFee: BigNumber;
        trader: string;
        deadline: BigNumber;
        id: BigNumber;
        leverage: BigNumber;
        shouldOpenPosition: boolean;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      })[]
    >;

    getBucketOrdersLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string] & { managerType: BigNumber; params: string })[]
    >;

    getOpenConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string] & { managerType: BigNumber; params: string })[]
    >;

    getOrder(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumber;
        feeToken: string;
        protocolFee: BigNumber;
        trader: string;
        deadline: BigNumber;
        id: BigNumber;
        leverage: BigNumber;
        shouldOpenPosition: boolean;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      }
    >;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumber;
        feeToken: string;
        protocolFee: BigNumber;
        trader: string;
        deadline: BigNumber;
        id: BigNumber;
        leverage: BigNumber;
        shouldOpenPosition: boolean;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      }
    >;

    getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderOrders(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string
      ] & {
        bucket: string;
        positionAsset: string;
        depositAsset: string;
        depositAmount: BigNumber;
        feeToken: string;
        protocolFee: BigNumber;
        trader: string;
        deadline: BigNumber;
        id: BigNumber;
        leverage: BigNumber;
        shouldOpenPosition: boolean;
        createdAt: BigNumber;
        updatedConditionsAt: BigNumber;
        extraParams: string;
      })[]
    >;

    getTraderOrdersLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _pm: string,
      _traderBalanceVault: string,
      _swapManager: string,
      _whiteBlackList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { managerType: BigNumber; params: string }
    >;

    openPositionByOrder(
      _params: {
        orderId: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        keeper: string;
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        borrowedAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    orderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersId(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pm(overrides?: CallOverrides): Promise<string>;

    primexDNS(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setSwapManager(
      _swapManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValue(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapManager(overrides?: CallOverrides): Promise<string>;

    testUpgrade(overrides?: CallOverrides): Promise<string>;

    traderBalanceVault(overrides?: CallOverrides): Promise<string>;

    traderOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traderOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOrder(
      _params: {
        orderId: BigNumberish;
        depositAmount: BigNumberish;
        leverage: BigNumberish;
        isProtocolFeeInPmx: boolean;
        takeDepositFromWallet: boolean;
        nativeDepositOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrderConditions(
      _params: {
        orderId: BigNumberish;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChangeSwapManager(address)"(
      swapManager?: null
    ): TypedEventFilter<[string], { swapManager: string }>;

    ChangeSwapManager(
      swapManager?: null
    ): TypedEventFilter<[string], { swapManager: string }>;

    "CloseLimitOrder(uint256,address,address,uint8,uint256,string,address,address,uint256,address,uint256)"(
      orderId?: BigNumberish | null,
      trader?: string | null,
      closedBy?: string | null,
      reason?: null,
      positionId?: null,
      bucket?: null,
      borrowedAsset?: null,
      positionAsset?: null,
      leverage?: null,
      depositAsset?: null,
      depositAmount?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ],
      {
        orderId: BigNumber;
        trader: string;
        closedBy: string;
        reason: number;
        positionId: BigNumber;
        bucket: string;
        borrowedAsset: string;
        positionAsset: string;
        leverage: BigNumber;
        depositAsset: string;
        depositAmount: BigNumber;
      }
    >;

    CloseLimitOrder(
      orderId?: BigNumberish | null,
      trader?: string | null,
      closedBy?: string | null,
      reason?: null,
      positionId?: null,
      bucket?: null,
      borrowedAsset?: null,
      positionAsset?: null,
      leverage?: null,
      depositAsset?: null,
      depositAmount?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ],
      {
        orderId: BigNumber;
        trader: string;
        closedBy: string;
        reason: number;
        positionId: BigNumber;
        bucket: string;
        borrowedAsset: string;
        positionAsset: string;
        leverage: BigNumber;
        depositAsset: string;
        depositAmount: BigNumber;
      }
    >;

    "CreateLimitOrder(uint256,address,tuple,tuple[],tuple[])"(
      orderId?: BigNumberish | null,
      trader?: string | null,
      order?: null,
      openConditions?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        ([BigNumber, string] & { managerType: BigNumber; params: string })[],
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        orderId: BigNumber;
        trader: string;
        order: [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        openConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    CreateLimitOrder(
      orderId?: BigNumberish | null,
      trader?: string | null,
      order?: null,
      openConditions?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        ([BigNumber, string] & { managerType: BigNumber; params: string })[],
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        orderId: BigNumber;
        trader: string;
        order: [
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string
        ] & {
          bucket: string;
          positionAsset: string;
          depositAsset: string;
          depositAmount: BigNumber;
          feeToken: string;
          protocolFee: BigNumber;
          trader: string;
          deadline: BigNumber;
          id: BigNumber;
          leverage: BigNumber;
          shouldOpenPosition: boolean;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        openConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UpdateOrder(uint256,address,uint256,uint256,address)"(
      orderId?: BigNumberish | null,
      trader?: string | null,
      depositAmount?: null,
      leverage?: null,
      feeToken?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        orderId: BigNumber;
        trader: string;
        depositAmount: BigNumber;
        leverage: BigNumber;
        feeToken: string;
      }
    >;

    UpdateOrder(
      orderId?: BigNumberish | null,
      trader?: string | null,
      depositAmount?: null,
      leverage?: null,
      feeToken?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        orderId: BigNumber;
        trader: string;
        depositAmount: BigNumber;
        leverage: BigNumber;
        feeToken: string;
      }
    >;

    "UpdateOrderConditions(uint256,address,tuple[],tuple[])"(
      orderId?: BigNumberish | null,
      trader?: string | null,
      openConditions?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[],
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        orderId: BigNumber;
        trader: string;
        openConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    UpdateOrderConditions(
      orderId?: BigNumberish | null,
      trader?: string | null,
      openConditions?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[],
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        orderId: BigNumber;
        trader: string;
        openConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;
  };

  estimateGas: {
    bucketOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelExpiredLimitOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelLimitOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLimitOrder(
      _params: {
        bucket: string;
        depositAmount: BigNumberish;
        depositAsset: string;
        positionAsset: string;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        isProtocolFeeInPmx: boolean;
        nativeDepositAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBucketOrders(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBucketOrdersLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderOrders(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderOrdersLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _pm: string,
      _traderBalanceVault: string,
      _swapManager: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionByOrder(
      _params: {
        orderId: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        keeper: string;
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        borrowedAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    orderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersId(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pm(overrides?: CallOverrides): Promise<BigNumber>;

    primexDNS(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setSwapManager(
      _swapManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapManager(overrides?: CallOverrides): Promise<BigNumber>;

    testUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    traderBalanceVault(overrides?: CallOverrides): Promise<BigNumber>;

    traderOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traderOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrder(
      _params: {
        orderId: BigNumberish;
        depositAmount: BigNumberish;
        leverage: BigNumberish;
        isProtocolFeeInPmx: boolean;
        takeDepositFromWallet: boolean;
        nativeDepositOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrderConditions(
      _params: {
        orderId: BigNumberish;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bucketOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelExpiredLimitOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLimitOrder(
      _params: {
        bucket: string;
        depositAmount: BigNumberish;
        depositAsset: string;
        positionAsset: string;
        deadline: BigNumberish;
        takeDepositFromWallet: boolean;
        leverage: BigNumberish;
        shouldOpenPosition: boolean;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
        isProtocolFeeInPmx: boolean;
        nativeDepositAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBucketOrders(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketOrdersLength(
      _bucket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloseConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenConditions(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrdersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTraderOrders(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderOrdersLength(
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _primexDNS: string,
      _pm: string,
      _traderBalanceVault: string,
      _swapManager: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openConditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionByOrder(
      _params: {
        orderId: BigNumberish;
        conditionIndex: BigNumberish;
        comAdditionalParams: BytesLike;
        firstAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        depositInThirdAssetMegaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        keeper: string;
        firstAssetOracleData: BytesLike;
        thirdAssetOracleData: BytesLike;
        depositSoldAssetOracleData: BytesLike;
        nativePmxOracleData: BytesLike;
        positionNativeAssetOracleData: BytesLike;
        nativePositionAssetOracleData: BytesLike;
        pmxPositionAssetOracleData: BytesLike;
        positionUsdOracleData: BytesLike;
        nativeSoldAssetOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
        borrowedAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    orderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primexDNS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSwapManager(
      _swapManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traderBalanceVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderOrderIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderOrderIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrder(
      _params: {
        orderId: BigNumberish;
        depositAmount: BigNumberish;
        leverage: BigNumberish;
        isProtocolFeeInPmx: boolean;
        takeDepositFromWallet: boolean;
        nativeDepositOracleData: BytesLike;
        pullOracleData: BytesLike[][];
        pullOracleTypes: BigNumberish[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderConditions(
      _params: {
        orderId: BigNumberish;
        openConditions: { managerType: BigNumberish; params: BytesLike }[];
        closeConditions: { managerType: BigNumberish; params: BytesLike }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
