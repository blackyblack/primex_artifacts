/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PositionLibraryInterface extends ethers.utils.Interface {
  functions: {
    "decodeFeeTokenAddress(bytes)": FunctionFragment;
    "getDebt((uint256,uint256,IBucketV3,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "health(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeFeeTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [
      {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeFeeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;

  events: {
    "ClosePosition(uint256,address,address,address,address,address,uint256,int256,uint256,uint256,uint8)": EventFragment;
    "PaidProtocolFee(uint256,address,address,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidProtocolFee"): EventFragment;
}

export type ClosePositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    positionId: BigNumber;
    trader: string;
    closedBy: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: BigNumber;
    profit: BigNumber;
    positionDebt: BigNumber;
    amountOut: BigNumber;
    reason: number;
  }
>;

export type PaidProtocolFeeEvent = TypedEvent<
  [BigNumber, string, string, number, BigNumber, BigNumber] & {
    positionId: BigNumber;
    trader: string;
    paymentAsset: string;
    feeRateType: number;
    feeInPaymentAsset: BigNumber;
    feeInPmx: BigNumber;
  }
>;

export class PositionLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionLibraryInterface;

  functions: {
    decodeFeeTokenAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDebt(
      position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    health(
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  decodeFeeTokenAddress(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getDebt(
    position: {
      id: BigNumberish;
      scaledDebtAmount: BigNumberish;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumberish;
      positionAsset: string;
      positionAmount: BigNumberish;
      trader: string;
      openBorrowIndex: BigNumberish;
      createdAt: BigNumberish;
      updatedConditionsAt: BigNumberish;
      extraParams: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  health(
    positionAmountInBorrowedAsset: BigNumberish,
    pairPriceDrop: BigNumberish,
    securityBuffer: BigNumberish,
    oracleTolerableLimit: BigNumberish,
    positionDebt: BigNumberish,
    feeBuffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    decodeFeeTokenAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getDebt(
      position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClosePosition(uint256,address,address,address,address,address,uint256,int256,uint256,uint256,uint8)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closedBy?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null,
      reason?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ],
      {
        positionId: BigNumber;
        trader: string;
        closedBy: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
        reason: number;
      }
    >;

    ClosePosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closedBy?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null,
      reason?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ],
      {
        positionId: BigNumber;
        trader: string;
        closedBy: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
        reason: number;
      }
    >;

    "PaidProtocolFee(uint256,address,address,uint8,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      paymentAsset?: null,
      feeRateType?: BigNumberish | null,
      feeInPaymentAsset?: null,
      feeInPmx?: null
    ): TypedEventFilter<
      [BigNumber, string, string, number, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        paymentAsset: string;
        feeRateType: number;
        feeInPaymentAsset: BigNumber;
        feeInPmx: BigNumber;
      }
    >;

    PaidProtocolFee(
      positionId?: BigNumberish | null,
      trader?: string | null,
      paymentAsset?: null,
      feeRateType?: BigNumberish | null,
      feeInPaymentAsset?: null,
      feeInPmx?: null
    ): TypedEventFilter<
      [BigNumber, string, string, number, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        paymentAsset: string;
        feeRateType: number;
        feeInPaymentAsset: BigNumber;
        feeInPmx: BigNumber;
      }
    >;
  };

  estimateGas: {
    decodeFeeTokenAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeFeeTokenAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      position: {
        id: BigNumberish;
        scaledDebtAmount: BigNumberish;
        bucket: string;
        soldAsset: string;
        depositAmountInSoldAsset: BigNumberish;
        positionAsset: string;
        positionAmount: BigNumberish;
        trader: string;
        openBorrowIndex: BigNumberish;
        createdAt: BigNumberish;
        updatedConditionsAt: BigNumberish;
        extraParams: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    health(
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
