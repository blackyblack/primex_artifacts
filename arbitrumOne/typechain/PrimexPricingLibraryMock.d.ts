/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrimexPricingLibraryMockInterface extends ethers.utils.Interface {
  functions: {
    "getDepositAmountInBorrowed((address,address,uint256,tuple[]),bool,address,address,bytes)": FunctionFragment;
    "getLiquidationPrice(address,address,uint256,uint256,address)": FunctionFragment;
    "getLiquidationPriceByOrder(address,address,uint256,uint256)": FunctionFragment;
    "getOracleAmountsOut(address,address,uint256,address,bytes)": FunctionFragment;
    "megaSwap((address,address,uint256,tuple[],address,uint256),uint256,address,address,bool,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDepositAmountInBorrowed",
    values: [
      {
        tokenA: string;
        tokenB: string;
        amount: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      },
      boolean,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPriceByOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAmountsOut",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "megaSwap",
    values: [
      {
        tokenA: string;
        tokenB: string;
        amountTokenA: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        receiver: string;
        deadline: BigNumberish;
      },
      BigNumberish,
      string,
      string,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDepositAmountInBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPriceByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "megaSwap", data: BytesLike): Result;

  events: {};
}

export class PrimexPricingLibraryMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimexPricingLibraryMockInterface;

  functions: {
    getDepositAmountInBorrowed(
      _params: {
        tokenA: string;
        tokenB: string;
        amount: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      },
      _isThirdAsset: boolean,
      _dexAdapter: string,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidationPriceByOrder(
      _bucket: string,
      _positionAsset: string,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracleAmountsOut(
      _tokenA: string,
      _tokenB: string,
      _amountAssetA: BigNumberish,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    megaSwap(
      _params: {
        tokenA: string;
        tokenB: string;
        amountTokenA: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        receiver: string;
        deadline: BigNumberish;
      },
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: string,
      _priceOracle: string,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDepositAmountInBorrowed(
    _params: {
      tokenA: string;
      tokenB: string;
      amount: BigNumberish;
      megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
    },
    _isThirdAsset: boolean,
    _dexAdapter: string,
    _priceOracle: string,
    _oracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLiquidationPrice(
    _bucket: string,
    _positionAsset: string,
    _positionAmount: BigNumberish,
    _positionDebt: BigNumberish,
    _primexDNS: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidationPriceByOrder(
    _bucket: string,
    _positionAsset: string,
    _limitPrice: BigNumberish,
    _leverage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleAmountsOut(
    _tokenA: string,
    _tokenB: string,
    _amountAssetA: BigNumberish,
    _priceOracle: string,
    _oracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  megaSwap(
    _params: {
      tokenA: string;
      tokenB: string;
      amountTokenA: BigNumberish;
      megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[];
      receiver: string;
      deadline: BigNumberish;
    },
    _maximumOracleTolerableLimit: BigNumberish,
    _dexAdapter: string,
    _priceOracle: string,
    _needOracleTolerableLimitCheck: boolean,
    _oracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDepositAmountInBorrowed(
      _params: {
        tokenA: string;
        tokenB: string;
        amount: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      },
      _isThirdAsset: boolean,
      _dexAdapter: string,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPriceByOrder(
      _bucket: string,
      _positionAsset: string,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleAmountsOut(
      _tokenA: string,
      _tokenB: string,
      _amountAssetA: BigNumberish,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    megaSwap(
      _params: {
        tokenA: string;
        tokenB: string;
        amountTokenA: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        receiver: string;
        deadline: BigNumberish;
      },
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: string,
      _priceOracle: string,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getDepositAmountInBorrowed(
      _params: {
        tokenA: string;
        tokenB: string;
        amount: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      },
      _isThirdAsset: boolean,
      _dexAdapter: string,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPriceByOrder(
      _bucket: string,
      _positionAsset: string,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleAmountsOut(
      _tokenA: string,
      _tokenB: string,
      _amountAssetA: BigNumberish,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    megaSwap(
      _params: {
        tokenA: string;
        tokenB: string;
        amountTokenA: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        receiver: string;
        deadline: BigNumberish;
      },
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: string,
      _priceOracle: string,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDepositAmountInBorrowed(
      _params: {
        tokenA: string;
        tokenB: string;
        amount: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
      },
      _isThirdAsset: boolean,
      _dexAdapter: string,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLiquidationPrice(
      _bucket: string,
      _positionAsset: string,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPriceByOrder(
      _bucket: string,
      _positionAsset: string,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleAmountsOut(
      _tokenA: string,
      _tokenB: string,
      _amountAssetA: BigNumberish,
      _priceOracle: string,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    megaSwap(
      _params: {
        tokenA: string;
        tokenB: string;
        amountTokenA: BigNumberish;
        megaRoutes: {
          shares: BigNumberish;
          routes: {
            to: string;
            paths: {
              dexName: string;
              shares: BigNumberish;
              payload: BytesLike;
            }[];
          }[];
        }[];
        receiver: string;
        deadline: BigNumberish;
      },
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: string,
      _priceOracle: string,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
