/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBucketInterface extends ethers.utils.Interface {
  functions: {
    "addAsset(address)": FunctionFragment;
    "allowedAssets(address)": FunctionFragment;
    "availableLiquidity()": FunctionFragment;
    "bar()": FunctionFragment;
    "batchDecreaseTradersDebt(address[],uint256[],address,uint256,uint256,uint256)": FunctionFragment;
    "borrowedAsset()": FunctionFragment;
    "debtToken()": FunctionFragment;
    "decreaseTraderDebt(address,uint256,address,uint256,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositFromBucket(string,address,tuple[],uint256)": FunctionFragment;
    "estimatedBar()": FunctionFragment;
    "estimatedLar()": FunctionFragment;
    "feeBuffer()": FunctionFragment;
    "getAllowedAssets()": FunctionFragment;
    "getLiquidityMiningParams()": FunctionFragment;
    "getNormalizedIncome()": FunctionFragment;
    "getNormalizedVariableDebt()": FunctionFragment;
    "increaseDebt(address,uint256,address)": FunctionFragment;
    "initialize((string,address,address,address,address,address,address,address,address[],address,uint256,uint256,uint256,address,uint256,uint256,uint256,address,uint128,uint128,uint256,bool,bytes,uint256),address)": FunctionFragment;
    "interestRateStrategy()": FunctionFragment;
    "isActive()": FunctionFragment;
    "isBucketStable()": FunctionFragment;
    "isDelisted()": FunctionFragment;
    "isDeprecated()": FunctionFragment;
    "isWithdrawAfterDelistingAvailable()": FunctionFragment;
    "lar()": FunctionFragment;
    "liquidityIndex()": FunctionFragment;
    "maxAssetLeverage(address)": FunctionFragment;
    "maxTotalDeposit()": FunctionFragment;
    "name()": FunctionFragment;
    "pToken()": FunctionFragment;
    "paybackPermanentLoss(uint256)": FunctionFragment;
    "permanentLoss()": FunctionFragment;
    "permanentLossScaled()": FunctionFragment;
    "positionManager()": FunctionFragment;
    "receiveDeposit(address,uint256,uint256,string)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
    "reserve()": FunctionFragment;
    "returnLiquidityFromAaveToBucket()": FunctionFragment;
    "setBarCalculationParams(bytes)": FunctionFragment;
    "setFeeBuffer(uint256)": FunctionFragment;
    "setInterestRateStrategy(address)": FunctionFragment;
    "setMaxTotalDeposit(uint256)": FunctionFragment;
    "setReserveRate(uint256)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "variableBorrowIndex()": FunctionFragment;
    "whiteBlackList()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawAfterDelisting(uint256)": FunctionFragment;
    "withdrawalFeeRate()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowedAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchDecreaseTradersDebt",
    values: [
      string[],
      BigNumberish[],
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseTraderDebt",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromBucket",
    values: [
      string,
      string,
      {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedBar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedLar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBuffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllowedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityMiningParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedIncome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedVariableDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        name: string;
        pToken: string;
        debtToken: string;
        positionManager: string;
        priceOracle: string;
        dns: string;
        reserve: string;
        whiteBlackList: string;
        assets: string[];
        borrowedAsset: string;
        feeBuffer: BigNumberish;
        withdrawalFeeRate: BigNumberish;
        reserveRate: BigNumberish;
        liquidityMiningRewardDistributor: string;
        liquidityMiningAmount: BigNumberish;
        liquidityMiningDeadline: BigNumberish;
        stabilizationDuration: BigNumberish;
        interestRateStrategy: string;
        estimatedBar: BigNumberish;
        estimatedLar: BigNumberish;
        maxAmountPerUser: BigNumberish;
        isReinvestToAaveEnabled: boolean;
        barCalcParams: BytesLike;
        maxTotalDeposit: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isBucketStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawAfterDelistingAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAssetLeverage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paybackPermanentLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permanentLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permanentLossScaled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveDeposit",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAsset", values: [string]): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnLiquidityFromAaveToBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBarCalculationParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "variableBorrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteBlackList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAfterDelisting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchDecreaseTradersDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTraderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFromBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedBar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedLar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityMiningParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedVariableDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBucketStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDelisted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawAfterDelistingAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAssetLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paybackPermanentLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentLossScaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnLiquidityFromAaveToBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBarCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAfterDelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "AddAsset(address)": EventFragment;
    "BarCalculationParamsChanged(bytes)": EventFragment;
    "BucketLaunched()": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "DepositToAave(address,uint256)": EventFragment;
    "FeeBufferChanged(uint256)": EventFragment;
    "InterestRateStrategyChanged(address)": EventFragment;
    "MaxTotalDepositChanged(uint256)": EventFragment;
    "RatesIndexesUpdated(uint128,uint128,uint128,uint128,uint256)": EventFragment;
    "RemoveAsset(address)": EventFragment;
    "ReserveRateChanged(uint256)": EventFragment;
    "TopUpTreasury(address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
    "WithdrawFromAave(address,uint256)": EventFragment;
    "WithdrawalFeeChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAsset"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BarCalculationParamsChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketLaunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToAave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBufferChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterestRateStrategyChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTotalDepositChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesIndexesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TopUpTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromAave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFeeChanged"): EventFragment;
}

export type AddAssetEvent = TypedEvent<[string] & { addedAsset: string }>;

export type BarCalculationParamsChangedEvent = TypedEvent<
  [string] & { params: string }
>;

export type BucketLaunchedEvent = TypedEvent<[] & {}>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    depositer: string;
    pTokenReceiver: string;
    amount: BigNumber;
  }
>;

export type DepositToAaveEvent = TypedEvent<
  [string, BigNumber] & { pool: string; amount: BigNumber }
>;

export type FeeBufferChangedEvent = TypedEvent<
  [BigNumber] & { feeBuffer: BigNumber }
>;

export type InterestRateStrategyChangedEvent = TypedEvent<
  [string] & { interestRateStrategy: string }
>;

export type MaxTotalDepositChangedEvent = TypedEvent<
  [BigNumber] & { maxTotalDeposit: BigNumber }
>;

export type RatesIndexesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    bar: BigNumber;
    lar: BigNumber;
    variableBorrowIndex: BigNumber;
    liquidityIndex: BigNumber;
    timestamp: BigNumber;
  }
>;

export type RemoveAssetEvent = TypedEvent<[string] & { deletedAsset: string }>;

export type ReserveRateChangedEvent = TypedEvent<
  [BigNumber] & { reserveRate: BigNumber }
>;

export type TopUpTreasuryEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    withdrawer: string;
    borrowAssetReceiver: string;
    amount: BigNumber;
  }
>;

export type WithdrawFromAaveEvent = TypedEvent<
  [string, BigNumber] & { pool: string; amount: BigNumber }
>;

export type WithdrawalFeeChangedEvent = TypedEvent<
  [BigNumber] & { withdrawalFeeRate: BigNumber }
>;

export class IBucket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBucketInterface;

  functions: {
    addAsset(
      _newAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedAssets(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    availableLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    bar(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchDecreaseTradersDebt(
      _traders: string[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowedAsset(overrides?: CallOverrides): Promise<[string]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    decreaseTraderDebt(
      _trader: string,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFromBucket(
      _bucketTo: string,
      _swapManager: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimatedBar(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimatedLar(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllowedAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getLiquidityMiningParams(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidityMiningRewardDistributor: string;
          isBucketLaunched: boolean;
          accumulatingAmount: BigNumber;
          deadlineTimestamp: BigNumber;
          stabilizationDuration: BigNumber;
          stabilizationEndTimestamp: BigNumber;
          maxAmountPerUser: BigNumber;
          maxDuration: BigNumber;
          maxStabilizationEndTimestamp: BigNumber;
        }
      ]
    >;

    getNormalizedIncome(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNormalizedVariableDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseDebt(
      _trader: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _params: {
        name: string;
        pToken: string;
        debtToken: string;
        positionManager: string;
        priceOracle: string;
        dns: string;
        reserve: string;
        whiteBlackList: string;
        assets: string[];
        borrowedAsset: string;
        feeBuffer: BigNumberish;
        withdrawalFeeRate: BigNumberish;
        reserveRate: BigNumberish;
        liquidityMiningRewardDistributor: string;
        liquidityMiningAmount: BigNumberish;
        liquidityMiningDeadline: BigNumberish;
        stabilizationDuration: BigNumberish;
        interestRateStrategy: string;
        estimatedBar: BigNumberish;
        estimatedLar: BigNumberish;
        maxAmountPerUser: BigNumberish;
        isReinvestToAaveEnabled: boolean;
        barCalcParams: BytesLike;
        maxTotalDeposit: BigNumberish;
      },
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRateStrategy(overrides?: CallOverrides): Promise<[string]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isBucketStable(overrides?: CallOverrides): Promise<[boolean]>;

    isDelisted(overrides?: CallOverrides): Promise<[boolean]>;

    isDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    isWithdrawAfterDelistingAvailable(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lar(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAssetLeverage(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pToken(overrides?: CallOverrides): Promise<[string]>;

    paybackPermanentLoss(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permanentLoss(overrides?: CallOverrides): Promise<[BigNumber]>;

    permanentLossScaled(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    receiveDeposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeAsset(
      _assetToDelete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    returnLiquidityFromAaveToBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBuffer(
      _feeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestRateStrategy(
      _interestRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalDeposit(
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    variableBorrowIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteBlackList(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _borrowAssetReceiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAfterDelisting(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addAsset(
    _newAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedAssets(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  bar(overrides?: CallOverrides): Promise<BigNumber>;

  batchDecreaseTradersDebt(
    _traders: string[],
    _debtsToBurn: BigNumberish[],
    _receiverOfAmountToReturn: string,
    _amountToReturn: BigNumberish,
    _permanentLossAmount: BigNumberish,
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowedAsset(overrides?: CallOverrides): Promise<string>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  decreaseTraderDebt(
    _trader: string,
    _debtToBurn: BigNumberish,
    _receiverOfAmountToReturn: string,
    _amountToReturn: BigNumberish,
    _permanentLossAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pTokenReceiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFromBucket(
    _bucketTo: string,
    _swapManager: string,
    _megaRoutes: {
      shares: BigNumberish;
      routes: {
        to: string;
        paths: { dexName: string; shares: BigNumberish; payload: BytesLike }[];
      }[];
    }[],
    _amountOutMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimatedBar(overrides?: CallOverrides): Promise<BigNumber>;

  estimatedLar(overrides?: CallOverrides): Promise<BigNumber>;

  feeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

  getLiquidityMiningParams(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidityMiningRewardDistributor: string;
      isBucketLaunched: boolean;
      accumulatingAmount: BigNumber;
      deadlineTimestamp: BigNumber;
      stabilizationDuration: BigNumber;
      stabilizationEndTimestamp: BigNumber;
      maxAmountPerUser: BigNumber;
      maxDuration: BigNumber;
      maxStabilizationEndTimestamp: BigNumber;
    }
  >;

  getNormalizedIncome(overrides?: CallOverrides): Promise<BigNumber>;

  getNormalizedVariableDebt(overrides?: CallOverrides): Promise<BigNumber>;

  increaseDebt(
    _trader: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _params: {
      name: string;
      pToken: string;
      debtToken: string;
      positionManager: string;
      priceOracle: string;
      dns: string;
      reserve: string;
      whiteBlackList: string;
      assets: string[];
      borrowedAsset: string;
      feeBuffer: BigNumberish;
      withdrawalFeeRate: BigNumberish;
      reserveRate: BigNumberish;
      liquidityMiningRewardDistributor: string;
      liquidityMiningAmount: BigNumberish;
      liquidityMiningDeadline: BigNumberish;
      stabilizationDuration: BigNumberish;
      interestRateStrategy: string;
      estimatedBar: BigNumberish;
      estimatedLar: BigNumberish;
      maxAmountPerUser: BigNumberish;
      isReinvestToAaveEnabled: boolean;
      barCalcParams: BytesLike;
      maxTotalDeposit: BigNumberish;
    },
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRateStrategy(overrides?: CallOverrides): Promise<string>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isBucketStable(overrides?: CallOverrides): Promise<boolean>;

  isDelisted(overrides?: CallOverrides): Promise<boolean>;

  isDeprecated(overrides?: CallOverrides): Promise<boolean>;

  isWithdrawAfterDelistingAvailable(
    overrides?: CallOverrides
  ): Promise<boolean>;

  lar(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityIndex(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAssetLeverage(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  pToken(overrides?: CallOverrides): Promise<string>;

  paybackPermanentLoss(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permanentLoss(overrides?: CallOverrides): Promise<BigNumber>;

  permanentLossScaled(overrides?: CallOverrides): Promise<BigNumber>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  receiveDeposit(
    _pTokenReceiver: string,
    _amount: BigNumberish,
    _duration: BigNumberish,
    _bucketFrom: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeAsset(
    _assetToDelete: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  returnLiquidityFromAaveToBucket(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBarCalculationParams(
    _params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBuffer(
    _feeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestRateStrategy(
    _interestRateStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalDeposit(
    _maxTotalDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveRate(
    _reserveRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  variableBorrowIndex(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteBlackList(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _borrowAssetReceiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAfterDelisting(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addAsset(_newAsset: string, overrides?: CallOverrides): Promise<void>;

    allowedAssets(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    bar(overrides?: CallOverrides): Promise<BigNumber>;

    batchDecreaseTradersDebt(
      _traders: string[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowedAsset(overrides?: CallOverrides): Promise<string>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    decreaseTraderDebt(
      _trader: string,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFromBucket(
      _bucketTo: string,
      _swapManager: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimatedBar(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedLar(overrides?: CallOverrides): Promise<BigNumber>;

    feeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

    getLiquidityMiningParams(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityMiningRewardDistributor: string;
        isBucketLaunched: boolean;
        accumulatingAmount: BigNumber;
        deadlineTimestamp: BigNumber;
        stabilizationDuration: BigNumber;
        stabilizationEndTimestamp: BigNumber;
        maxAmountPerUser: BigNumber;
        maxDuration: BigNumber;
        maxStabilizationEndTimestamp: BigNumber;
      }
    >;

    getNormalizedIncome(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedVariableDebt(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      _trader: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _params: {
        name: string;
        pToken: string;
        debtToken: string;
        positionManager: string;
        priceOracle: string;
        dns: string;
        reserve: string;
        whiteBlackList: string;
        assets: string[];
        borrowedAsset: string;
        feeBuffer: BigNumberish;
        withdrawalFeeRate: BigNumberish;
        reserveRate: BigNumberish;
        liquidityMiningRewardDistributor: string;
        liquidityMiningAmount: BigNumberish;
        liquidityMiningDeadline: BigNumberish;
        stabilizationDuration: BigNumberish;
        interestRateStrategy: string;
        estimatedBar: BigNumberish;
        estimatedLar: BigNumberish;
        maxAmountPerUser: BigNumberish;
        isReinvestToAaveEnabled: boolean;
        barCalcParams: BytesLike;
        maxTotalDeposit: BigNumberish;
      },
      _registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRateStrategy(overrides?: CallOverrides): Promise<string>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isBucketStable(overrides?: CallOverrides): Promise<boolean>;

    isDelisted(overrides?: CallOverrides): Promise<boolean>;

    isDeprecated(overrides?: CallOverrides): Promise<boolean>;

    isWithdrawAfterDelistingAvailable(
      overrides?: CallOverrides
    ): Promise<boolean>;

    lar(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityIndex(overrides?: CallOverrides): Promise<BigNumber>;

    maxAssetLeverage(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pToken(overrides?: CallOverrides): Promise<string>;

    paybackPermanentLoss(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    permanentLoss(overrides?: CallOverrides): Promise<BigNumber>;

    permanentLossScaled(overrides?: CallOverrides): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    receiveDeposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeAsset(
      _assetToDelete: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    returnLiquidityFromAaveToBucket(overrides?: CallOverrides): Promise<void>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBuffer(
      _feeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateStrategy(
      _interestRateStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalDeposit(
      _maxTotalDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveRate(
      _reserveRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    variableBorrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    whiteBlackList(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _borrowAssetReceiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAfterDelisting(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddAsset(address)"(
      addedAsset?: null
    ): TypedEventFilter<[string], { addedAsset: string }>;

    AddAsset(
      addedAsset?: null
    ): TypedEventFilter<[string], { addedAsset: string }>;

    "BarCalculationParamsChanged(bytes)"(
      params?: null
    ): TypedEventFilter<[string], { params: string }>;

    BarCalculationParamsChanged(
      params?: null
    ): TypedEventFilter<[string], { params: string }>;

    "BucketLaunched()"(): TypedEventFilter<[], {}>;

    BucketLaunched(): TypedEventFilter<[], {}>;

    "Deposit(address,address,uint256)"(
      depositer?: string | null,
      pTokenReceiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositer: string; pTokenReceiver: string; amount: BigNumber }
    >;

    Deposit(
      depositer?: string | null,
      pTokenReceiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { depositer: string; pTokenReceiver: string; amount: BigNumber }
    >;

    "DepositToAave(address,uint256)"(
      pool?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    DepositToAave(
      pool?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    "FeeBufferChanged(uint256)"(
      feeBuffer?: null
    ): TypedEventFilter<[BigNumber], { feeBuffer: BigNumber }>;

    FeeBufferChanged(
      feeBuffer?: null
    ): TypedEventFilter<[BigNumber], { feeBuffer: BigNumber }>;

    "InterestRateStrategyChanged(address)"(
      interestRateStrategy?: null
    ): TypedEventFilter<[string], { interestRateStrategy: string }>;

    InterestRateStrategyChanged(
      interestRateStrategy?: null
    ): TypedEventFilter<[string], { interestRateStrategy: string }>;

    "MaxTotalDepositChanged(uint256)"(
      maxTotalDeposit?: null
    ): TypedEventFilter<[BigNumber], { maxTotalDeposit: BigNumber }>;

    MaxTotalDepositChanged(
      maxTotalDeposit?: null
    ): TypedEventFilter<[BigNumber], { maxTotalDeposit: BigNumber }>;

    "RatesIndexesUpdated(uint128,uint128,uint128,uint128,uint256)"(
      bar?: null,
      lar?: null,
      variableBorrowIndex?: null,
      liquidityIndex?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        bar: BigNumber;
        lar: BigNumber;
        variableBorrowIndex: BigNumber;
        liquidityIndex: BigNumber;
        timestamp: BigNumber;
      }
    >;

    RatesIndexesUpdated(
      bar?: null,
      lar?: null,
      variableBorrowIndex?: null,
      liquidityIndex?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        bar: BigNumber;
        lar: BigNumber;
        variableBorrowIndex: BigNumber;
        liquidityIndex: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "RemoveAsset(address)"(
      deletedAsset?: null
    ): TypedEventFilter<[string], { deletedAsset: string }>;

    RemoveAsset(
      deletedAsset?: null
    ): TypedEventFilter<[string], { deletedAsset: string }>;

    "ReserveRateChanged(uint256)"(
      reserveRate?: null
    ): TypedEventFilter<[BigNumber], { reserveRate: BigNumber }>;

    ReserveRateChanged(
      reserveRate?: null
    ): TypedEventFilter<[BigNumber], { reserveRate: BigNumber }>;

    "TopUpTreasury(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    TopUpTreasury(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "Withdraw(address,address,uint256)"(
      withdrawer?: string | null,
      borrowAssetReceiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { withdrawer: string; borrowAssetReceiver: string; amount: BigNumber }
    >;

    Withdraw(
      withdrawer?: string | null,
      borrowAssetReceiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { withdrawer: string; borrowAssetReceiver: string; amount: BigNumber }
    >;

    "WithdrawFromAave(address,uint256)"(
      pool?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    WithdrawFromAave(
      pool?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    "WithdrawalFeeChanged(uint256)"(
      withdrawalFeeRate?: null
    ): TypedEventFilter<[BigNumber], { withdrawalFeeRate: BigNumber }>;

    WithdrawalFeeChanged(
      withdrawalFeeRate?: null
    ): TypedEventFilter<[BigNumber], { withdrawalFeeRate: BigNumber }>;
  };

  estimateGas: {
    addAsset(
      _newAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedAssets(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    bar(overrides?: CallOverrides): Promise<BigNumber>;

    batchDecreaseTradersDebt(
      _traders: string[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowedAsset(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseTraderDebt(
      _trader: string,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFromBucket(
      _bucketTo: string,
      _swapManager: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimatedBar(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedLar(overrides?: CallOverrides): Promise<BigNumber>;

    feeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityMiningParams(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedIncome(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedVariableDebt(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      _trader: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _params: {
        name: string;
        pToken: string;
        debtToken: string;
        positionManager: string;
        priceOracle: string;
        dns: string;
        reserve: string;
        whiteBlackList: string;
        assets: string[];
        borrowedAsset: string;
        feeBuffer: BigNumberish;
        withdrawalFeeRate: BigNumberish;
        reserveRate: BigNumberish;
        liquidityMiningRewardDistributor: string;
        liquidityMiningAmount: BigNumberish;
        liquidityMiningDeadline: BigNumberish;
        stabilizationDuration: BigNumberish;
        interestRateStrategy: string;
        estimatedBar: BigNumberish;
        estimatedLar: BigNumberish;
        maxAmountPerUser: BigNumberish;
        isReinvestToAaveEnabled: boolean;
        barCalcParams: BytesLike;
        maxTotalDeposit: BigNumberish;
      },
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRateStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isBucketStable(overrides?: CallOverrides): Promise<BigNumber>;

    isDelisted(overrides?: CallOverrides): Promise<BigNumber>;

    isDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    isWithdrawAfterDelistingAvailable(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lar(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAssetLeverage(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pToken(overrides?: CallOverrides): Promise<BigNumber>;

    paybackPermanentLoss(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permanentLoss(overrides?: CallOverrides): Promise<BigNumber>;

    permanentLossScaled(overrides?: CallOverrides): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    receiveDeposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      _assetToDelete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    returnLiquidityFromAaveToBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBuffer(
      _feeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestRateStrategy(
      _interestRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalDeposit(
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    variableBorrowIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteBlackList(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _borrowAssetReceiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAfterDelisting(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      _newAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedAssets(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchDecreaseTradersDebt(
      _traders: string[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowedAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseTraderDebt(
      _trader: string,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: string,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFromBucket(
      _bucketTo: string,
      _swapManager: string,
      _megaRoutes: {
        shares: BigNumberish;
        routes: {
          to: string;
          paths: {
            dexName: string;
            shares: BigNumberish;
            payload: BytesLike;
          }[];
        }[];
      }[],
      _amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimatedBar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimatedLar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityMiningParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedIncome(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedVariableDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      _trader: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _params: {
        name: string;
        pToken: string;
        debtToken: string;
        positionManager: string;
        priceOracle: string;
        dns: string;
        reserve: string;
        whiteBlackList: string;
        assets: string[];
        borrowedAsset: string;
        feeBuffer: BigNumberish;
        withdrawalFeeRate: BigNumberish;
        reserveRate: BigNumberish;
        liquidityMiningRewardDistributor: string;
        liquidityMiningAmount: BigNumberish;
        liquidityMiningDeadline: BigNumberish;
        stabilizationDuration: BigNumberish;
        interestRateStrategy: string;
        estimatedBar: BigNumberish;
        estimatedLar: BigNumberish;
        maxAmountPerUser: BigNumberish;
        isReinvestToAaveEnabled: boolean;
        barCalcParams: BytesLike;
        maxTotalDeposit: BigNumberish;
      },
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRateStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBucketStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDelisted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWithdrawAfterDelistingAvailable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAssetLeverage(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paybackPermanentLoss(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permanentLoss(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permanentLossScaled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveDeposit(
      _pTokenReceiver: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      _assetToDelete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnLiquidityFromAaveToBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBarCalculationParams(
      _params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBuffer(
      _feeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateStrategy(
      _interestRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalDeposit(
      _maxTotalDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    variableBorrowIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteBlackList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _borrowAssetReceiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAfterDelisting(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
