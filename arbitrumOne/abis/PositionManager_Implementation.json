{
  "address": "0xB54Ca1f5B8Ec473272418334b60fc92f4D699b2B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPositionManagerExtension",
          "type": "address"
        }
      ],
      "name": "ChangePositionManagerExtension",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scaledDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scaledDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_keeperRewardDistributor",
          "type": "address"
        }
      ],
      "name": "KeeperRewardDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maintenanceBuffer",
          "type": "uint256"
        }
      ],
      "name": "MaintenanceBufferChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "openedBy",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "scaledDebtAmount",
              "type": "uint256"
            },
            {
              "internalType": "contract IBucketV3",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "soldAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmountInSoldAsset",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "openBorrowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct PositionLibrary.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "closeConditions",
          "type": "tuple[]"
        }
      ],
      "name": "OpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "OracleTolerableLimitMultiplierChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bucketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "soldAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "positionAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasePositionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scaledDebtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "PartialClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "securityBuffer",
          "type": "uint256"
        }
      ],
      "name": "SecurityBufferChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleTolerableLimit",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultOracleTolerableLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInToken0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInToken1",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPositionSize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleTolerableLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOracleTolerableLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "closeConditions",
          "type": "tuple[]"
        }
      ],
      "name": "UpdatePositionConditions",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bucketPositionIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "dexName",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "payload",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Path[]",
                  "name": "paths",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Route[]",
              "name": "routes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
          "name": "_megaRoutes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_positionSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pmxSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_nativeSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes[][]",
          "name": "_pullOracleData",
          "type": "bytes[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pullOracleTypes",
          "type": "uint256[]"
        }
      ],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "conditionIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ccmAdditionalParams",
              "type": "bytes"
            },
            {
              "internalType": "enum PositionLibrary.CloseReason",
              "name": "closeReason",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "positionSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativePmxOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "positionNativeAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "pmxSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativeSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes[][]",
              "name": "pullOracleData",
              "type": "bytes[][]"
            },
            {
              "internalType": "uint256[]",
              "name": "pullOracleTypes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IPositionManagerV2.ClosePositionByConditionParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "closePositionByCondition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_positionSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_nativeSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes[][]",
          "name": "_pullOracleData",
          "type": "bytes[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pullOracleTypes",
          "type": "uint256[]"
        }
      ],
      "name": "decreaseDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOracleTolerableLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_traders",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        }
      ],
      "name": "deletePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "doTransferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPositionsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        }
      ],
      "name": "getBucketPositionsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCloseCondition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.Condition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        }
      ],
      "name": "getCloseConditions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        }
      ],
      "name": "getOracleTolerableLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "scaledDebtAmount",
              "type": "uint256"
            },
            {
              "internalType": "contract IBucketV3",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "soldAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmountInSoldAsset",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "openBorrowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct PositionLibrary.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPositionByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "scaledDebtAmount",
              "type": "uint256"
            },
            {
              "internalType": "contract IBucketV3",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "soldAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmountInSoldAsset",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "openBorrowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct PositionLibrary.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPositionDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getTraderPositionsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_takeDepositFromWallet",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "dexName",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "payload",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Path[]",
                  "name": "paths",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Route[]",
              "name": "routes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
          "name": "_megaRoutes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "increaseDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primexDNS",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_traderBalanceVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeperRewardDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whiteBlackList",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_positionManagerExtension",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isDelistedPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperRewardDistributor",
      "outputs": [
        {
          "internalType": "contract IKeeperRewardDistributorV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxPositionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPositionAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPositionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "bucket",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowedAmount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "components": [
                            {
                              "internalType": "string",
                              "name": "dexName",
                              "type": "string"
                            },
                            {
                              "internalType": "uint256",
                              "name": "shares",
                              "type": "uint256"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct PrimexPricingLibrary.Path[]",
                          "name": "paths",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Route[]",
                      "name": "routes",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
                  "name": "depositInThirdAssetMegaRoutes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PositionLibrary.OpenPositionMarginParams",
              "name": "marginParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "firstAssetMegaRoutes",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "takeDepositFromWallet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isProtocolFeeInPmx",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "closeConditions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "firstAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "thirdAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "depositSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "positionUsdOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativePositionAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "pmxPositionAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativeSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes[][]",
              "name": "pullOracleData",
              "type": "bytes[][]"
            },
            {
              "internalType": "uint256[]",
              "name": "pullOracleTypes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PositionLibrary.OpenPositionParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IBucketV3",
                  "name": "bucket",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "positionAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "depositAsset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "shouldOpenPosition",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "createdAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedConditionsAt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.LimitOrder",
              "name": "order",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "closeConditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "firstAssetMegaRoutes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "depositInThirdAssetMegaRoutes",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "firstAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "thirdAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "depositSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "positionUsdOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativePositionAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "pmxPositionAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nativeSoldAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LimitOrderLibrary.OpenPositionByOrderParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "openPositionByOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleTolerableLimitMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "dexName",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "payload",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Path[]",
                  "name": "paths",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Route[]",
              "name": "routes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
          "name": "_megaRoutes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_positionSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_nativePositionAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_nativeSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pmxSoldAssetOracleData",
          "type": "bytes"
        },
        {
          "internalType": "bytes[][]",
          "name": "_pullOracleData",
          "type": "bytes[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pullOracleTypes",
          "type": "uint256[]"
        }
      ],
      "name": "partiallyClosePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManagerExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primexDNS",
      "outputs": [
        {
          "internalType": "contract IPrimexDNSV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "securityBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPositionManagerExtension",
          "type": "address"
        }
      ],
      "name": "setPositionManagerExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setProtocolParamsByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spotTradingRewardDistributor",
      "outputs": [
        {
          "internalType": "contract ISpotTradingRewardDistributorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traderBalanceVault",
      "outputs": [
        {
          "internalType": "contract ITraderBalanceVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traderPositionIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "_closeConditions",
          "type": "tuple[]"
        }
      ],
      "name": "updatePositionConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f4e3387249c93e58281397e7e1e74d05175e0b73eb0ad7580160c098986d24b",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xB54Ca1f5B8Ec473272418334b60fc92f4D699b2B",
    "transactionIndex": 7,
    "gasUsed": "5617956",
    "logsBloom": "0x
    "blockHash": "0xa3f70a5829c4054f94b5ca1b3b1ccf107603e20606f6ddd6256c66fa69f69ec0",
    "transactionHash": "0x5f4e3387249c93e58281397e7e1e74d05175e0b73eb0ad7580160c098986d24b",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 247595842,
        "transactionHash": "0x5f4e3387249c93e58281397e7e1e74d05175e0b73eb0ad7580160c098986d24b",
        "address": "0xB54Ca1f5B8Ec473272418334b60fc92f4D699b2B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 14,
        "blockHash": "0xa3f70a5829c4054f94b5ca1b3b1ccf107603e20606f6ddd6256c66fa69f69ec0"
      }
    ],
    "blockNumber": 247595842,
    "cumulativeGasUsed": "8369962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a40cbe14c80d3d42e946a5aebe2ca9f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPositionManagerExtension\",\"type\":\"address\"}],\"name\":\"ChangePositionManagerExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_keeperRewardDistributor\",\"type\":\"address\"}],\"name\":\"KeeperRewardDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maintenanceBuffer\",\"type\":\"uint256\"}],\"name\":\"MaintenanceBufferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"openedBy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IBucketV3\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"soldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountInSoldAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct PositionLibrary.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"OracleTolerableLimitMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soldAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasePositionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"PartialClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"securityBuffer\",\"type\":\"uint256\"}],\"name\":\"SecurityBufferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleTolerableLimit\",\"type\":\"uint256\"}],\"name\":\"SetDefaultOracleTolerableLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInToken0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInToken1\",\"type\":\"uint256\"}],\"name\":\"SetMaxPositionSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleTolerableLimit\",\"type\":\"uint256\"}],\"name\":\"SetOracleTolerableLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"}],\"name\":\"UpdatePositionConditions\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bucketPositionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"_megaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_positionSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pmxSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"_pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pullOracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ccmAdditionalParams\",\"type\":\"bytes\"},{\"internalType\":\"enum PositionLibrary.CloseReason\",\"name\":\"closeReason\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"positionSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativePmxOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"positionNativeAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pmxSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"pullOracleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPositionManagerV2.ClosePositionByConditionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"closePositionByCondition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_positionSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"_pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pullOracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"decreaseDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOracleTolerableLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_traders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"}],\"name\":\"deletePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doTransferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPositionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"}],\"name\":\"getBucketPositionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCloseCondition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"getCloseConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"}],\"name\":\"getOracleTolerableLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IBucketV3\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"soldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountInSoldAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct PositionLibrary.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPositionByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IBucketV3\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"soldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountInSoldAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct PositionLibrary.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPositionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getTraderPositionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_takeDepositFromWallet\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"_megaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"increaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primexDNS\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_traderBalanceVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeperRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whiteBlackList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManagerExtension\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isDelistedPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperRewardDistributor\",\"outputs\":[{\"internalType\":\"contract IKeeperRewardDistributorV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxPositionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPositionAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPositionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"bucket\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"depositInThirdAssetMegaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PositionLibrary.OpenPositionMarginParams\",\"name\":\"marginParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"firstAssetMegaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"takeDepositFromWallet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isProtocolFeeInPmx\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"firstAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"thirdAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"depositSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"positionUsdOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativePositionAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pmxPositionAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"pullOracleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PositionLibrary.OpenPositionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IBucketV3\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"firstAssetMegaRoutes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"depositInThirdAssetMegaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"firstAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"thirdAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"depositSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"positionUsdOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativePositionAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pmxPositionAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LimitOrderLibrary.OpenPositionByOrderParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"openPositionByOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleTolerableLimitMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"_megaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_positionSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nativePositionAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nativeSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pmxSoldAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"_pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pullOracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"partiallyClosePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManagerExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primexDNS\",\"outputs\":[{\"internalType\":\"contract IPrimexDNSV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPositionManagerExtension\",\"type\":\"address\"}],\"name\":\"setPositionManagerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setProtocolParamsByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotTradingRewardDistributor\",\"outputs\":[{\"internalType\":\"contract ISpotTradingRewardDistributorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traderBalanceVault\",\"outputs\":[{\"internalType\":\"contract ITraderBalanceVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traderPositionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"_closeConditions\",\"type\":\"tuple[]\"}],\"name\":\"updatePositionConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"closePosition(uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes[][],uint256[])\":{\"details\":\"Protocol will fall down (revert) if two conditions occur both: 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1, so position will make loss for Protocol. 2. Not enough liquidity in bucket to pay that loss.\",\"params\":{\"_amountOutMin\":\"minimum allowed amount out for position\",\"_dealReceiver\":\"The receiver of the rest of trader's deposit.\",\"_id\":\"Position id for `msg.sender`.\",\"_megaRoutes\":\"swap routes on dexes\"}},\"decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])\":{\"params\":{\"_amount\":\"The amount to decrease the deposit by.\",\"_positionId\":\"The ID of the position.\"}},\"deletePositions(uint256[],address[],uint256,address)\":{\"params\":{\"_bucket\":\"The address of the bucket from which the position is to be deleted.\",\"_ids\":\"The IDs of the positions to be deleted.\",\"_length\":\"The length of the traders array.\",\"_traders\":\"The addresses of the traders who owns the position.\"}},\"doTransferOut(address,address,uint256)\":{\"details\":\"Only callable by the BATCH_MANAGER_ROLE role.\",\"params\":{\"_amount\":\"The amount of tokens to be transferred.\",\"_to\":\"The address to which the tokens will be transferred.\",\"_token\":\"The address of the token to be transferred.\"}},\"getAllPositionsLength()\":{\"returns\":{\"_0\":\"The length of the positions array.\"}},\"getBucketPositionsLength(address)\":{\"params\":{\"_bucket\":\"The address of the bucket.\"},\"returns\":{\"_0\":\"The number of positions the bucket has.\"}},\"getCloseCondition(uint256,uint256)\":{\"params\":{\"_index\":\"The index of the close condition.\",\"_positionId\":\"The identifier of the position.\"},\"returns\":{\"_0\":\"The close condition at the specified position and index.\"}},\"getCloseConditions(uint256)\":{\"params\":{\"_positionId\":\"The ID of the position.\"},\"returns\":{\"_0\":\"An array of close conditions associated with the position.\"}},\"getOracleTolerableLimit(address,address)\":{\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\"},\"returns\":{\"_0\":\"The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\"}},\"getPosition(uint256)\":{\"params\":{\"_id\":\"The ID of the position to retrieve.\"},\"returns\":{\"_0\":\"position The position information associated with the given ID.\"}},\"getPositionByIndex(uint256)\":{\"params\":{\"_index\":\"The index of the position to retrieve.\"},\"returns\":{\"_0\":\"The Position struct at the specified index.\"}},\"getPositionDebt(uint256)\":{\"params\":{\"_id\":\"The ID of the position.\"},\"returns\":{\"_0\":\"The debt of the position, measured in the same decimal format as debtTokens.\"}},\"getTraderPositionsLength(address)\":{\"params\":{\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"The number of positions the trader has.\"}},\"increaseDeposit(uint256,uint256,address,bool,(uint256,(address,(string,uint256,bytes)[])[])[],uint256)\":{\"params\":{\"_amount\":\"The amount to increase the deposit by.\",\"_amountOutMin\":\"The minimum amount of the output asset to receive from trading.\",\"_asset\":\"The address of the asset to deposit.\",\"_megaRoutes\":\"An array of routes to use for trading.\",\"_positionId\":\"The ID of the position to increase the deposit for.\",\"_takeDepositFromWallet\":\"A flag indicating whether to make the deposit immediately.\"}},\"initialize(address,address,address,address,address,address,address)\":{\"params\":{\"_keeperRewardDistributor\":\"The address of the KeeperRewardDistributor contract.\",\"_positionManagerExtension\":\"The address of the PositionManagerExtension contract.\",\"_priceOracle\":\"The address of the PriceOracle contract.\",\"_primexDNS\":\"The address of the PrimexDNS contract.\",\"_registry\":\"The address of the Registry contract.\",\"_traderBalanceVault\":\"The address of the TraderBalanceVault contract.\",\"_whiteBlackList\":\"The address of the WhiteBlacklist contract.\"}},\"isDelistedPosition(uint256)\":{\"params\":{\"_id\":\"The ID of the position.\"},\"returns\":{\"_0\":\"A boolean indicating whether the position is delisted or not.\"}},\"openPosition(((string,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]),(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256,address,uint256,uint256,bool,bool,(uint256,bytes)[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))\":{\"details\":\"Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal. Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'. Mints debtToken for trader (msg.sender)\",\"params\":{\"_params\":\"The parameters required to open a position.\"}},\"openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),(uint256,bytes)[],(uint256,(address,(string,uint256,bytes)[])[])[],(uint256,(address,(string,uint256,bytes)[])[])[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))\":{\"details\":\"Only callable by the LOM_ROLE role.\",\"params\":{\"_params\":\"The parameters for opening a position.\"},\"returns\":{\"_0\":\"The total borrowed amount, position amount, position ID, and entry price of the new position.\"}},\"partiallyClosePosition(uint256,uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])\":{\"params\":{\"_amount\":\"The amount of the position asset to be closed from the position.\",\"_amountOutMin\":\"The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\",\"_depositReceiver\":\"The address where the remaining deposit will be sent.\",\"_megaRoutes\":\"The routing information for swapping assets.\",\"_positionId\":\"The ID of the position to be partially closed.\"}},\"pause()\":{\"details\":\"Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setPositionManagerExtension(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_newPositionManagerExtension\":\"The address of PositionManagerExtension contract.\"}},\"setProtocolParamsByAdmin(bytes)\":{\"details\":\"This function allows an admin to update protocol parameters using a delegatecall to the PositionManagerExtension contract.\",\"params\":{\"_data\":\"The data containing the encoded function call to be executed by the delegatecall.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"unpause()\":{\"details\":\"Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused.\"},\"updatePositionConditions(uint256,(uint256,bytes)[])\":{\"details\":\"The caller of this function must be the trader who owns the position.Emits an `UpdatePositionConditions` event upon successful update.\",\"params\":{\"_closeConditions\":\"An array of close conditions for the position.\",\"_positionId\":\"The ID of the position to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closePosition(uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes[][],uint256[])\":{\"notice\":\"Close trader's active position or liquidate risky position.\"},\"decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])\":{\"notice\":\"Decreases the deposit amount for a given position.\"},\"deletePositions(uint256[],address[],uint256,address)\":{\"notice\":\"Deletes a positions by their IDs from a specific bucket for a given traders.\"},\"doTransferOut(address,address,uint256)\":{\"notice\":\"Transfers a specified amount of tokens from the contract to a specified address.\"},\"getAllPositionsLength()\":{\"notice\":\"Returns the length of the positions array.\"},\"getBucketPositionsLength(address)\":{\"notice\":\"Returns the length of the array containing the positions of a specific bucket.\"},\"getCloseCondition(uint256,uint256)\":{\"notice\":\"Retrieves the close condition for a given position and index.\"},\"getCloseConditions(uint256)\":{\"notice\":\"Retrieves the close conditions for a specific position.\"},\"getOracleTolerableLimit(address,address)\":{\"notice\":\"Returns the oracle tolerable limit for the given asset pair.\"},\"getPosition(uint256)\":{\"notice\":\"Retrieves the position information for a given ID.\"},\"getPositionByIndex(uint256)\":{\"notice\":\"Retrieves the position at the specified index.\"},\"getPositionDebt(uint256)\":{\"notice\":\"Returns the debt of a position with the given ID.\"},\"getTraderPositionsLength(address)\":{\"notice\":\"Returns the length of the array containing the positions of a specific trader.\"},\"increaseDeposit(uint256,uint256,address,bool,(uint256,(address,(string,uint256,bytes)[])[])[],uint256)\":{\"notice\":\"Increases the deposit amount for a given position.\"},\"initialize(address,address,address,address,address,address,address)\":{\"notice\":\"Initializes the contract with the specified addresses and initializes inherited contracts.\"},\"isDelistedPosition(uint256)\":{\"notice\":\"Checks if a position with the given ID is delisted.\"},\"openPosition(((string,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]),(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256,address,uint256,uint256,bool,bool,(uint256,bytes)[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))\":{\"notice\":\"Opens margin position.\"},\"openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),(uint256,bytes)[],(uint256,(address,(string,uint256,bytes)[])[])[],(uint256,(address,(string,uint256,bytes)[])[])[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))\":{\"notice\":\"Opens a position based on the provided order parameters.\"},\"partiallyClosePosition(uint256,uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])\":{\"notice\":\"Allows the trader to partially close a position.\"},\"setPositionManagerExtension(address)\":{\"notice\":\"Sets the positionManagerExtension.\"},\"setProtocolParamsByAdmin(bytes)\":{\"notice\":\"Sets protocol parameters through an administrative delegatecall.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"updatePositionConditions(uint256,(uint256,bytes)[])\":{\"notice\":\"Updates the position with the given position ID by setting new close conditions.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionManager/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNSV3, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNSV3 _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucketV3 bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucketV3 bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0xeec30381ae5c694a65a51d831704f2f2d9a969ae6c7ff1901a89c1bc2e668cb3\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNSV3);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc93484ae76ebd5ec509e1fb1b5efee69159abcbee241f97c04579770d0573287\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x53e9c9edcec4c00b7cbac171770da68af43b39a4c7a36d1813c3ea03588e81e1\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucketV3 bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x0e7e8db0434b1c208e47cea395f710edbbcf70bc97d4ce363a8b9c36a8a91205\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager, IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS, IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\nimport {IBucketEvents} from \\\"./IBucketEvents.sol\\\";\\n\\ninterface IBucket is IBucketStorage, IBucketEvents {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    /**\\n     * @dev Sets barCalculationParams (urOptimal, k0, k1, b0, b1)\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param _megaRoutes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\\ninterface IBucketV2 is IBucket {\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit from user wallet\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount, bool _takeDepositFromWallet) external;\\n}\\n\\ninterface IBucketV3 is IBucketV2 {\\n    event ChangedBucketExtension(address newBucketExtension);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA) + protocolFeeInPositiontAsset / positionSize)\\n     * @param _asset The address of trading asset\\n     * @param _feeRate The ratio of protocolFeeInPositionAsset to positionSize\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset, uint256 _feeRate) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the bucketExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucketExtension The address of BucketExtension contract.\\n     */\\n    function setBucketExtension(address _newBucketExtension) external;\\n}\\n\\ninterface IBucketV4 is IBucketV3 {\\n    /**\\n     * @notice Performs a flash loan transfer of a specified amount to a receiver address.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param _to The address to which the flash loan amount will be transferred.\\n     * @param _amount The amount of tokens to transfer in the flash loan.\\n     */\\n    function performFlashLoanTransfer(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Accumulates a predefined amount of asset to the bucket as a fixed, instantaneous income. Used\\n     * to accumulate the flashloan fee to the bucket, and spread it between all the suppliers.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param amount The amount to accumulate\\n     * @param availableLiquidity The availableLiquidity before flashLoan\\n     */\\n    function cumulateToLiquidityIndex(uint256 amount, uint256 availableLiquidity) external;\\n\\n    /**\\n     * @notice Updates bucket's BAR and LAR.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     */\\n    function updateRates() external;\\n}\\n\",\"keccak256\":\"0x2b9127c5ba8e7c9ceb708d1490b85d8c3552fd05d531a74df8ad5dae8e9ec5e3\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IBucketEvents {\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xefe6ff5ba4275599f84dff3e9accda189d62681a99c2851a843925c287a045ba\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManagerV2);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\\ninterface IBucketStorageV2 {\\n    function bucketExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d992b76b9281db2418f75de141b8f002edb793224bbe265decd3433bc2fce3a\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\",\"keccak256\":\"0x79925fda117d97ed111d7d1cd0fce18cc9882c1b6c288d5bd499d56f3c2ca871\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeb40ae51d2d32f11c8db3712dadffb01789ef30e2cb92643f707afcdc2223af1\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucketV3);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x3839c065a8b034a56bcaf23d06be78df5d042f699944d5435d202eddab39e6ef\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorStorageV2} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributorV3 is IKeeperRewardDistributorStorageV2, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle Address of the PriceOracle contract\\n     * @param   registry Address of the Registry contract\\n     * @param   pmx Address of PMXToken\\n     * @param   treasury Address of the Treasury contract\\n     * @param   pmxPartInReward Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficient The reward param which is needed to calculate rewards, in WAD\\n     * @param   additionalGas Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficient;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientChanged(uint256 indexed positionSizeCoefficient);\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n    event MinPositionSizeAddendChanged(uint256 newMinPositionSizeAddend);\\n    event OptimisticGasCoefficientChanged(uint256 newOptimismGasCoefficient);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficient The new positionSizeCoefficient value (in WAD).\\n     */\\n    function setPositionSizeCoefficient(uint256 _positionSizeCoefficient) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n\\n    /**\\n     * @notice Sets the minPositionSizeAddend for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSizeAddend The new minPositionSizeAddend value (in WAD).\\n     */\\n\\n    function setMinPositionSizeAddend(uint256 _minPositionSizeAddend) external;\\n\\n    /**\\n     * @notice Retrieves gas calculation params.\\n     *\\n     * @return oracleGasPriceTolerance The tolerance for gas price fluctuations based on the oracle.\\n     * @return defaultMaxGasPrice The default maximum gas price allowed.\\n     */\\n    function getGasCalculationParams() external view returns (uint256, uint256, uint256, PaymentModel);\\n\\n    /**\\n     * @notice Sets the optimisticGasCoefficient for optimism paymentModel.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newOptimisticGasCoefficient The new optimisticGasCoefficient value (in WAD).\\n     */\\n    function setOptimisticGasCoefficient(uint256 _newOptimisticGasCoefficient) external;\\n}\\n\",\"keccak256\":\"0xe7e8ed68096946966302efb5863878bf7cc40ae6aa353d995da1f4116efc04b0\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM,\\n        OPTIMISTIC\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficient() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\\ninterface IKeeperRewardDistributorStorageV2 is IKeeperRewardDistributorStorage {\\n    function minPositionSizeAddend() external view returns (uint256);\\n\\n    function optimisticGasCoefficient() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dac4088b459dcbc1475222cbc8be0c0f5f9dcc3568ea78d8752ddaacea9f938\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNSV3 _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c7cd863230da4fc92831e99263814c285a45cc4779525b5433222d2370c264\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb89b62cf6cc5c1fdeb7209b86973b46610ff7b48b114c9b0cd850507c45e3c2a\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IBucketV3, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x180185e60157be84a899b0f6201aae3af5e9a98c5f016054658d14fc2559d70e\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucketV3);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0xc3156264a851ed48f66e8099fb7595ea9c99c2eaed9ad6790b0d5412dd1fcf69\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage, IPositionManagerStorageV2, IKeeperRewardDistributorV3} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IPositionManagerEvents} from \\\"./IPositionManagerEvents.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManagerV2 is IPositionManagerStorageV2, IPositionManagerStorage, IPositionManagerEvents, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event ChangePositionManagerExtension(address indexed newPositionManagerExtension);\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    struct ClosePositionByConditionParams {\\n        uint256 id;\\n        address keeper;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 conditionIndex;\\n        bytes ccmAdditionalParams;\\n        PositionLibrary.CloseReason closeReason;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     * @param _positionManagerExtension The address of the PositionManagerExtension contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList,\\n        address _positionManagerExtension\\n    ) external;\\n\\n    /**\\n     * @notice Sets the positionManagerExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newPositionManagerExtension The address of PositionManagerExtension contract.\\n     */\\n    function setPositionManagerExtension(address _newPositionManagerExtension) external;\\n\\n    /**\\n     * @notice Sets protocol parameters through an administrative delegatecall.\\n     * @dev This function allows an admin to update protocol parameters using a delegatecall to the PositionManagerExtension contract.\\n     * @param _data The data containing the encoded function call to be executed by the delegatecall.\\n     */\\n    function setProtocolParamsByAdmin(bytes calldata _data) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    // /**\\n    //  * @notice Closes trader's active position by closing condition\\n    //  * @param _id Position id.\\n    //  * @param _keeper The address of the keeper or the recipient of the reward.\\n    //  * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n    //  * @param _conditionIndex The index of the condition to be used for closing the position.\\n    //  * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n    //  * @param _closeReason The reason for closing the position.\\n    //  */\\n    function closePositionByCondition(ClosePositionByConditionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativePositionAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributorV3 _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] memory _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb1069a961bc115256679dcc62a7870c70163ebeb2269bf9e1ab9486a45484ee1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\ninterface IPositionManagerEvents {\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n}\\n\",\"keccak256\":\"0x568630183883e5b6bee9e1d3ee6fba6f707dc33496111a4892cca839ad6a9f05\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerExtension.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorageV2} from \\\"../PositionManager/IPositionManagerStorage.sol\\\";\\nimport {IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPositionManagerEvents} from \\\"./IPositionManagerEvents.sol\\\";\\n\\ninterface IPositionManagerExtension is IPositionManagerStorageV2, IPositionManagerEvents {\\n    /**\\n     * @param token0 The address of the first token in the pair.\\n     * @param token1 The address of the second token in the pair.\\n     * @param amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    struct MaxPositionSizeParams {\\n        address token0;\\n        address token1;\\n        uint256 amountInToken0;\\n        uint256 amountInToken1;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    struct OracleTolerableLimitsParams {\\n        address assetA;\\n        address assetB;\\n        uint256 percent;\\n    }\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Same as the setMaxPositionSize but for a batch of sizes\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params The array of MaxPositionSizeParams structs\\n     */\\n    function setMaxPositionSizes(MaxPositionSizeParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Same as the setOracleTolerableLimit but for a batch of limits\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _limitParams The array of the OracleTolerableLimitsParams sctructs\\n     */\\n\\n    function setOracleTolerableLimits(OracleTolerableLimitsParams[] calldata _limitParams) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The instance of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributorV3 _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativePositionAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8e6328b811a9e0ea03116a585b84736ea23c152435b9802e25ad1a848f1590e4\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributorV2} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function priceOracle() external view returns (IPriceOracleV2);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributorV3);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributorV2);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\\ninterface IPositionManagerStorageV2 {\\n    function positionManagerExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x01ffe4757883c6cb129e22d7cfd1b40fe0191f498c28eff60a4d7ca14e774acb\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/PositionManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"./PositionManagerStorage.sol\\\";\\nimport {IPositionManagerV2} from \\\"./IPositionManager.sol\\\";\\nimport {IPositionManagerExtension} from \\\"./IPositionManagerExtension.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPriceOracleStorageV2} from \\\"../PriceOracle/IPriceOracleStorage.sol\\\";\\nimport {ISpotTradingRewardDistributorV2} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IKeeperRewardDistributorStorage} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\\\";\\n\\ncontract PositionManager is IPositionManagerV2, PositionManagerStorageV2 {\\n    using WadRayMath for uint256;\\n    using PositionLibrary for PositionLibrary.Position;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList,\\n        address _positionManagerExtension\\n    ) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId) &&\\n                IERC165Upgradeable(_primexDNS).supportsInterface(type(IPrimexDNSV3).interfaceId) &&\\n                IERC165Upgradeable(_traderBalanceVault).supportsInterface(type(ITraderBalanceVault).interfaceId) &&\\n                IERC165Upgradeable(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId) &&\\n                IERC165Upgradeable(_keeperRewardDistributor).supportsInterface(\\n                    type(IKeeperRewardDistributorV3).interfaceId\\n                ) &&\\n                IERC165Upgradeable(_whiteBlackList).supportsInterface(type(IWhiteBlackList).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = IAccessControl(_registry);\\n        primexDNS = IPrimexDNSV3(_primexDNS);\\n        traderBalanceVault = ITraderBalanceVault(_traderBalanceVault);\\n        priceOracle = IPriceOracleV2(_priceOracle);\\n        keeperRewardDistributor = IKeeperRewardDistributorV3(_keeperRewardDistributor);\\n        whiteBlackList = IWhiteBlackList(_whiteBlackList);\\n        _setPositionManagerExtension(_positionManagerExtension);\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __ERC165_init();\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function setPositionManagerExtension(address _newPositionManagerExtension) external override {\\n        _onlyRole(BIG_TIMELOCK_ADMIN);\\n        _setPositionManagerExtension(_newPositionManagerExtension);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function setProtocolParamsByAdmin(bytes calldata _data) external override {\\n        Address.functionDelegateCall(positionManagerExtension, _data);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external override {\\n        _onlyRole(BATCH_MANAGER_ROLE);\\n        TokenTransfersLibrary.doTransferOut(_token, _to, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external override returns (uint256, uint256, uint256, uint256, uint256) {\\n        bytes memory data = abi.encodeWithSelector(IPositionManagerExtension.openPositionByOrder.selector, _params);\\n        bytes memory returnData = Address.functionDelegateCall(positionManagerExtension, data);\\n        return abi.decode(returnData, (uint256, uint256, uint256, uint256, uint256));\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable override {\\n        bytes memory data = abi.encodeWithSelector(IPositionManagerExtension.openPosition.selector, _params);\\n        Address.functionDelegateCall(positionManagerExtension, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function closePositionByCondition(\\n        ClosePositionByConditionParams calldata _params\\n    ) external payable override nonReentrant {\\n        _require(_params.closeReason != PositionLibrary.CloseReason.CLOSE_BY_TRADER, Errors.FORBIDDEN.selector);\\n        _notBlackListed();\\n        uint256 initialGasleft = gasleft();\\n        LimitOrderLibrary.Condition memory condition;\\n        if (_params.conditionIndex < closeConditions[_params.id].length)\\n            condition = closeConditions[_params.id][_params.conditionIndex];\\n        PositionLibrary.ClosePositionEventData memory posEventData = _closePosition(\\n            _params.id,\\n            _params.keeper,\\n            _params.megaRoutes,\\n            0,\\n            condition,\\n            _params.ccmAdditionalParams,\\n            _params.closeReason,\\n            initialGasleft,\\n            _params.positionSoldAssetOracleData,\\n            _params.nativePmxOracleData,\\n            _params.pmxSoldAssetOracleData,\\n            _params.nativeSoldAssetOracleData,\\n            _params.positionNativeAssetOracleData,\\n            _params.pullOracleData,\\n            _params.pullOracleTypes\\n        );\\n\\n        emit PositionLibrary.PaidProtocolFee({\\n            positionId: _params.id,\\n            trader: posEventData.trader,\\n            paymentAsset: posEventData.paymentAsset,\\n            feeRateType: posEventData.feeRateType,\\n            feeInPaymentAsset: posEventData.feeInPaymentAsset,\\n            feeInPmx: posEventData.feeInPmx\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external override {\\n        bytes memory data = abi.encodeWithSelector(\\n            IPositionManagerExtension.updatePositionConditions.selector,\\n            _positionId,\\n            _closeConditions\\n        );\\n        Address.functionDelegateCall(positionManagerExtension, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external override nonReentrant {\\n        _notBlackListed();\\n        PositionLibrary.Position storage position = positions[positionIndexes[_positionId]];\\n        uint256 depositDelta = position.increaseDeposit(\\n            PositionLibrary.IncreaseDepositParams({\\n                amount: _amount,\\n                asset: _asset,\\n                takeDepositFromWallet: _takeDepositFromWallet,\\n                megaRoutes: _megaRoutes,\\n                primexDNS: primexDNS,\\n                priceOracle: priceOracle,\\n                traderBalanceVault: traderBalanceVault,\\n                amountOutMin: _amountOutMin\\n            })\\n        );\\n\\n        emit IncreaseDeposit({\\n            positionId: position.id,\\n            trader: position.trader,\\n            depositDelta: depositDelta,\\n            scaledDebtAmount: position.scaledDebtAmount\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function decreaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable override {\\n        bytes memory data = abi.encodeWithSelector(\\n            IPositionManagerExtension.decreaseDeposit.selector,\\n            _positionId,\\n            _amount,\\n            _positionSoldAssetOracleData,\\n            _nativeSoldAssetOracleData,\\n            _pullOracleData,\\n            _pullOracleTypes\\n        );\\n        Address.functionDelegateCall(positionManagerExtension, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativePositionAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable override {\\n        bytes memory data = abi.encodeWithSelector(\\n            IPositionManagerExtension.partiallyClosePosition.selector,\\n            _positionId,\\n            _amount,\\n            _depositReceiver,\\n            _megaRoutes,\\n            _amountOutMin,\\n            _positionSoldAssetOracleData,\\n            _nativePositionAssetOracleData,\\n            _nativeSoldAssetOracleData,\\n            _pmxSoldAssetOracleData,\\n            _pullOracleData,\\n            _pullOracleTypes\\n        );\\n        Address.functionDelegateCall(positionManagerExtension, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function pause() external override {\\n        _onlyRole(EMERGENCY_ADMIN);\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function unpause() external override {\\n        _onlyRole(SMALL_TIMELOCK_ADMIN);\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external override {\\n        _onlyRole(BATCH_MANAGER_ROLE);\\n        for (uint256 i; i < _length; i++) {\\n            _onlyExist(_ids[i]);\\n            _deletePosition(_ids[i], _bucket, _traders[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getPosition(uint256 _id) external view override returns (PositionLibrary.Position memory) {\\n        _onlyExist(_id);\\n        return positions[positionIndexes[_id]];\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getPositionByIndex(uint256 _index) external view override returns (PositionLibrary.Position memory) {\\n        return positions[_index];\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getAllPositionsLength() external view override returns (uint256) {\\n        return positions.length;\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getTraderPositionsLength(address _trader) external view override returns (uint256) {\\n        return traderPositionIds[_trader].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getBucketPositionsLength(address _bucket) external view override returns (uint256) {\\n        return bucketPositionIds[_bucket].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getPositionDebt(uint256 _id) external view override returns (uint256) {\\n        _onlyExist(_id);\\n        return positions[positionIndexes[_id]].getDebt();\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function isDelistedPosition(uint256 _id) external view override returns (bool) {\\n        _onlyExist(_id);\\n        PositionLibrary.Position storage position = positions[positionIndexes[_id]];\\n        return position.bucket == IBucketV3(address(0)) ? false : position.bucket.isDelisted();\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) public payable override nonReentrant {\\n        _notBlackListed();\\n        LimitOrderLibrary.Condition memory condition;\\n        PositionLibrary.ClosePositionEventData memory posEventData = _closePosition(\\n            _id,\\n            _depositReceiver,\\n            _megaRoutes,\\n            _amountOutMin,\\n            condition,\\n            new bytes(0),\\n            PositionLibrary.CloseReason.CLOSE_BY_TRADER,\\n            0,\\n            _positionSoldAssetOracleData,\\n            new bytes(0),\\n            _pmxSoldAssetOracleData,\\n            _nativeSoldAssetOracleData,\\n            new bytes(0),\\n            _pullOracleData,\\n            _pullOracleTypes\\n        );\\n\\n        emit PositionLibrary.PaidProtocolFee({\\n            positionId: _id,\\n            trader: posEventData.trader,\\n            paymentAsset: posEventData.paymentAsset,\\n            feeRateType: posEventData.feeRateType,\\n            feeInPaymentAsset: posEventData.feeInPaymentAsset,\\n            feeInPmx: posEventData.feeInPmx\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) public view override returns (uint256) {\\n        uint256 oracleTolerableLimit = oracleTolerableLimits[assetA][assetB];\\n        return oracleTolerableLimit > 0 ? oracleTolerableLimit : defaultOracleTolerableLimit;\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) public view override returns (LimitOrderLibrary.Condition memory) {\\n        return closeConditions[_positionId][_index];\\n    }\\n\\n    /**\\n     * @inheritdoc IPositionManagerV2\\n     */\\n    function getCloseConditions(\\n        uint256 _positionId\\n    ) public view override returns (LimitOrderLibrary.Condition[] memory) {\\n        return closeConditions[_positionId];\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPositionManagerV2).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @dev delete position and update indexes (by trader, by bucket)\\n     * can be simplified with EnumerableMap by OpenZeppelin\\n     * @param _id the id of the position to be deleted\\n     * @param _bucket the bucket of the position to be deleted\\n     * @param _trader the trader of the position to be deleted\\n     */\\n    function _deletePosition(uint256 _id, address _bucket, address _trader) internal {\\n        delete closeConditions[_id];\\n\\n        uint256 lastBucketPositionId = bucketPositionIds[_bucket][bucketPositionIds[_bucket].length - 1];\\n        bucketPositionIds[_bucket][bucketPositionIndexes[_id]] = lastBucketPositionId;\\n        bucketPositionIndexes[lastBucketPositionId] = bucketPositionIndexes[_id];\\n        bucketPositionIds[_bucket].pop();\\n        delete bucketPositionIndexes[_id];\\n\\n        uint256 lastTraderPositionId = traderPositionIds[_trader][traderPositionIds[_trader].length - 1];\\n        traderPositionIds[_trader][traderPositionIndexes[_id]] = lastTraderPositionId;\\n        traderPositionIndexes[lastTraderPositionId] = traderPositionIndexes[_id];\\n        traderPositionIds[_trader].pop();\\n        delete traderPositionIndexes[_id];\\n\\n        positions[positionIndexes[_id]] = positions[positions.length - 1];\\n        positionIndexes[positions[positions.length - 1].id] = positionIndexes[_id];\\n        positions.pop();\\n        delete positionIndexes[_id];\\n    }\\n\\n    function _setPositionManagerExtension(address _newPositionManagerExtension) internal {\\n        _require(\\n            IERC165Upgradeable(_newPositionManagerExtension).supportsInterface(\\n                type(IPositionManagerExtension).interfaceId\\n            ),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        positionManagerExtension = _newPositionManagerExtension;\\n        emit ChangePositionManagerExtension(_newPositionManagerExtension);\\n    }\\n\\n    /**\\n     * @notice Close a position.\\n     * @param _id The ID of the position to be closed.\\n     * @param _depositReceiver The address to receive the deposit assets.\\n     * @param _megaRoutes The trading routes to be used for swapping assets.\\n     * @param _amountOutMin The minimum amount of output asset expected from the swaps.\\n     * @param closeCondition The condition that must be satisfied to close the position.\\n     * @param _ccmAdditionalParams Additional parameters for custom closing managers.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function _closePosition(\\n        uint256 _id,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        LimitOrderLibrary.Condition memory closeCondition,\\n        bytes memory _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason,\\n        uint256 _initialGasLeft,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes memory _nativePmxOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes memory _positionNativeAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) internal returns (PositionLibrary.ClosePositionEventData memory) {\\n        _onlyExist(_id);\\n        _require(_depositReceiver != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        priceOracle.updatePullOracle{value: msg.value}(_pullOracleData, _pullOracleTypes);\\n        ClosePositionVars memory vars;\\n        vars.position = positions[positionIndexes[_id]];\\n        vars.borrowedAmountIsNotZero = vars.position.scaledDebtAmount > 0;\\n        // we don't check limit when the close reason is CLOSE_BY_TRADER AND a position is spot\\n        vars.needOracleTolerableLimitCheck =\\n            _closeReason != PositionLibrary.CloseReason.CLOSE_BY_TRADER ||\\n            vars.borrowedAmountIsNotZero;\\n\\n        if (vars.needOracleTolerableLimitCheck) {\\n            vars.oracleTolerableLimit = getOracleTolerableLimit(vars.position.positionAsset, vars.position.soldAsset);\\n            if (registry.hasRole(TRUSTED_TOLERABLE_LIMIT_ROLE, msg.sender)) {\\n                vars.oracleTolerableLimit = vars.oracleTolerableLimit.wmul(oracleTolerableLimitMultiplier);\\n            }\\n        }\\n        PositionLibrary.ClosePositionParams memory _params = PositionLibrary.ClosePositionParams({\\n            closeAmount: vars.position.positionAmount,\\n            depositDecrease: vars.position.depositAmountInSoldAsset,\\n            scaledDebtAmount: vars.position.scaledDebtAmount,\\n            depositReceiver: _depositReceiver,\\n            megaRoutes: _megaRoutes,\\n            amountOutMin: _amountOutMin,\\n            oracleTolerableLimit: vars.oracleTolerableLimit,\\n            primexDNS: primexDNS,\\n            priceOracle: priceOracle,\\n            traderBalanceVault: traderBalanceVault,\\n            closeCondition: closeCondition,\\n            ccmAdditionalParams: _ccmAdditionalParams,\\n            borrowedAmountIsNotZero: vars.borrowedAmountIsNotZero,\\n            pairPriceDrop: priceOracle.getPairPriceDrop(vars.position.positionAsset, vars.position.soldAsset),\\n            securityBuffer: securityBuffer,\\n            needOracleTolerableLimitCheck: vars.needOracleTolerableLimitCheck,\\n            initialGasLeft: _initialGasLeft,\\n            keeperRewardDistributor: address(keeperRewardDistributor),\\n            positionSoldAssetOracleData: _positionSoldAssetOracleData,\\n            pmxSoldAssetOracleData: _pmxSoldAssetOracleData,\\n            nativeSoldAssetOracleData: _nativeSoldAssetOracleData\\n        });\\n        PositionLibrary.ClosePositionEventData memory posEventData = vars.position.closePosition(_params, _closeReason);\\n\\n        _deletePosition(_id, address(vars.position.bucket), vars.position.trader);\\n        if (\\n            _closeReason != PositionLibrary.CloseReason.CLOSE_BY_TRADER &&\\n            vars.position.updatedConditionsAt != block.timestamp\\n        ) {\\n            // to avoid abuse of the reward system, we will not pay the reward to\\n            // the keeper if the position open in the same block as the open conditions change\\n            keeperRewardDistributor.updateReward(\\n                IKeeperRewardDistributorV3.UpdateRewardParams({\\n                    keeper: _depositReceiver,\\n                    positionAsset: vars.position.positionAsset,\\n                    positionSize: vars.position.positionAmount,\\n                    action: posEventData.actionType,\\n                    numberOfActions: 1,\\n                    gasSpent: _initialGasLeft - gasleft(),\\n                    decreasingCounter: new uint256[](0),\\n                    routesLength: abi.encode(_megaRoutes).length,\\n                    nativePmxOracleData: _nativePmxOracleData,\\n                    positionNativeAssetOracleData: _positionNativeAssetOracleData\\n                })\\n            );\\n        }\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param _role The role identifier to check.\\n     */\\n    function _onlyRole(bytes32 _role) internal view {\\n        _require(registry.hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the sender is not blacklisted.\\n     */\\n    function _notBlackListed() internal view {\\n        _require(!whiteBlackList.isBlackListed(msg.sender), Errors.SENDER_IS_BLACKLISTED.selector);\\n    }\\n\\n    /**\\n     * @dev Modifier to check if a position exists.\\n     * @param _id The ID of the position to check.\\n     */\\n    function _onlyExist(uint256 _id) internal view {\\n        _require(\\n            positions.length > 0 && _id == positions[positionIndexes[_id]].id,\\n            Errors.POSITION_DOES_NOT_EXIST.selector\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9caeaae9da956e53034792a56f62e34101ff26d579cc6a6304c3219b2f038645\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/PositionManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport {IPositionManagerStorage, IPositionManagerStorageV2} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {ISpotTradingRewardDistributorV2} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\n\\nabstract contract PositionManagerStorage is\\n    IPositionManagerStorage,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    ERC165Upgradeable\\n{\\n    // Mapping from asset sell to mapping of asset buy with max amount in asset buy\\n    mapping(address => mapping(address => uint256)) public override maxPositionSize;\\n\\n    //The oracleTolerableLimit is the percentage by which a deviation from the oracle price is allowed.\\n    //This means that the dex amount out must be greater than oracle amount out * (100% - oracleTolerableLimit)\\n    //Specified in the WAD format: 1e17 = 10%, 1e18 = 100% and so on\\n\\n    //The defaultOracleTolerableLimit this is the oracleTolerableLimit that is returned when there is\\n    //no set the oracleTolerableLimit for a specific pair of asset\\n    uint256 public override defaultOracleTolerableLimit;\\n\\n    // Buffer security parameter, which characterizes additional price drop, occurs due to some unexpected events\\n    // Specified in the WAD format: 1e17 = 0.1, 5e17 = 0.5 and so on\\n    uint256 public override securityBuffer;\\n\\n    // Additional parameter is needed to avoid immediate liquidation when Trader choses maximal leverage.\\n    // Specified in the WAD format, 0 < maintenanceBuffer < 1e18\\n    uint256 public override maintenanceBuffer;\\n\\n    // Mapping from asset A to mapping of asset B with the oracleTolerableLimit\\n    mapping(address => mapping(address => uint256)) internal oracleTolerableLimits;\\n\\n    uint256 public oracleTolerableLimitMultiplier;\\n\\n    PositionLibrary.Position[] internal positions;\\n    uint256 public override positionsId;\\n    // mapping from trader address to the position ids array\\n    mapping(address => uint256[]) public override traderPositionIds;\\n    // mapping from bucket address to the position ids array\\n    mapping(address => uint256[]) public override bucketPositionIds;\\n    // mapping from position to close conditions\\n    mapping(uint256 => LimitOrderLibrary.Condition[]) internal closeConditions;\\n\\n    IAccessControl public override registry;\\n    ITraderBalanceVault public override traderBalanceVault;\\n    IPrimexDNSV3 public override primexDNS;\\n    IPriceOracleV2 public override priceOracle;\\n    IKeeperRewardDistributorV3 public override keeperRewardDistributor;\\n    ISpotTradingRewardDistributorV2 public override spotTradingRewardDistributor;\\n\\n    // minimum position size allowed\\n    uint256 public override minPositionSize;\\n    // ERC20 token for minimum position size\\n    address public override minPositionAsset;\\n\\n    // mapping from positionId to the index in the positions array\\n    mapping(uint256 => uint256) internal positionIndexes;\\n    // mapping from positionId to the index in the traderPositionIds[trader] array\\n    //NOTE: positionId is unique for all traders hence we can put everything in one mapping\\n    mapping(uint256 => uint256) internal traderPositionIndexes;\\n    // mapping from positionId to the index in the bucketPositionIds[bucket] array\\n    mapping(uint256 => uint256) internal bucketPositionIndexes;\\n    IWhiteBlackList internal whiteBlackList;\\n}\\n\\nabstract contract PositionManagerStorageV2 is IPositionManagerStorageV2, PositionManagerStorage {\\n    address public override positionManagerExtension;\\n}\\n\",\"keccak256\":\"0x3f990750f57687a6c790dec0069705c9bc7764b95d32eebd0ef00dc911013dcf\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa06035e07986c71922230772c7855e2ad6d404f949a2233b61a65c086735fb80\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc45289c8f39e7c6dc4b18d04faf98c6b0400995f8a1954d9e6cffb2fe83746ef\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV3} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNSV3 is IPrimexDNSStorageV3 {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    event ChangeProtocolFeeRate(FeeRateType indexed feeRateType, uint256 indexed feeRate);\\n    event ChangeAverageGasPerAction(TradingOrderType indexed tradingOrderType, uint256 indexed averageGasPerAction);\\n    event ChangeMaxProtocolFee(uint256 indexed maxProtocolFee);\\n    event ChangeProtocolFeeCoefficient(uint256 indexed protocolFeeCoefficient);\\n    event ChangeLiquidationGasAmount(uint256 indexed liquidationGasAmount);\\n    event ChangePmxDiscountMultiplier(uint256 indexed pmxDiscountMultiplier);\\n    event ChangeAdditionalGasSpent(uint256 indexed additionalGasSpent);\\n    event ChangeGasPriceBuffer(uint256 indexed gasPriceBuffer);\\n    event ChangeMinFeeRestrictions(CallingMethod indexed callingMethod, MinFeeRestrictions minFeeRestrictions);\\n    event ChangeLeverageTolerance(uint256 leverageTolerance);\\n\\n    /**\\n     * @param feeRateType The order type for which the rate is set\\n     * @param feeRate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        FeeRateType feeRateType;\\n        uint256 feeRate;\\n    }\\n\\n    struct AverageGasPerActionParams {\\n        TradingOrderType tradingOrderType;\\n        uint256 averageGasPerAction;\\n    }\\n\\n    /**\\n     * @dev Params for initialize() function\\n     * @param registry The address of the PrimexRegistry contract.\\n     * @param pmx The address of the PMX token contract.\\n     * @param treasury The address of the Treasury contract.\\n     * @param delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param feeRateParams An array of structs to set protocol fee rate on the corresponding\\n     * @param averageGasPerActionParams An array of structs to set average amount of gas spent by Keeper on the corresponding action\\n     * @param maxProtocolFee MaxProtocolFee that can be charged. Measured in NATIVE_CURRENCY\\n     * @param liquidationGasAmount Average gas amount spent for a single liquidation, measured in wei.\\n     * @param protocolFeeCoefficient Additional coefficient to calculate minProtocolFee, measured in wei.\\n     * @param additionalGasSpent Gas that will be additionally spend after gasSpent calculation.\\n     * @param pmxDiscountMultiplier Multiplier for PMX discount calculation\\n     * @param gasPriceBuffer Multiplier which protects position from immediate liquidation after gas price changed\\n     */\\n    struct InitParams {\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        uint256 delistingDelay;\\n        uint256 adminWithdrawalDelay;\\n        FeeRateParams[] feeRateParams;\\n        AverageGasPerActionParams[] averageGasPerActionParams;\\n        uint256 maxProtocolFee;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 pmxDiscountMultiplier;\\n        uint256 gasPriceBuffer;\\n        uint256 leverageTolerance;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @notice Set min protocol fee restrictions for different calling method.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setMinFeeRestrictions(\\n        CallingMethod _callingMethod,\\n        MinFeeRestrictions calldata _minFeeRestrictions\\n    ) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Set the protocol fee rate for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeRate(FeeRateParams calldata _feeRateType) external;\\n\\n    /**\\n     * @notice Set average gas amount of gas spent by Keeper on the corresponding action.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAverageGasPerAction(AverageGasPerActionParams calldata _averageGasPerActionParams) external;\\n\\n    /**\\n     * @notice Set the max protocol fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _maxProtocolFee The new max protocol fee.\\n     */\\n    function setMaxProtocolFee(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set protocol fee coefficient. Used to calculate the minProtocol fee\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeCoefficient(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set liquidation gas amount (average gas amount spent for a single liquidation).\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLiquidationGasAmount(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set pmxDiscountMultiplier.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     */\\n    function setPmxDiscountMultiplier(uint256 _pmxDiscountMultiplier) external;\\n\\n    /**\\n     * @notice Set new additionalGas. Used to calculate the minProtocol fee\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAdditionalGasSpent(uint256 _additionalGasSpent) external;\\n\\n    /**\\n     * @notice Set new gasPriceBuffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setGasPriceBuffer(uint256 _gasPriceBuffer) external;\\n\\n    /**\\n     * @notice Set new leverageTolerance.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLeverageTolerance(uint256 _leverageTolerance) external;\\n\\n    /**\\n     * @notice Retrieves pmx, treasury, feeRateType, maxProtocolFee, pmxDiscountMultiplier\\n     */\\n    function getPrimexDNSParams(\\n        FeeRateType _feeRateType\\n    ) external view returns (address, address, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves liquidationGasAmount, protocolFeeCoefficient, additionalGasSpent, maxGasAmount and baseLength\\n     */\\n    function getParamsForMinProtocolFee(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength, averageGasPerAction, protocolFeeCoefficient and gasPriceBuffer\\n     */\\n    function getParamsForMinPositionSize(\\n        TradingOrderType _tradingOrderType\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength for L2 chain payment model depending from tradingOrderType\\n     */\\n    function getL1BaseLengthForTradingOrderType(TradingOrderType _tradingOrderType) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0x5e500a2a8ba04df74e7f510ea09676b3541b1c16b818022bba0cabad6ab9b9c2\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\\ninterface IPrimexDNSStorageV3 is IPrimexDNSStorageV2 {\\n    enum FeeRateType {\\n        MarginPositionClosedByTrader,\\n        SpotPositionClosedByTrader,\\n        MarginPositionClosedByKeeper,\\n        SpotPositionClosedByKeeper,\\n        MarginLimitOrderExecuted,\\n        SpotLimitOrderExecuted,\\n        SwapLimitOrderExecuted,\\n        SwapMarketOrder\\n    }\\n\\n    enum TradingOrderType {\\n        MarginMarketOrder,\\n        SpotMarketOrder,\\n        MarginLimitOrder,\\n        MarginLimitOrderDepositInThirdAsset,\\n        SpotLimitOrder,\\n        SwapLimitOrder\\n    }\\n\\n    enum CallingMethod {\\n        OpenPositionByOrder,\\n        ClosePositionByCondition\\n    }\\n    struct MinFeeRestrictions {\\n        uint256 maxGasAmount;\\n        uint256 baseLength;\\n    }\\n\\n    function protocolFeeRates(FeeRateType _feeRateType) external view returns (uint256);\\n\\n    function averageGasPerAction(TradingOrderType _tradingOrderType) external view returns (uint256);\\n\\n    function minFeeRestrictions(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256 maxGasAmount, uint256 baseLength);\\n\\n    function maxProtocolFee() external view returns (uint256);\\n\\n    function protocolFeeCoefficient() external view returns (uint256);\\n\\n    function liquidationGasAmount() external view returns (uint256);\\n\\n    function additionalGasSpent() external view returns (uint256);\\n\\n    function pmxDiscountMultiplier() external view returns (uint256);\\n\\n    function gasPriceBuffer() external view returns (uint256);\\n\\n    function leverageTolerance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa88f81229c920c8523e707f01e95516c26ebba3a7020463d215ed141f1727544\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNSV3 dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucketV3 bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0xddae0dbd32d6082d11bb5d6205847b9b919badc8b775584c4a1b7774541f9d5e\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2817b7fb7470ca4af938ffe1485caa0b96dd22ac399d22c463f15efd9d6484cc\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributorV2 is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(\\n        address trader,\\n        address positionAsset,\\n        uint256 positionAmount,\\n        bytes calldata positionUsdOracleDataoracleData\\n    ) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0x72645c477fa1dd8d809814cab55a09daef3d0171df99dc95205e134f1b40cf7c\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe6dc6a5ae48f0cacf886e84c42238f9c7cff42dd4e0e11dd35124ff79bfb87bd\",\"license\":\"BUSL-1.1\"},\"contracts/SwapManager/ISwapManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n    event PaidProtocolFee(\\n        address indexed trader,\\n        address indexed boughtAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPositionAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bytes tokenAtokenBOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @param depositAsset The address of the deposited asset.\\n     * @param positionAsset The address of the position asset.\\n     * @param depositAmount Amount of tokens in a deposit asset.\\n     * @param megaRoutes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param trader The trader address, who has created the order.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param keeperRewardDistributor The address of KeeperRewardDistributor contract.\\n     * @param gasSpent Gas spent on executing transaction.\\n     */\\n    struct SwapInLimitOrderParams {\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 depositAmount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address trader;\\n        uint256 deadline;\\n        address feeToken;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bytes depositPositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     */\\n    function initialize(address _registry) external;\\n\\n    /**\\n     * @notice Re-initializes the contract with the specified parameters.\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initializeAfterUpgrade(\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param params The SwapInLimitOrderParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @return The resulting amount after the swap and feeInPositionAsset.\\n     */\\n    function swapInLimitOrder(\\n        SwapInLimitOrderParams calldata params,\\n        uint256 maximumOracleTolerableLimit\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xd37aefb58f805f2e97681c83ca409569fe2551ddb3716c8fb9e5e94739a95dac\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x86843a23a40801c8f71455f2d993730976d318579ca0ee83d8377b802d51db2f\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xc0579c182c55abcfcda0e8092e30b04b13e8a8700d0c92914d086fe482673dec\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x785da3d3b2de11abd60ed414f778047d6b216232dbbe6e06d4c1e907805aac85\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `approve` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     */\\n    function approve(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd8ed07c2eb87e6e0e774ef1a92e62e6a3bf1e99d1a3cd365efc21011843688a9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc1b4d9a1792ea41bae949d409e212722349967a0bd1af18eaa95cb10867f9358\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xcc5d4576d24044a7f45c85b33350a0383fd899aa5a5be1089f2777b1114c0f66\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap, // 6\\n        Paraswap, //7\\n        Enso //8\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n    }\\n\\n    struct MegaSwapVars {\\n        uint256 sumOfShares;\\n        uint256 amountOnMegaRoute;\\n        uint256 totalAmount;\\n        uint256 remainder;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external payable returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Path structs\\n     * @param tokenIn source token\\n     * @param tokenOut destination token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param paths Array of Path structs\\n     */\\n    function performPathsSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external payable returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountOut calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsOutByPaths(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountsIn calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amount in the destination token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsInByPaths(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice perform swap of ERC20 tokens by MegaRoute structs\\n     * @param _params MegaSwapParams struct\\n     */\\n    function performMegaRoutesSwap(\\n        PrimexPricingLibrary.MegaSwapParams calldata _params\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Route structs\\n     * @param tokenIn source token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param routes Array of Route structs\\n     */\\n    function performRoutesSwap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external payable returns (uint256);\\n\\n    /**\\n    @notice Performs chained getAmountsOut calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsOutByRoutes(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsOut calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountOutByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained  getAmountsIn calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amountin the destination token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsInByRoutes(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsIn calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountInByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice  Initializes the DexAdapter contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     */\\n    function initialize(address _primexDNS) external;\\n}\\n\",\"keccak256\":\"0x07ae2fa31b315ebbddf4cc3d6f2f700b1e49a704de17b42bf1e2f3875a1ce440\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0xaffa1ce1d9ea17874bd325829c32f6313ac98f1fc1b15a1e0f739aed02caea3c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee overhead.\\n    /// @return Current fee overhead.\\n    function overhead() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c38a19fdde45c93a9469ae3d09a03aba4b08ebce84400b91b41f5d6914a52b2\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param _stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 _stopLossPrice,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Initializes the TakeProfitStopLossCCM contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     */\\n    function initialize(address _primexDNS, address _priceOracle) external;\\n}\\n\",\"keccak256\":\"0xc7e14c2e085662f84b2ba41f2918a7722ffcf8d58891e6086add249b65b3ea8d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xbfe602662763db3d67993fe2d667086526dbed94a52a0ca931a712f47e611507\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xa27a21ef0c8beef0855a9ecd5f3ca42833fea9f5123562a3b390169f2c139ca2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n}\\n\",\"keccak256\":\"0xac9099b4f5761f6659cdf1d32009ffd8b53cb1e2ac60df6596ab1ac90dd33a88\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucketV3 bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n        bytes nativeDepositAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucketV3 bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        bool isThirdAsset;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetMegaRoutes routes to swap first asset\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        address keeper;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        uint256 borrowedAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bytes nativeDepositOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     * @param _primexDNS The instance of the PrimexDNS contract\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage, IPrimexDNSV3 _primexDNS) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage <\\n                _order.bucket.maxAssetLeverage(\\n                    _order.positionAsset,\\n                    _primexDNS.protocolFeeRates(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted)\\n                ),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            vars.tradingOrderType = _params.shouldOpenPosition\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SwapLimitOrder;\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucketV3(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage <\\n                    vars.bucket.maxAssetLeverage(\\n                        _params.positionAsset,\\n                        primexDNS.protocolFeeRates(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted)\\n                    ),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n            vars.isThirdAsset =\\n                _params.depositAsset != address(vars.bucket.borrowedAsset()) &&\\n                _params.depositAsset != _params.positionAsset;\\n            vars.tradingOrderType = vars.isThirdAsset\\n                ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucketV3(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : _params.positionAsset,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle,\\n            pm.keeperRewardDistributor(),\\n            primexDNS,\\n            vars.tradingOrderType,\\n            _params.nativeDepositAssetOracleData\\n        );\\n\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        ISwapManager swapManager,\\n        uint256 _initialGasLeft\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.protocolFee != 0) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: order.trader,\\n                    asset: order.feeToken,\\n                    amount: order.protocolFee\\n                })\\n            );\\n            order.protocolFee = 0;\\n            order.feeToken = order.positionAsset;\\n        }\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate, vars.feeInPositionAsset) = pm\\n                .openPositionByOrder(\\n                    OpenPositionByOrderParams({\\n                        sender: msg.sender,\\n                        order: order,\\n                        closeConditions: _closeConditions,\\n                        firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n                        depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n                        firstAssetOracleData: _params.firstAssetOracleData,\\n                        thirdAssetOracleData: _params.thirdAssetOracleData,\\n                        depositSoldAssetOracleData: _params.depositSoldAssetOracleData,\\n                        positionUsdOracleData: _params.positionUsdOracleData,\\n                        nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n                        pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                        nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData,\\n                        borrowedAmount: _params.borrowedAmount\\n                    })\\n                );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            (vars.amountOut, vars.feeInPositionAsset) = swapManager.swapInLimitOrder(\\n                ISwapManager.SwapInLimitOrderParams({\\n                    depositAsset: order.depositAsset,\\n                    positionAsset: order.positionAsset,\\n                    depositAmount: order.depositAmount,\\n                    megaRoutes: _params.firstAssetMegaRoutes,\\n                    trader: order.trader,\\n                    deadline: order.deadline,\\n                    feeToken: order.feeToken,\\n                    keeperRewardDistributor: address(pm.keeperRewardDistributor()),\\n                    gasSpent: _initialGasLeft - gasleft(),\\n                    depositPositionAssetOracleData: _params.firstAssetOracleData,\\n                    pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                    nativePositionAssetOracleData: _params.nativePositionAssetOracleData\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset)\\n            );\\n\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(\\n                    (vars.amountOut + vars.feeInPositionAsset) * multiplierPositionAsset\\n                ) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8f8ed0eb794a53c1a41a5159b5fd271d590fdc0757b11d7d1e205ae2fe8b4a7a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    event PaidProtocolFee(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address paymentAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPaymentAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, utilized for the feeToken address\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucketV3 bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct ClosePositionVars {\\n        address payable dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n        uint256 gasSpent;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        uint256 amountOutAfterFee;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n        address trader;\\n        address paymentAsset;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        uint256 feeInPaymentAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool byOrder;\\n        uint256 orderLeverage;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address payable dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        uint256 positionAmountAfterFeeInSoldAsset;\\n        uint256 borrowedAmountInPositionAsset;\\n        uint256 leverage;\\n        uint256 multiplierBorrowedAsset;\\n        uint256 multiplierPositionAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 maxPositionSize;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    megaRoutes: params.megaRoutes,\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                payable(params.primexDNS.dexAdapter()),\\n                address(params.priceOracle),\\n                false,\\n                new bytes(0)\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucketV3(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        uint256 feeInPaymentAsset = decodeFeeTokenAddress(position.extraParams) == address(0)\\n            ? 0\\n            : PrimexPricingLibrary.calculateFeeInPaymentAsset(\\n                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                    primexDNS: params.primexDNS,\\n                    priceOracle: address(params.priceOracle),\\n                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                    paymentAsset: position.soldAsset,\\n                    paymentAmount: params.amount,\\n                    keeperRewardDistributor: params.keeperRewardDistributor,\\n                    gasSpent: 0,\\n                    isFeeProhibitedInPmx: true,\\n                    nativePaymentAssetOracleData: params.nativeSoldAssetOracleData\\n                })\\n            );\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit,\\n                feeInPaymentAsset,\\n                params.positionSoldAssetOracleData\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = payable(params.primexDNS.dexAdapter());\\n\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                megaRoutes: params.megaRoutes,\\n                receiver: address(this),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            vars.dexAdapter,\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck,\\n            params.positionSoldAssetOracleData\\n        );\\n\\n        posEventData.paymentAsset = decodeFeeTokenAddress(position.extraParams);\\n\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader;\\n            vars.gasSpent = 0;\\n        } else {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper;\\n            vars.gasSpent = params.initialGasLeft - gasleft();\\n        }\\n\\n        (posEventData.feeInPaymentAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                feeToken: posEventData.paymentAsset,\\n                trader: position.trader,\\n                priceOracle: address(params.priceOracle),\\n                feeRateType: posEventData.feeRateType,\\n                traderBalanceVault: params.traderBalanceVault,\\n                swapManager: address(0),\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                primexDNS: params.primexDNS,\\n                paymentAsset: position.soldAsset,\\n                paymentAmount: posEventData.amountOut,\\n                gasSpent: vars.gasSpent,\\n                isFeeProhibitedInPmx: reason == CloseReason.RISKY_POSITION,\\n                pmxPaymentAssetOracleData: params.pmxSoldAssetOracleData,\\n                nativePaymentAssetOracleData: params.nativeSoldAssetOracleData\\n            })\\n        );\\n\\n        posEventData.amountOutAfterFee = posEventData.amountOut - posEventData.feeInPaymentAsset;\\n\\n        TokenTransfersLibrary.doTransferOut({\\n            token: position.soldAsset,\\n            to: params.borrowedAmountIsNotZero ? address(position.bucket) : address(params.traderBalanceVault),\\n            amount: posEventData.amountOutAfterFee\\n        });\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit,\\n                    posEventData.feeInPaymentAsset,\\n                    params.positionSoldAssetOracleData\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut,\\n                params.positionSoldAssetOracleData\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucketV3(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        if (posEventData.amountOutAfterFee > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOutAfterFee - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                vars.permanentLoss = posEventData.debtAmount - posEventData.amountOutAfterFee;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                vars.permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOutAfterFee,\\n                reason: _reason\\n            });\\n        }\\n        posEventData.trader = position.trader;\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum position size between two tokens.\\n     * @param maxPositionSize The storage mapping for maximum position sizes.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param amountInToken0 The maximum position size in token0.\\n     * @param amountInToken1 The maximum position size in token1.\\n     */\\n    function setMaxPositionSize(\\n        mapping(address => mapping(address => uint256)) storage maxPositionSize,\\n        address token0,\\n        address token1,\\n        uint256 amountInToken0,\\n        uint256 amountInToken1\\n    ) public {\\n        _require(token0 != address(0) && token1 != address(0), Errors.TOKEN_ADDRESS_IS_ZERO.selector);\\n        _require(token0 != token1, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n\\n        maxPositionSize[token1][token0] = amountInToken0;\\n        maxPositionSize[token0][token1] = amountInToken1;\\n    }\\n\\n    /**\\n     * @dev Sets the tolerable limit for an oracle between two assets.\\n     * @param oracleTolerableLimits The mapping to store oracle tolerable limits.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The percentage tolerable limit for the oracle in WAD format (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(\\n        mapping(address => mapping(address => uint256)) storage oracleTolerableLimits,\\n        address assetA,\\n        address assetB,\\n        uint256 percent\\n    ) public {\\n        _require(assetA != address(0) && assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(assetA != assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        _require(percent <= WadRayMath.WAD && percent > 0, Errors.INVALID_PERCENT_NUMBER.selector);\\n        oracleTolerableLimits[assetA][assetB] = percent;\\n        oracleTolerableLimits[assetB][assetA] = percent;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        OpenPositionLocalData memory data;\\n        if (_vars.isSpot) {\\n            data.tradingOrderType = _vars.byOrder\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SpotMarketOrder;\\n        } else {\\n            if (_vars.byOrder) {\\n                data.tradingOrderType = _vars.isThirdAsset\\n                    ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                    : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n            } else {\\n                data.tradingOrderType = IPrimexDNSStorageV3.TradingOrderType.MarginMarketOrder;\\n            }\\n        }\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle),\\n            IKeeperRewardDistributorV3(_pmParams.keeperRewardDistributor),\\n            _pmParams.primexDNS,\\n            data.tradingOrderType,\\n            _vars.nativeSoldAssetOracleData\\n        );\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = payable(_pmParams.primexDNS.dexAdapter());\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    megaRoutes: _vars.depositInThirdAssetMegaRoutes,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                data.dexAdapter,\\n                address(_pmParams.priceOracle),\\n                true,\\n                _vars.thirdAssetOracleData\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        data.borrowedAmountInPositionAsset = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                megaRoutes: _vars.firstAssetMegaRoutes,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            data.dexAdapter,\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck,\\n            _vars.firstAssetOracleData\\n        );\\n        _position.positionAmount += data.borrowedAmountInPositionAsset;\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        if (_vars.byOrder) {\\n            posEventData.feeRateType = data.isSpot\\n                ? IPrimexDNSStorageV3.FeeRateType.SpotLimitOrderExecuted\\n                : IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted;\\n            (posEventData.feeInPositionAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    feeToken: decodeFeeTokenAddress(_position.extraParams),\\n                    trader: _position.trader,\\n                    priceOracle: address(_pmParams.priceOracle),\\n                    feeRateType: posEventData.feeRateType,\\n                    traderBalanceVault: _pmParams.traderBalanceVault,\\n                    swapManager: address(0),\\n                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                    primexDNS: _pmParams.primexDNS,\\n                    paymentAsset: _position.positionAsset,\\n                    paymentAmount: _position.positionAmount,\\n                    gasSpent: _pmParams.initialGasLeft - gasleft(),\\n                    isFeeProhibitedInPmx: false,\\n                    pmxPaymentAssetOracleData: _vars.pmxPositionAssetOracleData,\\n                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData\\n                })\\n            );\\n            _position.positionAmount -= posEventData.feeInPositionAsset;\\n        }\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        data.leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                data.positionAmountAfterFeeInSoldAsset =\\n                    (data.amountToTransfer * _position.positionAmount) /\\n                    (_position.positionAmount + posEventData.feeInPositionAsset);\\n                _require(\\n                    data.positionAmountAfterFeeInSoldAsset > _vars.borrowedAmount,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = data.positionAmountAfterFeeInSoldAsset.wdiv(\\n                    data.positionAmountAfterFeeInSoldAsset - _vars.borrowedAmount\\n                );\\n            } else {\\n                _require(\\n                    data.depositInPositionAsset > posEventData.feeInPositionAsset,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = _position.positionAmount.wdiv(\\n                    data.depositInPositionAsset - posEventData.feeInPositionAsset\\n                );\\n            }\\n\\n            // to avoid stack to deep\\n            data.positionAsset = _position.positionAsset;\\n            data.positionAmount = _position.positionAmount;\\n            // protocolFee calculated in position Asset\\n            _require(\\n                data.leverage <=\\n                    _position.bucket.maxAssetLeverage(\\n                        _position.positionAsset,\\n                        PrimexPricingLibrary\\n                            .calculateFeeInPaymentAsset(\\n                                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                                    primexDNS: _pmParams.primexDNS,\\n                                    priceOracle: address(_pmParams.priceOracle),\\n                                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                                    paymentAsset: data.positionAsset,\\n                                    paymentAmount: data.positionAmount,\\n                                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                                    gasSpent: 0,\\n                                    isFeeProhibitedInPmx: true,\\n                                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData\\n                                })\\n                            )\\n                            .wdiv(data.positionAmount)\\n                    ),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n            if (_vars.byOrder) {\\n                uint256 leverageTolerance = _pmParams.primexDNS.leverageTolerance();\\n                _require(\\n                    data.leverage <= _vars.orderLeverage.wmul(WadRayMath.WAD + leverageTolerance) &&\\n                        data.leverage >= _vars.orderLeverage.wmul(WadRayMath.WAD - leverageTolerance),\\n                    Errors.LEVERAGE_TOLERANCE_EXCEEDED.selector\\n                );\\n            }\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = data.leverage;\\n        }\\n\\n        data.multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        data.multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * data.multiplierBorrowedAsset).wdiv(\\n                (_position.positionAmount + posEventData.feeInPositionAsset) * data.multiplierPositionAsset\\n            ) /\\n            data.multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmountInBorrowedAsset) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracleV2 priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 feeInPaymentAsset,\\n        bytes memory positionSoldAssetOracleData\\n    ) public returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle),\\n                    positionSoldAssetOracleData\\n                ) - feeInPaymentAsset,\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNSV3 primexDNS,\\n        IPriceOracleV2 priceOracle\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.marginParams.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            byOrder: false,\\n            orderLeverage: 0,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0,\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucketV3(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n        }\\n        address feeToken = _params.isProtocolFeeInPmx ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracleV2 priceOracle,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            borrowedAmount: _params.borrowedAmount,\\n            amountOutMin: 0,\\n            orderLeverage: _params.order.leverage,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: address(_params.order.bucket) != address(0),\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n            if (_params.order.depositAsset == position.soldAsset) {\\n                _require(\\n                    vars.borrowedAmount == _params.order.depositAmount.wmul(_params.order.leverage - WadRayMath.WAD),\\n                    Errors.INCORRECT_BORROWED_AMOUNT.selector\\n                );\\n            }\\n        }\\n        address feeToken = _params.order.feeToken == primexDNS.pmx() ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Decodes a fee token address from the provided encoded data.\\n     * @param data The encoded data containing the fee token address.\\n     * @return The decoded fee token address.\\n     */\\n    function decodeFeeTokenAddress(bytes memory data) public pure returns (address) {\\n        // Check if there is data in the bytes extraParams\\n        if (data.length == 0) {\\n            // If there is no data, return address(0)\\n            return address(0);\\n        } else {\\n            // Decode the data into an address and return the result\\n            return abi.decode(data, (address));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param positionAmountInBorrowedAsset The position size in borrow asset.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 positionAmountInBorrowedAsset,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(positionAmountInBorrowedAsset)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0x5e63e75da53b90a5799f43a8de5c67483c39362902d9819e644eb6e02dbc6ca0\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER, ARB_NITRO_ORACLE, OVM_GASPRICEORACLE, GAS_FOR_BYTE, TRANSACTION_METADATA_BYTES} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {IPriceOracleStorageV2} from \\\"../PriceOracle/IPriceOracleStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    /**\\n     * @param dexName The name of the DEX.\\n     * @param shares the share that will be allocated from the total amount for the route\\n     * @param payload payload data encoded in bytes\\n     */\\n\\n    struct Path {\\n        string dexName;\\n        uint256 shares;\\n        bytes payload;\\n    }\\n\\n    /**\\n     * @param to the destination token of the route\\n     * @param paths path array through which the swap will be made up to the destination token this the route\\n     */\\n\\n    struct Route {\\n        address to;\\n        Path[] paths;\\n    }\\n\\n    /**\\n     * @param shares the share that will be allocated from the total amount for this MegaRoute\\n     * @param routes array of routes through which the swap will be made up to TokenB\\n     */\\n    struct MegaRoute {\\n        uint256 shares;\\n        Route[] routes;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        MegaRoute[] megaRoutes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct DepositData {\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param feeToken An asset in which the fee will be paid.\\n     * @param trader The trader address\\n     * @param priceOracle PriceOracle contract address\\n     * @param orderType Type of possible order in Primex protocol\\n     * @param traderBalanceVault TraderBalanceVault contract address\\n     * @param primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        address feeToken;\\n        address trader;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address swapManager;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes pmxPaymentAssetOracleData;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    struct ProtocolFeeParamsBatchClose {\\n        uint256 numberOfPositions;\\n        address[] feeTokens;\\n        address[] traders;\\n        uint256[] paymentAmounts;\\n        address paymentAsset;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        uint256 estimatedGasAmount;\\n        bool isFeeProhibitedInPmx;\\n        uint256 estimatedBaseLength;\\n        bytes nativePaymentAssetOracleData;\\n        bytes pmxPaymentAssetOracleData;\\n    }\\n\\n    struct CalculateFeeInPaymentAssetParams {\\n        IPrimexDNSV3 primexDNS;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    struct MinProtocolFeeParams {\\n        uint256 restrictedGasSpent;\\n        address paymentAsset;\\n        address priceOracle;\\n        IKeeperRewardDistributorV3 keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        bool isFeeProhibitedInPmx;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        address pmx;\\n        address treasury;\\n        uint256 feeInPaymentAssetWithDiscount;\\n        uint256 pmxTraderBalance;\\n        uint256 pmxTraderBalanceInPaymentAsset;\\n        uint256 pmxDiscountMultiplier;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetVars function\\n     */\\n    struct FeeInPaymentAssetVars {\\n        uint256 protocolFeeRate;\\n        uint256 maxProtocolFee;\\n        uint256 feeInPaymentAsset;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    /**\\n     * The struct for minProtocolFee function\\n     */\\n    struct MinProtocolFeeVars {\\n        uint256 maxGasAmount;\\n        uint256 restrictedGasPrice;\\n        uint256 l1CostWei;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 minProtocolFeeInNativeAsset;\\n        uint256 totalGasSpent;\\n        uint256 baseLength;\\n        uint256 optimisticGasCoefficient;\\n        IPrimexDNSStorageV3.CallingMethod callingMethod;\\n        IKeeperRewardDistributorStorage.PaymentModel paymentModel;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetBatchClose function\\n     */\\n    struct CalculateFeeInPaymentAssetBatchCloseVars {\\n        uint256[] feeInPaymentAsset;\\n        uint256 protocolFeeRate;\\n        uint256 maxProtocolFee;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    /**\\n     * The struct for calculateRestrictedGasPrice function\\n     */\\n    struct RestrictedGasPriceVars {\\n        int256 oracleGasPrice;\\n        uint256 maxGasPrice;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucketV3 bucket;\\n        IPositionManagerV2 positionManager;\\n        IPriceOracleV2 priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address payable dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        IDexAdapter.AmountParams calldata _params,\\n        bool _isThirdAsset,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.megaRoutes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = IDexAdapter(_dexAdapter).getAmountOutByMegaRoutes(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle,\\n                _oracleData\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _dexAdapter The address of the Dex adapter contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function megaSwap(\\n        MegaSwapParams calldata _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        uint256 balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        IDexAdapter(_dexAdapter).performMegaRoutesSwap(_params);\\n\\n        balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle, _oracleData)\\n                        .wmul(WadRayMath.WAD - _maximumOracleTolerableLimit),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return feeInPaymentAsset The amount of the protocol fee in a payment asset\\n     * (position asset for the limit order execution, sold asset when the position is closed.)\\n     * @return feeInPmx The amount of the protocol fee in pmx asset paid.\\n     */\\n    function payProtocolFee(\\n        ProtocolFeeParams memory params\\n    ) public returns (uint256 feeInPaymentAsset, uint256 feeInPmx) {\\n        // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n        // and had fees paid for them will not incur additional fees upon closure\\n        if (params.feeToken == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        ProtocolFeeVars memory vars;\\n        (vars.pmx, vars.treasury, , , vars.pmxDiscountMultiplier) = params.primexDNS.getPrimexDNSParams(\\n            params.feeRateType\\n        );\\n        feeInPaymentAsset = calculateFeeInPaymentAsset(\\n            CalculateFeeInPaymentAssetParams({\\n                primexDNS: params.primexDNS,\\n                priceOracle: params.priceOracle,\\n                feeRateType: params.feeRateType,\\n                paymentAsset: params.paymentAsset,\\n                paymentAmount: params.paymentAmount,\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                gasSpent: params.gasSpent,\\n                isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                nativePaymentAssetOracleData: params.nativePaymentAssetOracleData\\n            })\\n        );\\n        (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.trader, vars.pmx);\\n        if (params.feeToken == vars.pmx && vars.pmxTraderBalance > 0 && !params.isFeeProhibitedInPmx) {\\n            // pmx => payment asset data\\n            uint256 pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                vars.pmx,\\n                params.paymentAsset,\\n                vars.pmxTraderBalance,\\n                params.priceOracle,\\n                params.pmxPaymentAssetOracleData\\n            );\\n\\n            uint256 feeInPaymentAssetWithDiscount = feeInPaymentAsset.wmul(vars.pmxDiscountMultiplier);\\n\\n            feeInPmx = (feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) / pmxTraderBalanceInPaymentAsset;\\n\\n            if (pmxTraderBalanceInPaymentAsset >= feeInPaymentAssetWithDiscount) {\\n                feeInPaymentAsset = 0;\\n                params.traderBalanceVault.withdrawFrom(params.trader, vars.treasury, vars.pmx, feeInPmx, false);\\n            } else {\\n                feeInPmx = vars.pmxTraderBalance;\\n                feeInPaymentAsset -= pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                params.traderBalanceVault.withdrawFrom(\\n                    params.trader,\\n                    vars.treasury,\\n                    vars.pmx,\\n                    vars.pmxTraderBalance,\\n                    false\\n                );\\n                TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n            }\\n        } else {\\n            TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAsset(CalculateFeeInPaymentAssetParams memory params) public returns (uint256) {\\n        FeeInPaymentAssetVars memory vars;\\n        (, , vars.protocolFeeRate, vars.maxProtocolFee, ) = params.primexDNS.getPrimexDNSParams(params.feeRateType);\\n        // Calculate protocol fee in position asset\\n        vars.feeInPaymentAsset = params.paymentAmount.wmul(vars.protocolFeeRate);\\n\\n        // Calculate max protocol fee in position asset\\n        vars.maxProtocolFeeInPaymentAsset = vars.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                params.paymentAsset,\\n                vars.maxProtocolFee,\\n                params.priceOracle,\\n                params.nativePaymentAssetOracleData\\n            );\\n\\n        // The minProtocolFee is applied only if the order/position is processed by Keepers\\n\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SwapMarketOrder\\n        ) {\\n            vars.feeInPaymentAsset = min(vars.feeInPaymentAsset, vars.maxProtocolFeeInPaymentAsset);\\n        } else {\\n            vars.minProtocolFeeInPaymentAsset = minProtocolFee(\\n                MinProtocolFeeParams({\\n                    restrictedGasSpent: params.gasSpent,\\n                    paymentAsset: params.paymentAsset,\\n                    priceOracle: params.priceOracle,\\n                    keeperRewardDistributor: IKeeperRewardDistributorV3(params.keeperRewardDistributor),\\n                    primexDNS: params.primexDNS,\\n                    isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                    feeRateType: params.feeRateType,\\n                    nativePaymentAssetOracleData: params.nativePaymentAssetOracleData\\n                })\\n            );\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < params.paymentAmount,\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n\\n            vars.feeInPaymentAsset = min(\\n                max(vars.feeInPaymentAsset, vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    function payProtocolFeeBatchClose(\\n        ProtocolFeeParamsBatchClose calldata params\\n    ) public returns (uint256[] memory, uint256[] memory) {\\n        ProtocolFeeVars memory vars;\\n        uint256[] memory feeInPaymentAsset = new uint256[](params.numberOfPositions);\\n        uint256[] memory feeInPmx = new uint256[](params.numberOfPositions);\\n\\n        (vars.pmx, vars.treasury, , , vars.pmxDiscountMultiplier) = params.primexDNS.getPrimexDNSParams(\\n            params.feeRateType\\n        );\\n        feeInPaymentAsset = calculateFeeInPaymentAssetBatchClose(\\n            params.numberOfPositions,\\n            params.primexDNS,\\n            params.priceOracle,\\n            params.feeRateType,\\n            params.paymentAsset,\\n            params.paymentAmounts,\\n            params.keeperRewardDistributor,\\n            params.estimatedGasAmount,\\n            params.estimatedBaseLength,\\n            params.nativePaymentAssetOracleData\\n        );\\n        for (uint256 i; i < params.numberOfPositions; i++) {\\n            // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n            // and had fees paid for them will not incur additional fees upon closure\\n            if (params.feeTokens[i] == address(0)) {\\n                feeInPaymentAsset[i] = 0;\\n                feeInPmx[i] = 0;\\n                continue;\\n            }\\n\\n            (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.traders[i], vars.pmx);\\n\\n            if (!params.isFeeProhibitedInPmx && params.feeTokens[i] == vars.pmx && vars.pmxTraderBalance > 0) {\\n                vars.pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                    vars.pmx,\\n                    params.paymentAsset,\\n                    vars.pmxTraderBalance,\\n                    params.priceOracle,\\n                    params.pmxPaymentAssetOracleData\\n                );\\n\\n                vars.feeInPaymentAssetWithDiscount = feeInPaymentAsset[i].wmul(vars.pmxDiscountMultiplier);\\n                feeInPmx[i] =\\n                    (vars.feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) /\\n                    vars.pmxTraderBalanceInPaymentAsset;\\n                if (vars.pmxTraderBalanceInPaymentAsset >= vars.feeInPaymentAssetWithDiscount) {\\n                    feeInPaymentAsset[i] = 0;\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        feeInPmx[i],\\n                        false\\n                    );\\n                } else {\\n                    feeInPmx[i] = vars.pmxTraderBalance;\\n                    feeInPaymentAsset[i] -= vars.pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        vars.pmxTraderBalance,\\n                        false\\n                    );\\n                }\\n            }\\n        }\\n        return (feeInPaymentAsset, feeInPmx);\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAssetBatchClose(\\n        uint256 numberOfPositions,\\n        IPrimexDNSV3 primexDNS,\\n        address priceOracle,\\n        IPrimexDNSStorageV3.FeeRateType feeRateType,\\n        address paymentAsset,\\n        uint256[] memory paymentAmounts,\\n        address keeperRewardDistributor,\\n        uint256 estimatedGasAmount,\\n        uint256 estimatedBaseLength,\\n        bytes calldata _nativePaymentAssetOracleData\\n    ) public returns (uint256[] memory) {\\n        CalculateFeeInPaymentAssetBatchCloseVars memory vars;\\n        (, , vars.protocolFeeRate, vars.maxProtocolFee, ) = primexDNS.getPrimexDNSParams(feeRateType);\\n        // Calculate max protocol fee in payment (sold) asset\\n        vars.maxProtocolFeeInPaymentAsset = vars.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                paymentAsset,\\n                vars.maxProtocolFee,\\n                priceOracle,\\n                _nativePaymentAssetOracleData\\n            );\\n\\n        vars.minProtocolFeeInPaymentAsset = minProtocolFeeCloseBatch(\\n            paymentAsset,\\n            priceOracle,\\n            IKeeperRewardDistributorV3(keeperRewardDistributor),\\n            estimatedGasAmount,\\n            estimatedBaseLength,\\n            primexDNS,\\n            _nativePaymentAssetOracleData\\n        );\\n\\n        vars.feeInPaymentAsset = new uint256[](numberOfPositions);\\n        // Calculate protocol fee in position asset\\n        for (uint256 i; i < numberOfPositions; i++) {\\n            vars.feeInPaymentAsset[i] = paymentAmounts[i].wmul(vars.protocolFeeRate);\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < paymentAmounts[i],\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n            vars.feeInPaymentAsset[i] = min(\\n                max(vars.feeInPaymentAsset[i], vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price\\n     */\\n    function minProtocolFee(MinProtocolFeeParams memory params) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        MinProtocolFeeVars memory vars;\\n        (vars.restrictedGasPrice) = calculateRestrictedGasPrice(params.priceOracle, params.keeperRewardDistributor);\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper\\n        ) {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition;\\n        } else {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.OpenPositionByOrder;\\n        }\\n        (\\n            vars.liquidationGasAmount,\\n            vars.protocolFeeCoefficient,\\n            vars.additionalGasSpent,\\n            vars.maxGasAmount,\\n            vars.baseLength\\n        ) = params.primexDNS.getParamsForMinProtocolFee(vars.callingMethod);\\n\\n        vars.l1CostWei = _calculateL1CostWei(vars.baseLength, params.keeperRewardDistributor);\\n\\n        if (params.isFeeProhibitedInPmx) {\\n            vars.minProtocolFeeInNativeAsset =\\n                vars.liquidationGasAmount *\\n                vars.restrictedGasPrice +\\n                vars.l1CostWei +\\n                vars.protocolFeeCoefficient;\\n        } else {\\n            if (vars.callingMethod == IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition) {\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.maxGasAmount *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            } else {\\n                vars.totalGasSpent = params.restrictedGasSpent + vars.additionalGasSpent;\\n                vars.totalGasSpent = min(vars.totalGasSpent, vars.maxGasAmount);\\n\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.totalGasSpent *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            }\\n        }\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            params.paymentAsset,\\n            vars.minProtocolFeeInNativeAsset,\\n            params.priceOracle,\\n            params.nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price in closeBatchPositions\\n     */\\n    function minProtocolFeeCloseBatch(\\n        address _paymentAsset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        uint256 _estimatedGasAmount,\\n        uint256 _estimatedBaseLength,\\n        IPrimexDNSV3 primexDNS,\\n        bytes calldata _nativePaymentAssetOracleData\\n    ) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n\\n        uint256 l1CostWei = _calculateL1CostWei(_estimatedBaseLength, _keeperRewardDistributor);\\n\\n        uint256 minProtocolFeeInNativeAsset = _estimatedGasAmount *\\n            restrictedGasPrice +\\n            l1CostWei +\\n            primexDNS.protocolFeeCoefficient();\\n\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _paymentAsset,\\n            minProtocolFeeInNativeAsset,\\n            _priceOracle,\\n            _nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minPositionSize based on the gas price\\n     */\\n    function minPositionSize(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType\\n    ) public view returns (uint256 minPositionSizeInNativeAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n        (\\n            uint256 baseLength,\\n            uint256 averageGasPerAction,\\n            uint256 protocolFeeCoefficient,\\n            uint256 gasPriceBuffer\\n        ) = _primexDNS.getParamsForMinPositionSize(_tradingOrderType);\\n        uint256 l1CostWei = _calculateL1CostWei(baseLength, _keeperRewardDistributor);\\n\\n        minPositionSizeInNativeAsset = (averageGasPerAction * restrictedGasPrice + l1CostWei + protocolFeeCoefficient)\\n            .wmul(gasPriceBuffer);\\n    }\\n\\n    function calculateRestrictedGasPrice(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 restrictedGasPrice) {\\n        RestrictedGasPriceVars memory vars;\\n        restrictedGasPrice = tx.gasprice;\\n        vars.oracleGasPrice = IPriceOracle(_priceOracle).getGasPrice();\\n        (vars.oracleGasPriceTolerance, vars.defaultMaxGasPrice, , ) = _keeperRewardDistributor\\n            .getGasCalculationParams();\\n\\n        vars.maxGasPrice = vars.oracleGasPrice > 0\\n            ? uint256(vars.oracleGasPrice).wmul(WadRayMath.WAD + vars.oracleGasPriceTolerance)\\n            : vars.defaultMaxGasPrice;\\n\\n        if (restrictedGasPrice > vars.maxGasPrice || restrictedGasPrice == 0) {\\n            restrictedGasPrice = vars.maxGasPrice;\\n        }\\n    }\\n\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle,\\n        bytes memory _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        return (_amountAssetA * _getAssetMultiplier(_tokenA)).wmul(exchangeRate) / _getAssetMultiplier(_tokenB);\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n        for (uint256 i; i < _amountsAssetA.length; i++) {\\n            amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt,\\n        address _primexDNS\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucketV3(_bucket);\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount)\\n            .wmul(\\n                WadRayMath.WAD -\\n                    IPrimexDNSV3(_primexDNS).protocolFeeRates(\\n                        IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper\\n                    )\\n            ) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _nativeAssetOracleData NativeCurrency => Asset\\n     */\\n    function validateMinPositionSize(\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public {\\n        _require(\\n            isGreaterThanMinPositionSize(\\n                _asset,\\n                _amount,\\n                _priceOracle,\\n                _keeperRewardDistributor,\\n                _primexDNS,\\n                _tradingOrderType,\\n                _nativeAssetOracleData\\n            ),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isGreaterThanMinPositionSize(\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public returns (bool) {\\n        uint256 minPositionSizeInNativeCurrency = minPositionSize(\\n            _priceOracle,\\n            _keeperRewardDistributor,\\n            _primexDNS,\\n            _tradingOrderType\\n        );\\n        uint256 minPositionSizeInAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _asset,\\n            minPositionSizeInNativeCurrency,\\n            _priceOracle,\\n            _nativeAssetOracleData\\n        );\\n        return _amount >= minPositionSizeInAsset;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address payable dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n\\n    function _calculateL1CostWei(\\n        uint256 _baseLength,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 l1CostWei) {\\n        (\\n            ,\\n            ,\\n            uint256 optimisticGasCoefficient,\\n            IKeeperRewardDistributorStorage.PaymentModel paymentModel\\n        ) = _keeperRewardDistributor.getGasCalculationParams();\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.ARBITRUM) {\\n            return\\n                l1CostWei =\\n                    ARB_NITRO_ORACLE.getL1BaseFeeEstimate() *\\n                    GAS_FOR_BYTE *\\n                    (_baseLength + TRANSACTION_METADATA_BYTES);\\n        }\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.OPTIMISTIC) {\\n            // Adds 68 bytes of padding to account for the fact that the input does not have a signature.\\n            uint256 l1GasUsed = GAS_FOR_BYTE * (_baseLength + OVM_GASPRICEORACLE.overhead() + 68);\\n            return\\n                l1CostWei =\\n                    (OVM_GASPRICEORACLE.l1BaseFee() *\\n                        l1GasUsed *\\n                        OVM_GASPRICEORACLE.scalar() *\\n                        optimisticGasCoefficient) /\\n                    10 ** 6;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the minimum of two values\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the maximum of two values\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9bda7cf4f7876bbd61e6170f47562fdc177d4a13df54326d8377eb8f982df48c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x37a08dc6950f94f7156c9b2414fa00fb35ff6e3841f59c29b50316dd83029a86\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/BytesLib.sol\\n// Unused methods and constants were removed\\npragma solidity 0.8.18;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15247d5d083082fd3ada31426c5c355a35606682f4587132c847c63c74d23315\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xb0991b2c77df3496e4595618675a4279bd187aa4968bfbcf3be47f80c49280b3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000c6576000549060ff8260081c1662000074575060ff8082160362000038575b604051614e6b9081620000cc8239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a13862000028565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe61054080604052600436101561001457600080fd5b60006103805260003560e01c90816301ffc9a71461343a575080630bbabf29146134195780630f2bd839146133c65780631555ec02146132ea5780631785884c146132be578063212d55ec1461329d5780632630c12f146132715780633587647614612daf578063365b03e414612d8e5780633bf7771f14612c945780633f4a2d2714612c685780633f4ba83a14612b4d578063414d19e31461287657806344ff7dc31461284b57806350f413221461281f5780635c975abb146127f957806360fa88e4146127bb57806362ad9e9e146125e0578063659be053146125b457806368a270c11461250d578063777d24c0146124ec5780637b103999146124c05780637fa50567146118c35780638262b7c51461183c5780638456cb5914611722578063898e971a14610d635780638992c91114610d425780639968861e14610d165780639c68a60814610cf5578063a41b4ea414610ca8578063a8905dab14610c74578063ac55640014610958578063b35ac73214610900578063bb8313c2146108df578063bd83eb4c14610820578063c5194ffb14610772578063c66c2536146106d0578063cc2ea79514610472578063d64470e914610417578063d7638a46146103d9578063e3d7bb331461037f578063e92d529a14610350578063ea0341a81461026d5763eb02c3011461020a57600080fd5b34610266576020366003190112610266576004356102266144d7565b5061023081614dcd565b610380515260dc6020526102626102566102506040610380512054613f77565b50614530565b604051918291826135b6565b0390f35b6103805180fd5b346102665760208060031936011261026657600435610380515260d38152604061038051209081549161029f83613fb2565b926102ad6040519485613777565b808452828401809261038051526103805184812090915b83831061032d5750505050604051918083019381845251809452604083019360408160051b850101929161038051955b8287106103015785850386f35b90919293828061031d600193603f198a820301865288516134cd565b96019201960195929190926102f4565b60028660019261033f859a999a613e81565b8152019201920191909594956102c4565b3461026657610380518060031936011261037c5760d8546040516001600160a01b039091168152602090f35b80fd5b34610266576020366003190112610266576004356001600160401b038111610266576103cb6103b56103d1923690600401613589565b60e0546001600160a01b0316929136919061382b565b90613862565b506103805180f35b34610266576020366003190112610266576001600160a01b036103fa613533565b16610380515260d260205260206040610380512054604051908152f35b3461026657604036600319011261026657610430613533565b6024359060018060a01b0316610380515260d1602052610380516040812090815483101561037c5760206104648484613684565b90546040519160031b1c8152f35b346102665760c03660031901126102665761048b61355f565b606435801515810361069f576001600160401b0390608435828111610266576104b89036906004016134ed565b906104c1613f21565b6104c9614d5b565b600435610380515260dc6020526104e66040610380512054613f77565b5060d65460d75460d554604051939893976001600160a01b03918216979282169693909116949291906101008901908111908911176106ba5761054b936101008901604052602435895260018060a01b03166020890152151560408801523691613fc9565b6060850152608084015260a083015260c082015260a43560e0820152602060405180809363f7e2251760e01b8252856004830152604060248301528051604483015260018060a01b038482015116606483015260408101511515608483015260e06105c7606083015161010060a4860152610144850190614380565b60808301516001600160a01b0390811660c486015260a0840151811660e486015260c084015116610104850152910151610124830152038173e381eF4cbc2e732251Ae357629dF8b1Ec82Fb8F55af49081156106ac576103805191610675575b507fad6b2ae912630f53b4805f4a0718a98a9cc995c7ac0dd218a8850dd8464a745160408354926001808060a01b0360078701541695015482519182526020820152a3600180556103805180f35b90506020813d6020116106a4575b8161069060209383613777565b8101031261069f575182610627565b600080fd5b3d9150610683565b6040513d61038051823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b34610266576060366003190112610266576106e9613533565b6106f1613549565b906106fa614cd4565b73D1869a3C77C17D185c9a5e8904e0e4867e5EB1D990813b1561026657604051636336129b60e11b81526001600160a01b0391821660048201529216602483015260448035908301526103805190829060649082905af480156106ac57610763575b6103805180f35b61076c906136bf565b8061075c565b346102665760203660031901126102665761078b613533565b60d454604051632474521560e21b815261038051600482015233602482015290602090829060449082906001600160a01b03165afa9081156106ac5761038051916107f2575b50156107e05761075c90614c18565b60405163036be76f60e61b8152600490fd5b610813915060203d8111610819575b61080b8183613777565b810190613798565b826107d1565b503d610801565b34610266576020806003193601126102665760043561083e81614dcd565b610380515260dc815261087f8161085e6102506040610380512054613f77565b60405180938192632ac0a2ad60e21b835284600484015260248301906145c6565b038173e381eF4cbc2e732251Ae357629dF8b1Ec82Fb8F55af49081156106ac5761038051916108b2575b50604051908152f35b90508181813d83116108d8575b6108c98183613777565b810103126102665751826108a9565b503d6108bf565b3461026657610380518060031936011261037c57602060da54604051908152f35b3461026657604036600319011261026657610919613533565b610921613549565b9060018060a01b03809116610380515260c96020526103805190604082209216905260205260206040610380512054604051908152f35b346102665761096636613652565b604051622b155960ea1b60208083019190915260248201819052916001600160a01b03908161099482613575565b166044840152838101356101be1982360301811215610266578101906101a08060648601528235928484168094036102665785936101e4850152848782016109db90613575565b16610204850152846109ef60408301613575565b16610224850152606081013561024485015284610a0e60808301613575565b1661026485015260a081013561028485015284610a2d60c08301613575565b166102a485015260e08101356102c485015261010090818101356102e48601526101208082013561030487015261014090818301610a6a906136b2565b1515610324880152610160928381013561034489015261018095868201356103648a01528101610a999161399a565b61038489016101c090526103a4890190610ab2926139cb565b93610ac060408801886139ec565b9560431996878b83030160848c0152610ad892613a34565b610ae560608901896139ec565b8a8303880160a48c0152610af99291613ac6565b610b0660808901896139ec565b8a8303880160c48c0152610b1a9291613ac6565b610b2760a089018961399a565b8a8303880160e48c0152610b3b92916139cb565b610b4860c089018961399a565b8a830388016101048c0152610b5d92916139cb565b610b6a60e089018961399a565b8a830388016101248c0152610b7f92916139cb565b908701610b8c908861399a565b89830387016101448b0152610ba192916139cb565b908601610bae908761399a565b88830386016101648a0152610bc392916139cb565b908501610bd0908661399a565b8783038501610184890152610be592916139cb565b908401610bf2908561399a565b9092868303016101a4870152610c07926139cb565b9101356101c483015203601f1981018352610c229083613777565b60e0541690610c3091613862565b80805181010360a013610266578160a09282015191604081015160608201519085608084015193015193604051958652850152604084015260608301526080820152f35b34610266576040366003190112610266576020610ca0610c92613533565b610c9a613549565b9061465b565b604051908152f35b3461026657604036600319011261026657610cc1613533565b6024359060018060a01b0316610380515260d2602052610380516040812090815483101561037c5760206104648484613684565b3461026657610380518060031936011261037c57602060ce54604051908152f35b3461026657610380518060031936011261037c5760d5546040516001600160a01b039091168152602090f35b3461026657610380518060031936011261037c57602060ca54604051908152f35b61012036600319011261026657610d78613549565b6001600160401b039060443582811161026657610d999036906004016134ed565b92909160843582811161026657610db4903690600401613589565b6101e0526104005260a43582811161026657610dd4903690600401613589565b610220526103e05260c43582811161026657610df4903690600401613589565b6102a0526103a05260e43582811161026657610e149036906004016134ed565b9092610104351161026657610e2f36610104356004016134ed565b610e3a949194613f21565b610e42614d5b565b610e4a613d6b565b9460405193610e588561375c565b610380518552604051610e6a8161375c565b610380519052604051610e7c8161375c565b6103805190526103805193604051610e9381613709565b6103805181526103805160208201526103805160408201526103805160608201526103805160808201526103805160a08201526103805160c08201526103805160e08201526103805161010082015261012061038051910152610ef7600435614dcd565b6001600160a01b038716156117105760d7546001600160a01b031690813b1561026657610f4692610f5d6040519687958694859463f197ce3560e01b8652604060048701526044860191613c90565b906003198483030160248501526103805197613d47565b039134905af180156106ac576116fc575b50610f7f6040518061026052613725565b610f876144d7565b6102605152806020610260510152806040610260510152806060610260510152600435815260dc602052806020610fc46102506040842054613f77565b8061026051520151151560206102605101526116e85750606061026051602081015115159182910152611572575b61026051805160c081015160808201516102e05260208083015160408086015160d65460d75460d5549886015160a08901516060909901519451631dae49b960e21b81526001600160a01b03998a1660048201529489166024860152969d949c939b9615159a9698881697908116969116949193918b604481895afa9a8b156106ac57610380519b611536575b50906110df929160cb549c606061026051015115159e60018060a01b0360d85416610240526110b360405180608052613740565b608051526102e051602060805101526040608051015260018060a01b0316606060805101523691613fc9565b60808051015260643560a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152610160608051015261018060805101526101a060805101526101c060805101526101e06080510152610380516102006080510152610240516102206080510152611166366101e0516104005161382b565b610240608051015261117f36610220516103e05161382b565b6102606080510152611198366102a0516103a05161382b565b610280608051015261136e6101406111d161026051516040519384928392630b2aa09960e11b84526060600485015260648401906145c6565b60031983820301602484015260805151815260206080510151602082015260406080510151604082015260018060a01b03606060805101511660608201526113566113406112ca6112b46112376080805101516102a060808801526102a0870190614380565b60a0608051015160a087015260c0608051015160c087015260018060a01b0360e060805101511660e087015260018060a01b0361010060805101511661010087015260018060a01b03610120608051015116610120870152604060208b60805101518884038d8a015280518452015191816020820152019061348d565b610160608051015185820361016087015261348d565b610180608051015115156101808501526101a060805101516101a08501526101c060805101516101c08501526101e0608051015115156101e0850152610200608051015161020085015260018060a01b03610220608051015116610220850152610240608051015184820361024086015261348d565b610260608051015183820361026085015261348d565b9061028060805101519061028081840391015261348d565b610380516044830152038173e381eF4cbc2e732251Ae357629dF8b1Ec82Fb8F55af49081156106ac576103805191611472575b506102605151604081015160e0909101516113cb916001600160a01b039182169116600435614878565b60a081015160c082015160e0830151926001600160a01b03928316929091169060088410156114585761010081015161012090910151604080516001600160a01b039094168452602084019290925290820152600435907f68c1d3a775fd37da20ef77475b9074ee3b57e4d73d94e046e892720b5043ff729080606081015b0390a4600180556103805180f35b634e487b7160e01b61038051526021600452602461038051fd5b9050610140813d6101401161152e575b816114906101409383613777565b8101031261026657604051906114a582613709565b80518252602081015160208301526040810151604083015260608101516060830152608081015160058110156102665760808301526114e660a08201614cc0565b60a08301526114f760c08201614cc0565b60c083015260e0810151906008821015610266576101209160e08401526101008101516101008401520151610120820152816113a1565b3d9150611482565b9291909a506020833d60201161156a575b8161155460209383613777565b81010312610266576110df92519a90919261107f565b3d9150611547565b610260515160a0810151606090910151611598916001600160a01b03918216911661465b565b60406102605101526044602060018060a01b0360d4541660405192838092632474521560e21b82527f5770eb0b3cb4d032328b9b2070b33a4b2779280a0ec69c0dfa26ce7c00bb682860048301523360248301525afa9081156106ac5761038051916116c9575b5015610ff257604061026051015160ce5490610380519180159182156116a9575b505015611697576706f05b59d3b200008101811161167d57806706f05b59d3b2000081011061166b576706f05b59d3b20000670de0b6b3a76400009101046040610260510152610ff2565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b61038051526011600452602461038051fd5b604051631550e8b760e01b8152600490fd5b915091506116c16116ba8383614694565b9283614e15565b148780611620565b6116e2915060203d6020116108195761080b8183613777565b866115ff565b634e487b7160e01b81526021600452602490fd5b61170691506136bf565b6103805186610f6e565b60405163044aa57560e41b8152600490fd5b3461026657610380518060031936011261037c5760d454604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa9081156106ac57610380519161181e575b50156107e05760655460ff81166117e65760019060ff1916176065557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16103805180f35b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b611836915060203d81116108195761080b8183613777565b81611799565b34610266576040366003190112610266576024356001600160401b038111610266576118b26118726103d19236906004016134ed565b6118a4604093929351938492638262b7c560e01b60208501526004356024850152604060448501526064840191613a34565b03601f198101835282613777565b60e0546001600160a01b0316613862565b6118cc36613652565b6101a0526118d8613f21565b60a06101a0510135600781101561026657156107e0576118f6614d5b565b5a61046052610380516103405261190b613d6b565b610340526101a05160608101359035610380515260d360205260406103805120805482106124a2575b5050611a146101a05161194960208201613ea6565b6102c05261195a6040820182613eba565b61032052610100526119f76119726080830183613eef565b91909261198260c0820182613eef565b610280526101605261199760e0820182613eef565b95906119a7610120840184613eef565b61018052610140526119bd610140840184613eef565b6102005260a052611a096119d5610100850185613eef565b919092611a016119e9610160880188613eba565b989097610180810190613eba565b9a9099369161382b565b99369161382b565b61044052369161382b565b60c052610380516101c052604051611a2b81613709565b6103805181526103805160208201526103805160408201526103805160608201526103805160808201526103805160a08201526103805160c08201526103805160e08201526103805161010082015261012061038051910152611a916101a05135614dcd565b6102c0516001600160a01b0316156117105760d7546001600160a01b031690813b1561026657610f4692611ae36040519687958694859463f197ce3560e01b8652604060048701526044860191613c90565b039134905af180156106ac5761248b575b50611b056040518061042052613725565b611b0d6144d7565b61042051526101c05160206104205101526101c05160406104205101526101c05160606104205101526101a051356101c0515260dc602052611b94611b5b61025060406101c0512054613f77565b6104208051829052602080830151825190151591015251600160609182015260a08201519101516001600160a01b03908116911661465b565b60406104205101526044602060018060a01b0360d4541660405192838092632474521560e21b82527f5770eb0b3cb4d032328b9b2070b33a4b2779280a0ec69c0dfa26ce7c00bb682860048301523360248301525afa908115612293576101c0519161246c575b506123d3575b61042051805160c081015160808201516101205260208083015160e05260408085015160d65460d75460d5549785015160a08801516060909801519451631dae49b960e21b81526001600160a01b03988916600482015294881660248601529598939795151596939584169490841693909116919087604481865afa968715612293576101c0519761239f575b5060cb5497606061042051015115156103c05260018060a01b0360d8541661036052611cc06040518061030052613740565b610300515261012051602061030051015260e051604061030051015260018060a01b036102c051166060610300510152611d01366103205161010051613fc9565b60806103005101526101c05160a061030051015260c061030051015260e0610300510152610100610300510152610120610300510152610340516101406103005101526101606103005101526101806103005101526101a06103005101526101c06103005101526103c0516101e06103005101526104605161020061030051015261036051610220610300510152611da036610280516101605161382b565b610240610300510152611dba36610180516101405161382b565b610260610300510152611dd3366102005160a05161382b565b610280610300510152611fbe610140611e0d61042051516040519384928392630b2aa09960e11b84526060600485015260648401906145c6565b60031983820301602484015261030051518152602061030051015160208201526040610300510151604082015260018060a01b036060610300510151166060820152611fa5611f8e611f11611efa611e7760806103005101516102a0806080890152870190614380565b60a061030051015160a087015260c061030051015160c087015260018060a01b0360e06103005101511660e087015260018060a01b036101006103005101511661010087015260018060a01b0361012061030051015116610120870152604060208b6103005101518884038d8a015280518452015191816020820152019061348d565b61016061030051015185820361016087015261348d565b61018061030051015115156101808501526101a06103005101516101a08501526101c06103005101516101c08501526101e061030051015115156101e085015261020061030051015161020085015260018060a01b036102206103005101511661022085015261024061030051015184820361024086015261348d565b61026061030051015183820361026085015261348d565b906102806103005101519061028081840391015261348d565b60a06101a05101356044830152038173e381eF4cbc2e732251Ae357629dF8b1Ec82Fb8F55af4908115612293576101c051916122db575b506104205151604081015160e0909101516101a051612022926001600160a01b0392831692169035614878565b610420515161014081015142036120ba575b5060a081015160c082015160e0830151926001600160a01b03928316929091169060088410156114585761010081015161012090910151604080516101a0516001600160a01b03909516815260208101939093528201529035907f68c1d3a775fd37da20ef77475b9074ee3b57e4d73d94e046e892720b5043ff7290806060810161144a565b60d85460a082015160c09092015160808401516001600160a01b03928316939092169160058110156122ba575a61046051808281031161167d57604051926121018461375c565b6101c0518452604051602080820152612128816118a4604082016103205161010051613ac6565b51946040519661213788613709565b60018060a01b036102c051168852602088015260408701526060860152600160808601520360a084015260c083015260e08201526104405161010082015260c051610120820152813b156122d4576040805163ee4bc79960e01b815260206004820181905283516001600160a01b03908116602484015290840151166044820152908201516064820152606082015190929060058110156122ba579083916084830152608083015160a483015260a083015160c483015260c08301519261014060e484015261016483018451809152602061018485019501906101c0515b8181106122a157505050826122698260e08394015161010484015261012061225161010083015198602319998a8783030161012488015261348d565b91015196838203016101448401526101c0519661348d565b03916101c051905af18015612293571561203457612286906136bf565b6101c05180156120345780fd5b6040513d6101c051823e3d90fd5b8251875260209687019688965090920191600101612215565b634e487b7160e01b6101c05152602160045260246101c051fd5b6101c05180fd5b9050610140813d61014011612397575b816122f96101409383613777565b810103126122d4576040519061230e82613709565b80518252602081015160208301526040810151604083015260608101516060830152608081015160058110156122d457608083015261234f60a08201614cc0565b60a083015261236060c08201614cc0565b60c083015260e08101519060088210156122d4576101209160e0840152610100810151610100840152015161012082015281611ff5565b3d91506122eb565b9096506020813d6020116123cb575b816123bb60209383613777565b8101031261026657519588611c8e565b3d91506123ae565b604061042051015160ce54906101c051918015918215612453575b505015611697576706f05b59d3b200008101811161243957806706f05b59d3b2000081011061166b576706f05b59d3b20000670de0b6b3a76400009101046040610420510152611c01565b634e487b7160e01b6101c05152601160045260246101c051fd5b915091506124646116ba8383614694565b1483806123ee565b612485915060203d6020116108195761080b8183613777565b82611bfb565b612494906136bf565b610380516101c05281611af4565b6124b5916124af91613d85565b50613e81565b610340528080611934565b3461026657610380518060031936011261037c5760d4546040516001600160a01b039091168152602090f35b3461026657610380518060031936011261037c57602060cb54604051908152f35b34610266576020806003193601126102665760043561252b81614dcd565b610380515260dc81526125446040610380512054613f77565b50600201546001600160a01b03168181612569575050610380515b6040519015158152f35b604051634ad09aa560e01b815291829060049082905afa9081156106ac576103805191612597575b5061255f565b6125ae9150823d84116108195761080b8183613777565b82612591565b3461026657610380518060031936011261037c5760e0546040516001600160a01b039091168152602090f35b610160366003190112610266576125f561355f565b6001600160401b0390606435828111610266576126169036906004016134ed565b9260a4358181116102665761262f903690600401613589565b919060c43582811161026657612649903690600401613589565b9060e43584811161026657612662903690600401613589565b610104358681116102665761267b903690600401613589565b93909461012435888111610266576126979036906004016134ed565b97909861014435908111610266576126b39036906004016134ed565b9a909b6040519e8f9e8f90633156cf4f60e11b602083015260043560248301526024356044830152600160a01b60019003166064820152608481016101609052610184019061270192613ac6565b60843560a48f01528d81036023190160c48f0152612721929091906139cb565b906023198c83030160e48d0152612737926139cb565b906023198a8303016101048b015261274e926139cb565b9060231988830301610124890152612765926139cb565b906023198683030161014487015261277c92613c90565b906023198483030161016485015261279392613d47565b03601f19810182526127a59082613777565b60e0546103d191906001600160a01b0316613862565b34610266576020366003190112610266576001600160a01b036127dc613533565b16610380515260d160205260206040610380512054604051908152f35b3461026657610380518060031936011261037c57602060ff606554166040519015158152f35b3461026657610380518060031936011261037c5760d9546040516001600160a01b039091168152602090f35b34610266576020366003190112610266576128646144d7565b50610262610256610250600435613f77565b60031960203682011261026657600435906001600160401b038211610266578160040190610260809184360301126102665760405192839163414d19e360e01b602084015260248301602090526128cd8480613ab2565b9060448401526128dd818061399a565b6102a48501606090526103048501906128f5926139cb565b9060208101356102c48501526040810161290e916139ec565b8483036102a319016102e48601526129269291613ac6565b9061293460248201856139ec565b92604319938486830301606487015261294c92613ac6565b6001600160a01b0394908561296360448501613575565b166084860152606483013560a4860152856084840161298190613575565b1660c486015260a483013560e48601526101049060c48401358287015260e484016129ab906136b2565b151591610124928388015284016129c1906136b2565b151591610144928388015284016129d890846139ec565b91610164928789830301848a01526129ef92613a34565b9184016129fc908461399a565b92610184938789830301858a0152612a13926139cb565b908401612a20908461399a565b916101a4928789830301848a0152612a37926139cb565b918401612a44908461399a565b926101c4938789830301858a0152612a5b926139cb565b908401612a68908461399a565b916101e4928789830301848a0152612a7f926139cb565b918401612a8c908461399a565b92610204938789830301858a0152612aa3926139cb565b908401612ab0908461399a565b91610224928789830301848a0152612ac7926139cb565b918401612ad4908461399a565b92610244938789830301858a0152612aeb926139cb565b908401612af890846139ec565b8783038701610264890152612b0d9291613c90565b9201612b18916139ec565b909284830301610284850152612b2d92613d47565b03601f1981018352612b3f9083613777565b60e05416906103d191613862565b3461026657610380518060031936011261037c5760d454604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa9081156106ac576103805191612c4a575b50156107e05760655460ff811615612c0e5760ff19166065557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a16103805180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b612c62915060203d81116108195761080b8183613777565b81612bc4565b3461026657610380518060031936011261037c5760d6546040516001600160a01b039091168152602090f35b60c0366003190112610266576001600160401b0360443581811161026657612cc0903690600401613589565b919060643582811161026657612cda903690600401613589565b9260843581811161026657612cf39036906004016134ed565b92909360a435928311610266576103d196612d7f6118b296606496612d6f60c09a612d5b612d286118a49a36906004016134ed565b9890976040519e8f9d8e633bf7771f60e01b602082015260043560248201526024356044820152015260e48d01916139cb565b9060231998898c84030160848d01526139cb565b91868984030160a48a0152613c90565b928584030160c4860152613d47565b3461026657610380518060031936011261037c57602060cf54604051908152f35b346102665760e036600319011261026657612dc8613533565b612dd0613549565b906044356001600160a01b038116810361026657612dec61351d565b608435906001600160a01b03821682036102665760a435926001600160a01b03841684036102665760c4356001600160a01b03811690036102665761038051549560ff8760081c161596878098613264575b801561324d575b156131f1576103805160ff198216600117815590886131df575b50506040516301ffc9a760e01b8152637965db0b60e01b60048201526020816024816001600160a01b038b165afa9081156106ac5761038051916131c0575b508061315d575b806130fa575b80613097575b80613034575b80612fd1575b15611710576bffffffffffffffffffffffff60a01b9560018060a01b03168660d454161760d45560018060a01b03168560d654161760d65560018060a01b03168460d554161760d55560018060a01b03168360d754161760d75560018060a01b03168260d854161760d85560018060a01b03169060df54161760df55612f4460c435614c18565b610380515490612f8b60ff8360081c16612f5d816137b0565b612f66816137b0565b60ff1960655416606555612f79816137b0565b612f82816137b0565b600180556137b0565b612f96576103805180f35b61ff00191661038051557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a18061075c565b506040516301ffc9a760e01b8152633df6cef760e01b60048201526020816024816001600160a01b038a165afa9081156106ac576103805191613015575b50612ebd565b61302e915060203d6020116108195761080b8183613777565b8861300f565b506040516301ffc9a760e01b8152631e42d3e560e01b60048201526020816024816001600160a01b0389165afa9081156106ac576103805191613078575b50612eb7565b613091915060203d6020116108195761080b8183613777565b88613072565b506040516301ffc9a760e01b81526333ca6d2360e21b60048201526020816024816001600160a01b0388165afa9081156106ac5761038051916130db575b50612eb1565b6130f4915060203d6020116108195761080b8183613777565b886130d5565b506040516301ffc9a760e01b81526312b3ed2b60e01b60048201526020816024816001600160a01b0387165afa9081156106ac57610380519161313e575b50612eab565b613157915060203d6020116108195761080b8183613777565b88613138565b506040516301ffc9a760e01b815263081e57a760e31b60048201526020816024816001600160a01b0386165afa9081156106ac5761038051916131a1575b50612ea5565b6131ba915060203d6020116108195761080b8183613777565b8861319b565b6131d9915060203d6020116108195761080b8183613777565b88612e9e565b61ffff19166101011790558780612e5f565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015612e455750600160ff821614612e45565b50600160ff821610612e3e565b3461026657610380518060031936011261037c5760d7546040516001600160a01b039091168152602090f35b3461026657610380518060031936011261037c57602060cc54604051908152f35b3461026657610380518060031936011261037c5760db546040516001600160a01b039091168152602090f35b34610266576080366003190112610266576001600160401b036004358181116102665761331b9036906004016134ed565b906024928335908111610266576133369036906004016134ed565b926044359361334361351d565b9161334c614cd4565b610380515b86811061335f576103805180f35b61337361336d8284896144c7565b35614dcd565b61339c6133818284896144c7565b358561339661339185888b6144c7565b613ea6565b91614878565b60001981146133ad57600101613351565b87634e487b7160e01b6103805152601160045261038051fd5b34610266576040366003190112610266576133df613d6b565b50600435610380515260d36020526102626134056124af60243560406103805120613d85565b6040519182916020835260208301906134cd565b3461026657610380518060031936011261037c57602060d054604051908152f35b3461069f57602036600319011261069f576004359063ffffffff60e01b821680920361069f57602091633d79d7fb60e11b811490811561347c575b5015158152f35b6301ffc9a760e01b14905083613475565b919082519283825260005b8481106134b9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201613498565b90604060206134ea9380518452015191816020820152019061348d565b90565b9181601f8401121561069f578235916001600160401b03831161069f576020808501948460051b01011161069f57565b606435906001600160a01b038216820361069f57565b600435906001600160a01b038216820361069f57565b602435906001600160a01b038216820361069f57565b604435906001600160a01b038216820361069f57565b35906001600160a01b038216820361069f57565b9181601f8401121561069f578235916001600160401b03831161069f576020838186019501011161069f57565b6101a06134ea9260208352805160208401526020810151604084015260018060a01b03806040830151166060850152806060830151166080850152608082015160a08501528060a08301511660c085015260c082015160e085015260e08201511661010090818501528101516101209081850152810151610140908185015281015190610160918285015201519161018080820152019061348d565b6003199060208183011261069f57600435916001600160401b03831161069f57826101a09203011261069f5760040190565b805482101561369c5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b3590811515820361069f57565b6001600160401b0381116106ba57604052565b604081019081106001600160401b038211176106ba57604052565b61018081019081106001600160401b038211176106ba57604052565b61014081019081106001600160401b038211176106ba57604052565b608081019081106001600160401b038211176106ba57604052565b6102a081019081106001600160401b038211176106ba57604052565b602081019081106001600160401b038211176106ba57604052565b90601f801991011681019081106001600160401b038211176106ba57604052565b9081602091031261069f5751801515810361069f5790565b156137b757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160401b0381116106ba57601f01601f191660200190565b92919261383782613810565b916138456040519384613777565b82948184528183011161069f578281602093846000960137010152565b6040519060608201928284106001600160401b038511176106ba57600080916134ea95604052602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020860152660819985a5b195960ca1b6040860152602081519101845af43d156138f9573d916138dc83613810565b926138ea6040519485613777565b83523d6000602085013e6138fd565b6060915b9192901561395f5750815115613911575090565b3b1561391a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156139725750805190602001fd5b60405162461bcd60e51b81526020600482015290819061399690602483019061348d565b0390fd5b9035601e198236030181121561069f5701602081359101916001600160401b03821161069f57813603831361069f57565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e198236030181121561069f5701602081359101916001600160401b03821161069f578160051b3603831361069f57565b9035603e198236030181121561069f570190565b9082818152602080910193818360051b82010194846000925b858410613a5e575050505050505090565b909192939495968580613aa1600193601f19868203018852613a90613a838d89613a20565b803583528481019061399a565b9091604090818682015201916139cb565b990194019401929594939190613a4d565b9035605e198236030181121561069f570190565b916020906104a0928084528152018093825190600591821b8301946104c0938185526000926104e0978489525b875189511015613c84578281038a52613b0d875185613a20565b613b2360408301918035845260208101906139ec565b8092604060208601525260608301906060838a1b85010161052052809388945b848610613b6d57505050505050602061052051998188510188520196600189510189529698613af3565b605f19826105205103018452613b838184613a20565b6105205160408101918d91613bb191906001600160a01b03613ba483613575565b16905260208101906139ec565b8093604060206105205101525260606105205184828201941b01016105005280610480528c915b838310613bfd5750505050602080600192610500516105205201940195019492613b43565b6020600191605f19610520516105005103018152613c6d613c216104805186613ab2565b613c5b613c45613c31838061399a565b6060610500515260606105005101916139cb565b918581013586610500510152604081019061399a565b906105005160408185039101526139cb565b610500528161048051016104805201920191613bd8565b98509650505050505050565b91908082526020809201918260059383851b820195809560009182945b878610613cc05750505050505050505090565b909192939495969798818103865287613cd98b856139ec565b808452828401908381891b86010194838a905b838210613d1057505050505050806001929b01960196019497969593929190613cad565b91939580613d36600193959799601f19888203018a52613d308b8761399a565b906139cb565b9801960192018d9594929391613cec565b81835290916001600160fb1b03831161069f5760209260051b809284830137010190565b60405190613d78826136d2565b6060602083600081520152565b805482101561369c5760005260206000209060011b0190600090565b90600182811c92168015613dd1575b6020831014613dbb57565b634e487b7160e01b600052602260045260246000fd5b91607f1691613db0565b9060405191826000825492613def84613da1565b908184526001948581169081600014613e5e5750600114613e1b575b5050613e1992500383613777565b565b9093915060005260209081600020936000915b818310613e46575050613e1993508201013880613e0b565b85548884018501529485019487945091830191613e2e565b915050613e1994506020925060ff191682840152151560051b8201013880613e0b565b90604051613e8e816136d2565b6020613ea1600183958054855201613ddb565b910152565b356001600160a01b038116810361069f5790565b903590601e198136030182121561069f57018035906001600160401b03821161069f57602001918160051b3603831361069f57565b903590601e198136030182121561069f57018035906001600160401b03821161069f5760200191813603831361069f57565b600260015414613f32576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60cf5481101561369c57600c9060cf600052027facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290190600090565b6001600160401b0381116106ba5760051b60200190565b9291909261050052826104c0526104e0526020613fec6105209360008552613fb2565b613ff96040519182613777565b8084526104c051815201916104e051916104c05192610500519360051b84011161069f57926104a09283525b6104c05160051b610500519084519082018110156143775735906001600160401b03821161069f57016040816104e051031261069f5760405190614068826136d2565b8035825260208101356001600160401b03811161069f576104e051601f82840101121561069f578082013561409c81613fb2565b926140aa6040519485613777565b81845260208401906104e05160208460051b86840101011161069f57602084820101915b60208460051b868401010183106140fc57505050506020808401929092525090825283518101845201614025565b82356001600160401b03811161069f576040601f1982888601016104e05103011261069f576040519061412e826136d2565b61413e6020828987010101613575565b82526001600160401b036040828987010101351161069f576104e0518488018201604081013501603f01121561069f5783870181016040810135016020013561418681613fb2565b916141946040519384613777565b8183526104e0516020840191908a88018201604081810135909101600586901b01011161069f5760408a88018201818101350101915b8a88018201604081810135909101600586901b010183106141fe5750505050918160209384809401528152019201916140ce565b6001600160401b0383351161069f576104e051906060898d0184016040810135018535018303603f19011261069f57604051918260608101106001600160401b036060850111176106ba576060830160409081528a8e01850180820135018635010135906001600160401b03821161069f578a8e0185016040810135018635018201605f0181131561069f576142af918e8c018601604081810135909101883501909101908101359060600161382b565b82528b89018301604081013501843501606081013560208401526001600160401b036080909101351161069f576104e05190898d018401604081013501853501608081013501605f0182131561069f5760209261436784938f60608e604060808c35828d8786010101358d87860101010101358c35828d8786010101358d8786010101010101359260808c3560408d8486010101358d8486010101010135918b8d35926040828285010101359201010101010161382b565b60408201528152019201916141ca565b50505090505190565b90602082519182815201908160208260051b82019401926000915b8383106143aa57505050505090565b9091929394818103835285519060206040820192805183520151916040602083015282518091526060820190602060608260051b85010194019260005b8281106144085750505050506020806001929701930193019193929061439b565b9091929394605f198382030185526020865160018060a01b03815116835201519060406020820152604081019082518092526060810190602060608460051b8301019401926000915b818310614472575050505050602080600192970195019101929190926143e7565b90919293946020806144ba600193605f1986820301895289519060406144a1835160608452606084019061348d565b928581015186840152015190604081840391015261348d565b9701950193019190614451565b919081101561369c5760051b0190565b604051906144e4826136ed565b606061016083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e083015280610100830152806101208301526101408201520152565b9060405161453d816136ed565b610160613ea1600b8395805485526001810154602086015260018060a01b03806002830154166040870152806003830154166060870152600482015460808701528060058301541660a0870152600682015460c087015260078201541660e086015260088101546101008601526009810154610120860152600a81015461014086015201613ddb565b906134ea91805182526020810151602083015260018060a01b03806040830151166040840152806060830151166060840152608082015160808401528060a08301511660a084015260c082015160c084015260e08201511660e083015261010080820151908301526101208082015190830152610140808201519083015261016080910151916101808092820152019061348d565b60018060a01b0380911660005260cd6020526040600020911660005260205260406000205480151560001461468d5790565b5060ca5490565b818102929181159184041417156146a757565b634e487b7160e01b600052601160045260246000fd5b8181106146c8575050565b600081556001016146bd565b6146de8154613da1565b90816146e8575050565b81601f600093116001146146fa575055565b908083918252614719601f60208420940160051c8401600185016146bd565b5555565b805490811561474757600019918201916147378383613684565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b908082146148745761476f8154613da1565b906001600160401b0382116106ba57819061478a8454613da1565b601f8111614837575b50600090601f83116001146147cb576000926147c0575b50508160011b916000199060031b1c1916179055565b0154905038806147aa565b81526020808220858352818320935090601f1985169083905b82821061481e575050908460019594939210614805575b505050811b019055565b015460001960f88460031b161c191690553880806147fb565b84958192958501548155600180910196019401906147e4565b61486490856000526020600020601f850160051c8101916020861061486a575b601f0160051c01906146bd565b38614793565b9091508190614857565b5050565b9160009280845260209160d3835260409384862080549087815581614bc1575b50506001600160a01b0390811680875260d285528587208054600019949291858201918211614bad57614913886148fa898c8e6148da8b9a999860de98613684565b90549060031b1c96879589835260d2815283832094835252205490613684565b90919082549060031b91821b91600019901b1916179055565b868a5260de8852888a2054908a52888a2055885260d2865261493687892061471d565b84885260de865287878120551680875260d18552858720805490848201918211614b99579061496491613684565b90549060031b1c81885260d1865261498d816148fa898b20888c5260dd8a528a8c205490613684565b84885260dd86528688205490885286882055865260d184526149b085872061471d565b82865260dd8452858581205560cf54828101908111614abf576149d290613f77565b5083875260dc85526149e686882054613f77565b919091614b8557808203614ad3575b50505081855260dc83528385205460cf54828101908111614abf57614a1990613f77565b5054865260dc84528486205560cf548015614aab5701614a3881613f77565b614a975790614a8c600b838860dc9796955588600182015588600282015588600382015588600482015588600582015588600682015588600782015588600882015588600982015588600a820155016146d4565b60cf55845252812055565b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b86526031600452602486fd5b634e487b7160e01b87526011600452602487fd5b600b81614b7d948293548555600182015460018601556002850181600284015416906bffffffffffffffffffffffff60a01b918282541617905560038601826003850154168282541617905560048301546004870155600586018260058501541682825416179055600683015460068701556007860191600784015416908254161790556008810154600885015560098101546009850155600a810154600a85015501910161475d565b3880806149f5565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b6001600160ff1b0382168203614c0457875284872090600190811b8201915b828110614bed5750614898565b808960029255614bfe8382016146d4565b01614be0565b634e487b7160e01b88526011600452602488fd5b6040516301ffc9a760e01b815263caaf0f5760e01b60048201526001600160a01b039190911690602081602481855afa908115614cb457600091614c96575b50156117105760e080546001600160a01b031916821790557fdddcc4cb45c2da1250e71ec604cb86c02f387bdcf776e6447f9bdf7d0ac50b00600080a2565b614cae915060203d81116108195761080b8183613777565b38614c57565b6040513d6000823e3d90fd5b51906001600160a01b038216820361069f57565b60d454604051632474521560e21b81527f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c600482015233602482015290602090829060449082906001600160a01b03165afa908115614cb457600091614d3d575b50156107e057565b614d55915060203d81116108195761080b8183613777565b38614d35565b60df54604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa908115614cb457600091614daf575b50614d9d57565b6040516333df015b60e01b8152600490fd5b614dc7915060203d81116108195761080b8183613777565b38614d96565b60cf5415159081614df3575b5015614de157565b604051631eab2a3b60e31b8152600490fd5b80915060005260dc602052614e0c604060002054613f77565b50541438614dd9565b8115614e1f570490565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220a720e613af2731bd943976220286805b75f9eb0608d67eb705f4e01572db034b64736f6c63430008120033",
  "deployedBytecode": "0x61054080604052600436101561001457600080fd5b60006103805260003560e01c90816301ffc9a71461343a575080630bbabf29146134195780630f2bd839146133c65780631555ec02146132ea5780631785884c146132be578063212d55ec1461329d5780632630c12f146132715780633587647614612daf578063365b03e414612d8e5780633bf7771f14612c945780633f4a2d2714612c685780633f4ba83a14612b4d578063414d19e31461287657806344ff7dc31461284b57806350f413221461281f5780635c975abb146127f957806360fa88e4146127bb57806362ad9e9e146125e0578063659be053146125b457806368a270c11461250d578063777d24c0146124ec5780637b103999146124c05780637fa50567146118c35780638262b7c51461183c5780638456cb5914611722578063898e971a14610d635780638992c91114610d425780639968861e14610d165780639c68a60814610cf5578063a41b4ea414610ca8578063a8905dab14610c74578063ac55640014610958578063b35ac73214610900578063bb8313c2146108df578063bd83eb4c14610820578063c5194ffb14610772578063c66c2536146106d0578063cc2ea79514610472578063d64470e914610417578063d7638a46146103d9578063e3d7bb331461037f578063e92d529a14610350578063ea0341a81461026d5763eb02c3011461020a57600080fd5b34610266576020366003190112610266576004356102266144d7565b5061023081614dcd565b610380515260dc6020526102626102566102506040610380512054613f77565b50614530565b604051918291826135b6565b0390f35b6103805180fd5b346102665760208060031936011261026657600435610380515260d38152604061038051209081549161029f83613fb2565b926102ad6040519485613777565b808452828401809261038051526103805184812090915b83831061032d5750505050604051918083019381845251809452604083019360408160051b850101929161038051955b8287106103015785850386f35b90919293828061031d600193603f198a820301865288516134cd565b96019201960195929190926102f4565b60028660019261033f859a999a613e81565b8152019201920191909594956102c4565b3461026657610380518060031936011261037c5760d8546040516001600160a01b039091168152602090f35b80fd5b34610266576020366003190112610266576004356001600160401b038111610266576103cb6103b56103d1923690600401613589565b60e0546001600160a01b0316929136919061382b565b90613862565b506103805180f35b34610266576020366003190112610266576001600160a01b036103fa613533565b16610380515260d260205260206040610380512054604051908152f35b3461026657604036600319011261026657610430613533565b6024359060018060a01b0316610380515260d1602052610380516040812090815483101561037c5760206104648484613684565b90546040519160031b1c8152f35b346102665760c03660031901126102665761048b61355f565b606435801515810361069f576001600160401b0390608435828111610266576104b89036906004016134ed565b906104c1613f21565b6104c9614d5b565b600435610380515260dc6020526104e66040610380512054613f77565b5060d65460d75460d554604051939893976001600160a01b03918216979282169693909116949291906101008901908111908911176106ba5761054b936101008901604052602435895260018060a01b03166020890152151560408801523691613fc9565b6060850152608084015260a083015260c082015260a43560e0820152602060405180809363f7e2251760e01b8252856004830152604060248301528051604483015260018060a01b038482015116606483015260408101511515608483015260e06105c7606083015161010060a4860152610144850190614380565b60808301516001600160a01b0390811660c486015260a0840151811660e486015260c084015116610104850152910151610124830152038173__$3ea787592ca519a32436565b5d70444cd7$__5af49081156106ac576103805191610675575b507fad6b2ae912630f53b4805f4a0718a98a9cc995c7ac0dd218a8850dd8464a745160408354926001808060a01b0360078701541695015482519182526020820152a3600180556103805180f35b90506020813d6020116106a4575b8161069060209383613777565b8101031261069f575182610627565b600080fd5b3d9150610683565b6040513d61038051823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b34610266576060366003190112610266576106e9613533565b6106f1613549565b906106fa614cd4565b73__$183737d697d7aa9b5df9988cbe11bc4947$__90813b1561026657604051636336129b60e11b81526001600160a01b0391821660048201529216602483015260448035908301526103805190829060649082905af480156106ac57610763575b6103805180f35b61076c906136bf565b8061075c565b346102665760203660031901126102665761078b613533565b60d454604051632474521560e21b815261038051600482015233602482015290602090829060449082906001600160a01b03165afa9081156106ac5761038051916107f2575b50156107e05761075c90614c18565b60405163036be76f60e61b8152600490fd5b610813915060203d8111610819575b61080b8183613777565b810190613798565b826107d1565b503d610801565b34610266576020806003193601126102665760043561083e81614dcd565b610380515260dc815261087f8161085e6102506040610380512054613f77565b60405180938192632ac0a2ad60e21b835284600484015260248301906145c6565b038173__$3ea787592ca519a32436565b5d70444cd7$__5af49081156106ac5761038051916108b2575b50604051908152f35b90508181813d83116108d8575b6108c98183613777565b810103126102665751826108a9565b503d6108bf565b3461026657610380518060031936011261037c57602060da54604051908152f35b3461026657604036600319011261026657610919613533565b610921613549565b9060018060a01b03809116610380515260c96020526103805190604082209216905260205260206040610380512054604051908152f35b346102665761096636613652565b604051622b155960ea1b60208083019190915260248201819052916001600160a01b03908161099482613575565b166044840152838101356101be1982360301811215610266578101906101a08060648601528235928484168094036102665785936101e4850152848782016109db90613575565b16610204850152846109ef60408301613575565b16610224850152606081013561024485015284610a0e60808301613575565b1661026485015260a081013561028485015284610a2d60c08301613575565b166102a485015260e08101356102c485015261010090818101356102e48601526101208082013561030487015261014090818301610a6a906136b2565b1515610324880152610160928381013561034489015261018095868201356103648a01528101610a999161399a565b61038489016101c090526103a4890190610ab2926139cb565b93610ac060408801886139ec565b9560431996878b83030160848c0152610ad892613a34565b610ae560608901896139ec565b8a8303880160a48c0152610af99291613ac6565b610b0660808901896139ec565b8a8303880160c48c0152610b1a9291613ac6565b610b2760a089018961399a565b8a8303880160e48c0152610b3b92916139cb565b610b4860c089018961399a565b8a830388016101048c0152610b5d92916139cb565b610b6a60e089018961399a565b8a830388016101248c0152610b7f92916139cb565b908701610b8c908861399a565b89830387016101448b0152610ba192916139cb565b908601610bae908761399a565b88830386016101648a0152610bc392916139cb565b908501610bd0908661399a565b8783038501610184890152610be592916139cb565b908401610bf2908561399a565b9092868303016101a4870152610c07926139cb565b9101356101c483015203601f1981018352610c229083613777565b60e0541690610c3091613862565b80805181010360a013610266578160a09282015191604081015160608201519085608084015193015193604051958652850152604084015260608301526080820152f35b34610266576040366003190112610266576020610ca0610c92613533565b610c9a613549565b9061465b565b604051908152f35b3461026657604036600319011261026657610cc1613533565b6024359060018060a01b0316610380515260d2602052610380516040812090815483101561037c5760206104648484613684565b3461026657610380518060031936011261037c57602060ce54604051908152f35b3461026657610380518060031936011261037c5760d5546040516001600160a01b039091168152602090f35b3461026657610380518060031936011261037c57602060ca54604051908152f35b61012036600319011261026657610d78613549565b6001600160401b039060443582811161026657610d999036906004016134ed565b92909160843582811161026657610db4903690600401613589565b6101e0526104005260a43582811161026657610dd4903690600401613589565b610220526103e05260c43582811161026657610df4903690600401613589565b6102a0526103a05260e43582811161026657610e149036906004016134ed565b9092610104351161026657610e2f36610104356004016134ed565b610e3a949194613f21565b610e42614d5b565b610e4a613d6b565b9460405193610e588561375c565b610380518552604051610e6a8161375c565b610380519052604051610e7c8161375c565b6103805190526103805193604051610e9381613709565b6103805181526103805160208201526103805160408201526103805160608201526103805160808201526103805160a08201526103805160c08201526103805160e08201526103805161010082015261012061038051910152610ef7600435614dcd565b6001600160a01b038716156117105760d7546001600160a01b031690813b1561026657610f4692610f5d6040519687958694859463f197ce3560e01b8652604060048701526044860191613c90565b906003198483030160248501526103805197613d47565b039134905af180156106ac576116fc575b50610f7f6040518061026052613725565b610f876144d7565b6102605152806020610260510152806040610260510152806060610260510152600435815260dc602052806020610fc46102506040842054613f77565b8061026051520151151560206102605101526116e85750606061026051602081015115159182910152611572575b61026051805160c081015160808201516102e05260208083015160408086015160d65460d75460d5549886015160a08901516060909901519451631dae49b960e21b81526001600160a01b03998a1660048201529489166024860152969d949c939b9615159a9698881697908116969116949193918b604481895afa9a8b156106ac57610380519b611536575b50906110df929160cb549c606061026051015115159e60018060a01b0360d85416610240526110b360405180608052613740565b608051526102e051602060805101526040608051015260018060a01b0316606060805101523691613fc9565b60808051015260643560a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152610160608051015261018060805101526101a060805101526101c060805101526101e06080510152610380516102006080510152610240516102206080510152611166366101e0516104005161382b565b610240608051015261117f36610220516103e05161382b565b6102606080510152611198366102a0516103a05161382b565b610280608051015261136e6101406111d161026051516040519384928392630b2aa09960e11b84526060600485015260648401906145c6565b60031983820301602484015260805151815260206080510151602082015260406080510151604082015260018060a01b03606060805101511660608201526113566113406112ca6112b46112376080805101516102a060808801526102a0870190614380565b60a0608051015160a087015260c0608051015160c087015260018060a01b0360e060805101511660e087015260018060a01b0361010060805101511661010087015260018060a01b03610120608051015116610120870152604060208b60805101518884038d8a015280518452015191816020820152019061348d565b610160608051015185820361016087015261348d565b610180608051015115156101808501526101a060805101516101a08501526101c060805101516101c08501526101e0608051015115156101e0850152610200608051015161020085015260018060a01b03610220608051015116610220850152610240608051015184820361024086015261348d565b610260608051015183820361026085015261348d565b9061028060805101519061028081840391015261348d565b610380516044830152038173__$3ea787592ca519a32436565b5d70444cd7$__5af49081156106ac576103805191611472575b506102605151604081015160e0909101516113cb916001600160a01b039182169116600435614878565b60a081015160c082015160e0830151926001600160a01b03928316929091169060088410156114585761010081015161012090910151604080516001600160a01b039094168452602084019290925290820152600435907f68c1d3a775fd37da20ef77475b9074ee3b57e4d73d94e046e892720b5043ff729080606081015b0390a4600180556103805180f35b634e487b7160e01b61038051526021600452602461038051fd5b9050610140813d6101401161152e575b816114906101409383613777565b8101031261026657604051906114a582613709565b80518252602081015160208301526040810151604083015260608101516060830152608081015160058110156102665760808301526114e660a08201614cc0565b60a08301526114f760c08201614cc0565b60c083015260e0810151906008821015610266576101209160e08401526101008101516101008401520151610120820152816113a1565b3d9150611482565b9291909a506020833d60201161156a575b8161155460209383613777565b81010312610266576110df92519a90919261107f565b3d9150611547565b610260515160a0810151606090910151611598916001600160a01b03918216911661465b565b60406102605101526044602060018060a01b0360d4541660405192838092632474521560e21b82527f5770eb0b3cb4d032328b9b2070b33a4b2779280a0ec69c0dfa26ce7c00bb682860048301523360248301525afa9081156106ac5761038051916116c9575b5015610ff257604061026051015160ce5490610380519180159182156116a9575b505015611697576706f05b59d3b200008101811161167d57806706f05b59d3b2000081011061166b576706f05b59d3b20000670de0b6b3a76400009101046040610260510152610ff2565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b61038051526011600452602461038051fd5b604051631550e8b760e01b8152600490fd5b915091506116c16116ba8383614694565b9283614e15565b148780611620565b6116e2915060203d6020116108195761080b8183613777565b866115ff565b634e487b7160e01b81526021600452602490fd5b61170691506136bf565b6103805186610f6e565b60405163044aa57560e41b8152600490fd5b3461026657610380518060031936011261037c5760d454604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa9081156106ac57610380519161181e575b50156107e05760655460ff81166117e65760019060ff1916176065557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16103805180f35b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b611836915060203d81116108195761080b8183613777565b81611799565b34610266576040366003190112610266576024356001600160401b038111610266576118b26118726103d19236906004016134ed565b6118a4604093929351938492638262b7c560e01b60208501526004356024850152604060448501526064840191613a34565b03601f198101835282613777565b60e0546001600160a01b0316613862565b6118cc36613652565b6101a0526118d8613f21565b60a06101a0510135600781101561026657156107e0576118f6614d5b565b5a61046052610380516103405261190b613d6b565b610340526101a05160608101359035610380515260d360205260406103805120805482106124a2575b5050611a146101a05161194960208201613ea6565b6102c05261195a6040820182613eba565b61032052610100526119f76119726080830183613eef565b91909261198260c0820182613eef565b610280526101605261199760e0820182613eef565b95906119a7610120840184613eef565b61018052610140526119bd610140840184613eef565b6102005260a052611a096119d5610100850185613eef565b919092611a016119e9610160880188613eba565b989097610180810190613eba565b9a9099369161382b565b99369161382b565b61044052369161382b565b60c052610380516101c052604051611a2b81613709565b6103805181526103805160208201526103805160408201526103805160608201526103805160808201526103805160a08201526103805160c08201526103805160e08201526103805161010082015261012061038051910152611a916101a05135614dcd565b6102c0516001600160a01b0316156117105760d7546001600160a01b031690813b1561026657610f4692611ae36040519687958694859463f197ce3560e01b8652604060048701526044860191613c90565b039134905af180156106ac5761248b575b50611b056040518061042052613725565b611b0d6144d7565b61042051526101c05160206104205101526101c05160406104205101526101c05160606104205101526101a051356101c0515260dc602052611b94611b5b61025060406101c0512054613f77565b6104208051829052602080830151825190151591015251600160609182015260a08201519101516001600160a01b03908116911661465b565b60406104205101526044602060018060a01b0360d4541660405192838092632474521560e21b82527f5770eb0b3cb4d032328b9b2070b33a4b2779280a0ec69c0dfa26ce7c00bb682860048301523360248301525afa908115612293576101c0519161246c575b506123d3575b61042051805160c081015160808201516101205260208083015160e05260408085015160d65460d75460d5549785015160a08801516060909801519451631dae49b960e21b81526001600160a01b03988916600482015294881660248601529598939795151596939584169490841693909116919087604481865afa968715612293576101c0519761239f575b5060cb5497606061042051015115156103c05260018060a01b0360d8541661036052611cc06040518061030052613740565b610300515261012051602061030051015260e051604061030051015260018060a01b036102c051166060610300510152611d01366103205161010051613fc9565b60806103005101526101c05160a061030051015260c061030051015260e0610300510152610100610300510152610120610300510152610340516101406103005101526101606103005101526101806103005101526101a06103005101526101c06103005101526103c0516101e06103005101526104605161020061030051015261036051610220610300510152611da036610280516101605161382b565b610240610300510152611dba36610180516101405161382b565b610260610300510152611dd3366102005160a05161382b565b610280610300510152611fbe610140611e0d61042051516040519384928392630b2aa09960e11b84526060600485015260648401906145c6565b60031983820301602484015261030051518152602061030051015160208201526040610300510151604082015260018060a01b036060610300510151166060820152611fa5611f8e611f11611efa611e7760806103005101516102a0806080890152870190614380565b60a061030051015160a087015260c061030051015160c087015260018060a01b0360e06103005101511660e087015260018060a01b036101006103005101511661010087015260018060a01b0361012061030051015116610120870152604060208b6103005101518884038d8a015280518452015191816020820152019061348d565b61016061030051015185820361016087015261348d565b61018061030051015115156101808501526101a06103005101516101a08501526101c06103005101516101c08501526101e061030051015115156101e085015261020061030051015161020085015260018060a01b036102206103005101511661022085015261024061030051015184820361024086015261348d565b61026061030051015183820361026085015261348d565b906102806103005101519061028081840391015261348d565b60a06101a05101356044830152038173__$3ea787592ca519a32436565b5d70444cd7$",
  "libraries": {
    "PositionLibrary": "0xe381eF4cbc2e732251Ae357629dF8b1Ec82Fb8F5",
    "TokenTransfersLibrary": "0xD1869a3C77C17D185c9a5e8904e0e4867e5EB1D9"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "closePosition(uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes[][],uint256[])": {
        "details": "Protocol will fall down (revert) if two conditions occur both: 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1, so position will make loss for Protocol. 2. Not enough liquidity in bucket to pay that loss.",
        "params": {
          "_amountOutMin": "minimum allowed amount out for position",
          "_dealReceiver": "The receiver of the rest of trader's deposit.",
          "_id": "Position id for `msg.sender`.",
          "_megaRoutes": "swap routes on dexes"
        }
      },
      "decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])": {
        "params": {
          "_amount": "The amount to decrease the deposit by.",
          "_positionId": "The ID of the position."
        }
      },
      "deletePositions(uint256[],address[],uint256,address)": {
        "params": {
          "_bucket": "The address of the bucket from which the position is to be deleted.",
          "_ids": "The IDs of the positions to be deleted.",
          "_length": "The length of the traders array.",
          "_traders": "The addresses of the traders who owns the position."
        }
      },
      "doTransferOut(address,address,uint256)": {
        "details": "Only callable by the BATCH_MANAGER_ROLE role.",
        "params": {
          "_amount": "The amount of tokens to be transferred.",
          "_to": "The address to which the tokens will be transferred.",
          "_token": "The address of the token to be transferred."
        }
      },
      "getAllPositionsLength()": {
        "returns": {
          "_0": "The length of the positions array."
        }
      },
      "getBucketPositionsLength(address)": {
        "params": {
          "_bucket": "The address of the bucket."
        },
        "returns": {
          "_0": "The number of positions the bucket has."
        }
      },
      "getCloseCondition(uint256,uint256)": {
        "params": {
          "_index": "The index of the close condition.",
          "_positionId": "The identifier of the position."
        },
        "returns": {
          "_0": "The close condition at the specified position and index."
        }
      },
      "getCloseConditions(uint256)": {
        "params": {
          "_positionId": "The ID of the position."
        },
        "returns": {
          "_0": "An array of close conditions associated with the position."
        }
      },
      "getOracleTolerableLimit(address,address)": {
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair."
        },
        "returns": {
          "_0": "The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair."
        }
      },
      "getPosition(uint256)": {
        "params": {
          "_id": "The ID of the position to retrieve."
        },
        "returns": {
          "_0": "position The position information associated with the given ID."
        }
      },
      "getPositionByIndex(uint256)": {
        "params": {
          "_index": "The index of the position to retrieve."
        },
        "returns": {
          "_0": "The Position struct at the specified index."
        }
      },
      "getPositionDebt(uint256)": {
        "params": {
          "_id": "The ID of the position."
        },
        "returns": {
          "_0": "The debt of the position, measured in the same decimal format as debtTokens."
        }
      },
      "getTraderPositionsLength(address)": {
        "params": {
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "The number of positions the trader has."
        }
      },
      "increaseDeposit(uint256,uint256,address,bool,(uint256,(address,(string,uint256,bytes)[])[])[],uint256)": {
        "params": {
          "_amount": "The amount to increase the deposit by.",
          "_amountOutMin": "The minimum amount of the output asset to receive from trading.",
          "_asset": "The address of the asset to deposit.",
          "_megaRoutes": "An array of routes to use for trading.",
          "_positionId": "The ID of the position to increase the deposit for.",
          "_takeDepositFromWallet": "A flag indicating whether to make the deposit immediately."
        }
      },
      "initialize(address,address,address,address,address,address,address)": {
        "params": {
          "_keeperRewardDistributor": "The address of the KeeperRewardDistributor contract.",
          "_positionManagerExtension": "The address of the PositionManagerExtension contract.",
          "_priceOracle": "The address of the PriceOracle contract.",
          "_primexDNS": "The address of the PrimexDNS contract.",
          "_registry": "The address of the Registry contract.",
          "_traderBalanceVault": "The address of the TraderBalanceVault contract.",
          "_whiteBlackList": "The address of the WhiteBlacklist contract."
        }
      },
      "isDelistedPosition(uint256)": {
        "params": {
          "_id": "The ID of the position."
        },
        "returns": {
          "_0": "A boolean indicating whether the position is delisted or not."
        }
      },
      "openPosition(((string,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]),(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256,address,uint256,uint256,bool,bool,(uint256,bytes)[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))": {
        "details": "Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal. Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'. Mints debtToken for trader (msg.sender)",
        "params": {
          "_params": "The parameters required to open a position."
        }
      },
      "openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),(uint256,bytes)[],(uint256,(address,(string,uint256,bytes)[])[])[],(uint256,(address,(string,uint256,bytes)[])[])[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))": {
        "details": "Only callable by the LOM_ROLE role.",
        "params": {
          "_params": "The parameters for opening a position."
        },
        "returns": {
          "_0": "The total borrowed amount, position amount, position ID, and entry price of the new position."
        }
      },
      "partiallyClosePosition(uint256,uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])": {
        "params": {
          "_amount": "The amount of the position asset to be closed from the position.",
          "_amountOutMin": "The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.",
          "_depositReceiver": "The address where the remaining deposit will be sent.",
          "_megaRoutes": "The routing information for swapping assets.",
          "_positionId": "The ID of the position to be partially closed."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setPositionManagerExtension(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_newPositionManagerExtension": "The address of PositionManagerExtension contract."
        }
      },
      "setProtocolParamsByAdmin(bytes)": {
        "details": "This function allows an admin to update protocol parameters using a delegatecall to the PositionManagerExtension contract.",
        "params": {
          "_data": "The data containing the encoded function call to be executed by the delegatecall."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused."
      },
      "updatePositionConditions(uint256,(uint256,bytes)[])": {
        "details": "The caller of this function must be the trader who owns the position.Emits an `UpdatePositionConditions` event upon successful update.",
        "params": {
          "_closeConditions": "An array of close conditions for the position.",
          "_positionId": "The ID of the position to update."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closePosition(uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes[][],uint256[])": {
        "notice": "Close trader's active position or liquidate risky position."
      },
      "decreaseDeposit(uint256,uint256,bytes,bytes,bytes[][],uint256[])": {
        "notice": "Decreases the deposit amount for a given position."
      },
      "deletePositions(uint256[],address[],uint256,address)": {
        "notice": "Deletes a positions by their IDs from a specific bucket for a given traders."
      },
      "doTransferOut(address,address,uint256)": {
        "notice": "Transfers a specified amount of tokens from the contract to a specified address."
      },
      "getAllPositionsLength()": {
        "notice": "Returns the length of the positions array."
      },
      "getBucketPositionsLength(address)": {
        "notice": "Returns the length of the array containing the positions of a specific bucket."
      },
      "getCloseCondition(uint256,uint256)": {
        "notice": "Retrieves the close condition for a given position and index."
      },
      "getCloseConditions(uint256)": {
        "notice": "Retrieves the close conditions for a specific position."
      },
      "getOracleTolerableLimit(address,address)": {
        "notice": "Returns the oracle tolerable limit for the given asset pair."
      },
      "getPosition(uint256)": {
        "notice": "Retrieves the position information for a given ID."
      },
      "getPositionByIndex(uint256)": {
        "notice": "Retrieves the position at the specified index."
      },
      "getPositionDebt(uint256)": {
        "notice": "Returns the debt of a position with the given ID."
      },
      "getTraderPositionsLength(address)": {
        "notice": "Returns the length of the array containing the positions of a specific trader."
      },
      "increaseDeposit(uint256,uint256,address,bool,(uint256,(address,(string,uint256,bytes)[])[])[],uint256)": {
        "notice": "Increases the deposit amount for a given position."
      },
      "initialize(address,address,address,address,address,address,address)": {
        "notice": "Initializes the contract with the specified addresses and initializes inherited contracts."
      },
      "isDelistedPosition(uint256)": {
        "notice": "Checks if a position with the given ID is delisted."
      },
      "openPosition(((string,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]),(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256,address,uint256,uint256,bool,bool,(uint256,bytes)[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes[][],uint256[]))": {
        "notice": "Opens margin position."
      },
      "openPositionByOrder((address,(address,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bool,uint256,uint256,bytes),(uint256,bytes)[],(uint256,(address,(string,uint256,bytes)[])[])[],(uint256,(address,(string,uint256,bytes)[])[])[],bytes,bytes,bytes,bytes,bytes,bytes,bytes,uint256))": {
        "notice": "Opens a position based on the provided order parameters."
      },
      "partiallyClosePosition(uint256,uint256,address,(uint256,(address,(string,uint256,bytes)[])[])[],uint256,bytes,bytes,bytes,bytes,bytes[][],uint256[])": {
        "notice": "Allows the trader to partially close a position."
      },
      "setPositionManagerExtension(address)": {
        "notice": "Sets the positionManagerExtension."
      },
      "setProtocolParamsByAdmin(bytes)": {
        "notice": "Sets protocol parameters through an administrative delegatecall."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "updatePositionConditions(uint256,(uint256,bytes)[])": {
        "notice": "Updates the position with the given position ID by setting new close conditions."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3193,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5867,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3073,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 3178,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6506,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 50806,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "maxPositionSize",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 50809,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "defaultOracleTolerableLimit",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 50812,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "securityBuffer",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 50815,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "maintenanceBuffer",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 50821,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "oracleTolerableLimits",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 50823,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "oracleTolerableLimitMultiplier",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 50827,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "positions",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_struct(Position)76111_storage)dyn_storage"
      },
      {
        "astId": 50830,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "positionsId",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 50836,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "traderPositionIds",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 50842,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "bucketPositionIds",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 50848,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "closeConditions",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_array(t_struct(Condition)74668_storage)dyn_storage)"
      },
      {
        "astId": 50852,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "registry",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(IAccessControl)7879"
      },
      {
        "astId": 50856,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "traderBalanceVault",
        "offset": 0,
        "slot": "213",
        "type": "t_contract(ITraderBalanceVault)63246"
      },
      {
        "astId": 50860,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "primexDNS",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IPrimexDNSV3)53782"
      },
      {
        "astId": 50864,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "priceOracle",
        "offset": 0,
        "slot": "215",
        "type": "t_contract(IPriceOracleV2)51202"
      },
      {
        "astId": 50868,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "keeperRewardDistributor",
        "offset": 0,
        "slot": "216",
        "type": "t_contract(IKeeperRewardDistributorV3)38352"
      },
      {
        "astId": 50872,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "spotTradingRewardDistributor",
        "offset": 0,
        "slot": "217",
        "type": "t_contract(ISpotTradingRewardDistributorV2)58332"
      },
      {
        "astId": 50875,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "minPositionSize",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 50878,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "minPositionAsset",
        "offset": 0,
        "slot": "219",
        "type": "t_address"
      },
      {
        "astId": 50882,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "positionIndexes",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 50886,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "traderPositionIndexes",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 50890,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "bucketPositionIndexes",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 50893,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "whiteBlackList",
        "offset": 0,
        "slot": "223",
        "type": "t_contract(IWhiteBlackList)66205"
      },
      {
        "astId": 50901,
        "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
        "label": "positionManagerExtension",
        "offset": 0,
        "slot": "224",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Condition)74668_storage)dyn_storage": {
        "base": "t_struct(Condition)74668_storage",
        "encoding": "dynamic_array",
        "label": "struct LimitOrderLibrary.Condition[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Position)76111_storage)dyn_storage": {
        "base": "t_struct(Position)76111_storage",
        "encoding": "dynamic_array",
        "label": "struct PositionLibrary.Position[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAccessControl)7879": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IBucketV3)30575": {
        "encoding": "inplace",
        "label": "contract IBucketV3",
        "numberOfBytes": "20"
      },
      "t_contract(IKeeperRewardDistributorV3)38352": {
        "encoding": "inplace",
        "label": "contract IKeeperRewardDistributorV3",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleV2)51202": {
        "encoding": "inplace",
        "label": "contract IPriceOracleV2",
        "numberOfBytes": "20"
      },
      "t_contract(IPrimexDNSV3)53782": {
        "encoding": "inplace",
        "label": "contract IPrimexDNSV3",
        "numberOfBytes": "20"
      },
      "t_contract(ISpotTradingRewardDistributorV2)58332": {
        "encoding": "inplace",
        "label": "contract ISpotTradingRewardDistributorV2",
        "numberOfBytes": "20"
      },
      "t_contract(ITraderBalanceVault)63246": {
        "encoding": "inplace",
        "label": "contract ITraderBalanceVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWhiteBlackList)66205": {
        "encoding": "inplace",
        "label": "contract IWhiteBlackList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Condition)74668_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LimitOrderLibrary.Condition[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Condition)74668_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Condition)74668_storage": {
        "encoding": "inplace",
        "label": "struct LimitOrderLibrary.Condition",
        "members": [
          {
            "astId": 74665,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "managerType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 74667,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "params",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)76111_storage": {
        "encoding": "inplace",
        "label": "struct PositionLibrary.Position",
        "members": [
          {
            "astId": 76087,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 76089,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "scaledDebtAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 76092,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "bucket",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IBucketV3)30575"
          },
          {
            "astId": 76094,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "soldAsset",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 76096,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "depositAmountInSoldAsset",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 76098,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "positionAsset",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 76100,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "positionAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 76102,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "trader",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 76104,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "openBorrowIndex",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 76106,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "createdAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 76108,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "updatedConditionsAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 76110,
            "contract": "contracts/PositionManager/PositionManager.sol:PositionManager",
            "label": "extraParams",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}