/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPositionManagerEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DecreaseDeposit(uint256,address,uint256,uint256)": EventFragment;
    "KeeperRewardDistributorChanged(address)": EventFragment;
    "MaintenanceBufferChanged(uint256)": EventFragment;
    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])": EventFragment;
    "OracleTolerableLimitMultiplierChanged(uint256)": EventFragment;
    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)": EventFragment;
    "SecurityBufferChanged(uint256)": EventFragment;
    "SetDefaultOracleTolerableLimit(uint256)": EventFragment;
    "SetMaxPositionSize(address,address,uint256,uint256)": EventFragment;
    "SetOracleTolerableLimit(address,address,uint256)": EventFragment;
    "UpdatePositionConditions(uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreaseDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "KeeperRewardDistributorChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaintenanceBufferChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleTolerableLimitMultiplierChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecurityBufferChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDefaultOracleTolerableLimit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPositionSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleTolerableLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionConditions"): EventFragment;
}

export type DecreaseDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    positionId: BigNumber;
    trader: string;
    depositDelta: BigNumber;
    scaledDebtAmount: BigNumber;
  }
>;

export type KeeperRewardDistributorChangedEvent = TypedEvent<
  [string] & { _keeperRewardDistributor: string }
>;

export type MaintenanceBufferChangedEvent = TypedEvent<
  [BigNumber] & { maintenanceBuffer: BigNumber }
>;

export type OpenPositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    },
    BigNumber,
    BigNumber,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    openedBy: string;
    position: [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      scaledDebtAmount: BigNumber;
      bucket: string;
      soldAsset: string;
      depositAmountInSoldAsset: BigNumber;
      positionAsset: string;
      positionAmount: BigNumber;
      trader: string;
      openBorrowIndex: BigNumber;
      createdAt: BigNumber;
      updatedConditionsAt: BigNumber;
      extraParams: string;
    };
    entryPrice: BigNumber;
    leverage: BigNumber;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export type OracleTolerableLimitMultiplierChangedEvent = TypedEvent<
  [BigNumber] & { newMultiplier: BigNumber }
>;

export type PartialClosePositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionId: BigNumber;
    trader: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: BigNumber;
    depositedAmount: BigNumber;
    scaledDebtAmount: BigNumber;
    profit: BigNumber;
    positionDebt: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SecurityBufferChangedEvent = TypedEvent<
  [BigNumber] & { securityBuffer: BigNumber }
>;

export type SetDefaultOracleTolerableLimitEvent = TypedEvent<
  [BigNumber] & { oracleTolerableLimit: BigNumber }
>;

export type SetMaxPositionSizeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token0: string;
    token1: string;
    amountInToken0: BigNumber;
    amountInToken1: BigNumber;
  }
>;

export type SetOracleTolerableLimitEvent = TypedEvent<
  [string, string, BigNumber] & {
    assetA: string;
    assetB: string;
    oracleTolerableLimit: BigNumber;
  }
>;

export type UpdatePositionConditionsEvent = TypedEvent<
  [
    BigNumber,
    string,
    ([BigNumber, string] & { managerType: BigNumber; params: string })[]
  ] & {
    positionId: BigNumber;
    trader: string;
    closeConditions: ([BigNumber, string] & {
      managerType: BigNumber;
      params: string;
    })[];
  }
>;

export class IPositionManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPositionManagerEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "DecreaseDeposit(uint256,address,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    DecreaseDeposit(
      positionId?: BigNumberish | null,
      trader?: string | null,
      depositDelta?: null,
      scaledDebtAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionId: BigNumber;
        trader: string;
        depositDelta: BigNumber;
        scaledDebtAmount: BigNumber;
      }
    >;

    "KeeperRewardDistributorChanged(address)"(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    KeeperRewardDistributorChanged(
      _keeperRewardDistributor?: string | null
    ): TypedEventFilter<[string], { _keeperRewardDistributor: string }>;

    "MaintenanceBufferChanged(uint256)"(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    MaintenanceBufferChanged(
      maintenanceBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { maintenanceBuffer: BigNumber }>;

    "OpenPosition(uint256,address,address,tuple,uint256,uint256,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    OpenPosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      openedBy?: string | null,
      position?: null,
      entryPrice?: null,
      leverage?: null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        },
        BigNumber,
        BigNumber,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        openedBy: string;
        position: [
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          scaledDebtAmount: BigNumber;
          bucket: string;
          soldAsset: string;
          depositAmountInSoldAsset: BigNumber;
          positionAsset: string;
          positionAmount: BigNumber;
          trader: string;
          openBorrowIndex: BigNumber;
          createdAt: BigNumber;
          updatedConditionsAt: BigNumber;
          extraParams: string;
        };
        entryPrice: BigNumber;
        leverage: BigNumber;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    "OracleTolerableLimitMultiplierChanged(uint256)"(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    OracleTolerableLimitMultiplierChanged(
      newMultiplier?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    PartialClosePosition(
      positionId?: BigNumberish | null,
      trader?: string | null,
      bucketAddress?: null,
      soldAsset?: null,
      positionAsset?: null,
      decreasePositionAmount?: null,
      depositedAmount?: null,
      scaledDebtAmount?: null,
      profit?: null,
      positionDebt?: null,
      amountOut?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        positionId: BigNumber;
        trader: string;
        bucketAddress: string;
        soldAsset: string;
        positionAsset: string;
        decreasePositionAmount: BigNumber;
        depositedAmount: BigNumber;
        scaledDebtAmount: BigNumber;
        profit: BigNumber;
        positionDebt: BigNumber;
        amountOut: BigNumber;
      }
    >;

    "SecurityBufferChanged(uint256)"(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    SecurityBufferChanged(
      securityBuffer?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { securityBuffer: BigNumber }>;

    "SetDefaultOracleTolerableLimit(uint256)"(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    SetDefaultOracleTolerableLimit(
      oracleTolerableLimit?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { oracleTolerableLimit: BigNumber }>;

    "SetMaxPositionSize(address,address,uint256,uint256)"(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    SetMaxPositionSize(
      token0?: null,
      token1?: null,
      amountInToken0?: null,
      amountInToken1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token0: string;
        token1: string;
        amountInToken0: BigNumber;
        amountInToken1: BigNumber;
      }
    >;

    "SetOracleTolerableLimit(address,address,uint256)"(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    SetOracleTolerableLimit(
      assetA?: string | null,
      assetB?: string | null,
      oracleTolerableLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; oracleTolerableLimit: BigNumber }
    >;

    "UpdatePositionConditions(uint256,address,tuple[])"(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;

    UpdatePositionConditions(
      positionId?: BigNumberish | null,
      trader?: string | null,
      closeConditions?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([BigNumber, string] & { managerType: BigNumber; params: string })[]
      ],
      {
        positionId: BigNumber;
        trader: string;
        closeConditions: ([BigNumber, string] & {
          managerType: BigNumber;
          params: string;
        })[];
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
