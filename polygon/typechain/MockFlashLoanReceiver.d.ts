/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockFlashLoanReceiverInterface extends ethers.utils.Interface {
  functions: {
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "getAmountToApprove()": FunctionFragment;
    "setAmountToApprove(uint256)": FunctionFragment;
    "setFailExecutionTransfer(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToApprove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToApprove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailExecutionTransfer",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailExecutionTransfer",
    data: BytesLike
  ): Result;

  events: {
    "ExecutedWithFail(address[],uint256[],uint256[])": EventFragment;
    "ExecutedWithSuccess(address[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutedWithFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedWithSuccess"): EventFragment;
}

export type ExecutedWithFailEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    _assets: string[];
    _amounts: BigNumber[];
    _flashLoanFees: BigNumber[];
  }
>;

export type ExecutedWithSuccessEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    _assets: string[];
    _amounts: BigNumber[];
    _flashLoanFees: BigNumber[];
  }
>;

export class MockFlashLoanReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockFlashLoanReceiverInterface;

  functions: {
    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      flashLoanFees: BigNumberish[],
      arg3: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountToApprove(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAmountToApprove(
      amountToApprove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFailExecutionTransfer(
      fail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    flashLoanFees: BigNumberish[],
    arg3: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountToApprove(overrides?: CallOverrides): Promise<BigNumber>;

  setAmountToApprove(
    amountToApprove: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFailExecutionTransfer(
    fail: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      flashLoanFees: BigNumberish[],
      arg3: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountToApprove(overrides?: CallOverrides): Promise<BigNumber>;

    setAmountToApprove(
      amountToApprove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailExecutionTransfer(
      fail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExecutedWithFail(address[],uint256[],uint256[])"(
      _assets?: null,
      _amounts?: null,
      _flashLoanFees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { _assets: string[]; _amounts: BigNumber[]; _flashLoanFees: BigNumber[] }
    >;

    ExecutedWithFail(
      _assets?: null,
      _amounts?: null,
      _flashLoanFees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { _assets: string[]; _amounts: BigNumber[]; _flashLoanFees: BigNumber[] }
    >;

    "ExecutedWithSuccess(address[],uint256[],uint256[])"(
      _assets?: null,
      _amounts?: null,
      _flashLoanFees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { _assets: string[]; _amounts: BigNumber[]; _flashLoanFees: BigNumber[] }
    >;

    ExecutedWithSuccess(
      _assets?: null,
      _amounts?: null,
      _flashLoanFees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { _assets: string[]; _amounts: BigNumber[]; _flashLoanFees: BigNumber[] }
    >;
  };

  estimateGas: {
    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      flashLoanFees: BigNumberish[],
      arg3: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountToApprove(overrides?: CallOverrides): Promise<BigNumber>;

    setAmountToApprove(
      amountToApprove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFailExecutionTransfer(
      fail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      flashLoanFees: BigNumberish[],
      arg3: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountToApprove(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAmountToApprove(
      amountToApprove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFailExecutionTransfer(
      fail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
