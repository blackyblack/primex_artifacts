/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryV2Interface extends ethers.utils.Interface {
  functions: {
    "canTransferByTime(address,address)": FunctionFragment;
    "decreaseLimits(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "initialTimestamp()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registry()": FunctionFragment;
    "setMaxSpendingLimit(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
    "spenders(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "testUpgrade()": FunctionFragment;
    "transferFromTreasury(uint256,address,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "value()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canTransferByTime",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLimits",
    values: [
      string,
      string,
      {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxSpendingLimit",
    values: [
      string,
      string,
      {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spenders",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromTreasury",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "canTransferByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSpendingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "MaxSpendingLimitChanged(address,address,tuple)": EventFragment;
    "Paused(address)": EventFragment;
    "TransferFromTreasury(address,address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSpendingLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFromTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MaxSpendingLimitChangedEvent = TypedEvent<
  [
    string,
    string,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxTotalAmount: BigNumber;
      maxAmountPerTransfer: BigNumber;
      maxPercentPerTransfer: BigNumber;
      minTimeBetweenTransfers: BigNumber;
      timeframeDuration: BigNumber;
      maxAmountDuringTimeframe: BigNumber;
    }
  ] & {
    spender: string;
    token: string;
    newSpendingLimits: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      maxTotalAmount: BigNumber;
      maxAmountPerTransfer: BigNumber;
      maxPercentPerTransfer: BigNumber;
      minTimeBetweenTransfers: BigNumber;
      timeframeDuration: BigNumber;
      maxAmountDuringTimeframe: BigNumber;
    };
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type TransferFromTreasuryEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    spender: string;
    receiver: string;
    token: string;
    amount: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class TreasuryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryV2Interface;

  functions: {
    canTransferByTime(
      _spender: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decreaseLimits(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setMaxSpendingLimit(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spenders(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        isSpenderExist: boolean;
        limits: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        };
        lastWithdrawalTimestamp: BigNumber;
        withdrawnDuringTimeframe: BigNumber;
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testUpgrade(overrides?: CallOverrides): Promise<[string]>;

    transferFromTreasury(
      _amount: BigNumberish,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  canTransferByTime(
    _spender: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decreaseLimits(
    _spender: string,
    _token: string,
    _newSpendingLimits: {
      maxTotalAmount: BigNumberish;
      maxAmountPerTransfer: BigNumberish;
      maxPercentPerTransfer: BigNumberish;
      minTimeBetweenTransfers: BigNumberish;
      timeframeDuration: BigNumberish;
      maxAmountDuringTimeframe: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  setMaxSpendingLimit(
    _spender: string,
    _token: string,
    _newSpendingLimits: {
      maxTotalAmount: BigNumberish;
      maxAmountPerTransfer: BigNumberish;
      maxPercentPerTransfer: BigNumberish;
      minTimeBetweenTransfers: BigNumberish;
      timeframeDuration: BigNumberish;
      maxAmountDuringTimeframe: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValue(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spenders(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxTotalAmount: BigNumber;
        maxAmountPerTransfer: BigNumber;
        maxPercentPerTransfer: BigNumber;
        minTimeBetweenTransfers: BigNumber;
        timeframeDuration: BigNumber;
        maxAmountDuringTimeframe: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      isSpenderExist: boolean;
      limits: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        maxTotalAmount: BigNumber;
        maxAmountPerTransfer: BigNumber;
        maxPercentPerTransfer: BigNumber;
        minTimeBetweenTransfers: BigNumber;
        timeframeDuration: BigNumber;
        maxAmountDuringTimeframe: BigNumber;
      };
      lastWithdrawalTimestamp: BigNumber;
      withdrawnDuringTimeframe: BigNumber;
    }
  >;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testUpgrade(overrides?: CallOverrides): Promise<string>;

  transferFromTreasury(
    _amount: BigNumberish,
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    canTransferByTime(
      _spender: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseLimits(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_registry: string, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    setMaxSpendingLimit(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setValue(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    spenders(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        isSpenderExist: boolean;
        limits: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        };
        lastWithdrawalTimestamp: BigNumber;
        withdrawnDuringTimeframe: BigNumber;
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testUpgrade(overrides?: CallOverrides): Promise<string>;

    transferFromTreasury(
      _amount: BigNumberish,
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "MaxSpendingLimitChanged(address,address,tuple)"(
      spender?: string | null,
      token?: string | null,
      newSpendingLimits?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        }
      ],
      {
        spender: string;
        token: string;
        newSpendingLimits: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        };
      }
    >;

    MaxSpendingLimitChanged(
      spender?: string | null,
      token?: string | null,
      newSpendingLimits?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        }
      ],
      {
        spender: string;
        token: string;
        newSpendingLimits: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maxTotalAmount: BigNumber;
          maxAmountPerTransfer: BigNumber;
          maxPercentPerTransfer: BigNumber;
          minTimeBetweenTransfers: BigNumber;
          timeframeDuration: BigNumber;
          maxAmountDuringTimeframe: BigNumber;
        };
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "TransferFromTreasury(address,address,address,uint256)"(
      spender?: string | null,
      receiver?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { spender: string; receiver: string; token: string; amount: BigNumber }
    >;

    TransferFromTreasury(
      spender?: string | null,
      receiver?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { spender: string; receiver: string; token: string; amount: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    canTransferByTime(
      _spender: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseLimits(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxSpendingLimit(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spenders(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromTreasury(
      _amount: BigNumberish,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canTransferByTime(
      _spender: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseLimits(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxSpendingLimit(
      _spender: string,
      _token: string,
      _newSpendingLimits: {
        maxTotalAmount: BigNumberish;
        maxAmountPerTransfer: BigNumberish;
        maxPercentPerTransfer: BigNumberish;
        minTimeBetweenTransfers: BigNumberish;
        timeframeDuration: BigNumberish;
        maxAmountDuringTimeframe: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValue(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spenders(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFromTreasury(
      _amount: BigNumberish,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
