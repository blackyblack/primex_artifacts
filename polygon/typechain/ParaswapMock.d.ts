/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ParaswapMockInterface extends ethers.utils.Interface {
  functions: {
    "buy((address,address,address,uint256,uint256,uint256,address,tuple[],address,uint256,bytes,uint256,bytes16))": FunctionFragment;
    "getTokenTransferProxy()": FunctionFragment;
    "megaSwap((address,uint256,uint256,uint256,address,tuple[],address,uint256,bytes,uint256,bytes16))": FunctionFragment;
    "multiSwap((address,uint256,uint256,uint256,address,tuple[],address,uint256,bytes,uint256,bytes16))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [
      {
        adapter: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        route: {
          index: BigNumberish;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTransferProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "megaSwap",
    values: [
      {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          fromAmountPercent: BigNumberish;
          path: {
            to: string;
            totalNetworkFee: BigNumberish;
            adapters: {
              adapter: string;
              percent: BigNumberish;
              networkFee: BigNumberish;
              route: {
                index: BigNumberish;
                targetExchange: string;
                percent: BigNumberish;
                payload: BytesLike;
                networkFee: BigNumberish;
              }[];
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSwap",
    values: [
      {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTransferProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "megaSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiSwap", data: BytesLike): Result;

  events: {};
}

export class ParaswapMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParaswapMockInterface;

  functions: {
    buy(
      data: {
        adapter: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        route: {
          index: BigNumberish;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenTransferProxy(overrides?: CallOverrides): Promise<[string]>;

    megaSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          fromAmountPercent: BigNumberish;
          path: {
            to: string;
            totalNetworkFee: BigNumberish;
            adapters: {
              adapter: string;
              percent: BigNumberish;
              networkFee: BigNumberish;
              route: {
                index: BigNumberish;
                targetExchange: string;
                percent: BigNumberish;
                payload: BytesLike;
                networkFee: BigNumberish;
              }[];
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    data: {
      adapter: string;
      fromToken: string;
      toToken: string;
      fromAmount: BigNumberish;
      toAmount: BigNumberish;
      expectedAmount: BigNumberish;
      beneficiary: string;
      route: {
        index: BigNumberish;
        targetExchange: string;
        percent: BigNumberish;
        payload: BytesLike;
        networkFee: BigNumberish;
      }[];
      partner: string;
      feePercent: BigNumberish;
      permit: BytesLike;
      deadline: BigNumberish;
      uuid: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenTransferProxy(overrides?: CallOverrides): Promise<string>;

  megaSwap(
    data: {
      fromToken: string;
      fromAmount: BigNumberish;
      toAmount: BigNumberish;
      expectedAmount: BigNumberish;
      beneficiary: string;
      path: {
        fromAmountPercent: BigNumberish;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
      }[];
      partner: string;
      feePercent: BigNumberish;
      permit: BytesLike;
      deadline: BigNumberish;
      uuid: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiSwap(
    data: {
      fromToken: string;
      fromAmount: BigNumberish;
      toAmount: BigNumberish;
      expectedAmount: BigNumberish;
      beneficiary: string;
      path: {
        to: string;
        totalNetworkFee: BigNumberish;
        adapters: {
          adapter: string;
          percent: BigNumberish;
          networkFee: BigNumberish;
          route: {
            index: BigNumberish;
            targetExchange: string;
            percent: BigNumberish;
            payload: BytesLike;
            networkFee: BigNumberish;
          }[];
        }[];
      }[];
      partner: string;
      feePercent: BigNumberish;
      permit: BytesLike;
      deadline: BigNumberish;
      uuid: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      data: {
        adapter: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        route: {
          index: BigNumberish;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTransferProxy(overrides?: CallOverrides): Promise<string>;

    megaSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          fromAmountPercent: BigNumberish;
          path: {
            to: string;
            totalNetworkFee: BigNumberish;
            adapters: {
              adapter: string;
              percent: BigNumberish;
              networkFee: BigNumberish;
              route: {
                index: BigNumberish;
                targetExchange: string;
                percent: BigNumberish;
                payload: BytesLike;
                networkFee: BigNumberish;
              }[];
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buy(
      data: {
        adapter: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        route: {
          index: BigNumberish;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenTransferProxy(overrides?: CallOverrides): Promise<BigNumber>;

    megaSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          fromAmountPercent: BigNumberish;
          path: {
            to: string;
            totalNetworkFee: BigNumberish;
            adapters: {
              adapter: string;
              percent: BigNumberish;
              networkFee: BigNumberish;
              route: {
                index: BigNumberish;
                targetExchange: string;
                percent: BigNumberish;
                payload: BytesLike;
                networkFee: BigNumberish;
              }[];
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      data: {
        adapter: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        route: {
          index: BigNumberish;
          targetExchange: string;
          percent: BigNumberish;
          payload: BytesLike;
          networkFee: BigNumberish;
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenTransferProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    megaSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          fromAmountPercent: BigNumberish;
          path: {
            to: string;
            totalNetworkFee: BigNumberish;
            adapters: {
              adapter: string;
              percent: BigNumberish;
              networkFee: BigNumberish;
              route: {
                index: BigNumberish;
                targetExchange: string;
                percent: BigNumberish;
                payload: BytesLike;
                networkFee: BigNumberish;
              }[];
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiSwap(
      data: {
        fromToken: string;
        fromAmount: BigNumberish;
        toAmount: BigNumberish;
        expectedAmount: BigNumberish;
        beneficiary: string;
        path: {
          to: string;
          totalNetworkFee: BigNumberish;
          adapters: {
            adapter: string;
            percent: BigNumberish;
            networkFee: BigNumberish;
            route: {
              index: BigNumberish;
              targetExchange: string;
              percent: BigNumberish;
              payload: BytesLike;
              networkFee: BigNumberish;
            }[];
          }[];
        }[];
        partner: string;
        feePercent: BigNumberish;
        permit: BytesLike;
        deadline: BigNumberish;
        uuid: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
