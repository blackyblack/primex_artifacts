/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISpotTradingRewardDistributorV2Interface
  extends ethers.utils.Interface {
  functions: {
    "calculateReward(address)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "decreaseRewardPerPeriod(uint256)": FunctionFragment;
    "dns()": FunctionFragment;
    "getPeriodInfo(uint256)": FunctionFragment;
    "getPeriodsWithTraderActivity(address)": FunctionFragment;
    "getSpotTraderActivity(uint256,address)": FunctionFragment;
    "initialPeriodTimestamp()": FunctionFragment;
    "initialize(address,uint256,address,address,address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "periodDuration()": FunctionFragment;
    "periods(uint256)": FunctionFragment;
    "pmx()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "registry()": FunctionFragment;
    "rewardPerPeriod()": FunctionFragment;
    "setRewardPerPeriod(uint256)": FunctionFragment;
    "topUpUndistributedPmxBalance(uint256)": FunctionFragment;
    "traderBalanceVault()": FunctionFragment;
    "treasury()": FunctionFragment;
    "undistributedPMX()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateTraderActivity(address,address,uint256,bytes)": FunctionFragment;
    "withdrawPmx(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRewardPerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPeriodInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodsWithTraderActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotTraderActivity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialPeriodTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpUndistributedPmxBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "undistributedPMX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTraderActivity",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPmx",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRewardPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodsWithTraderActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotTraderActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPeriodTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpUndistributedPmxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undistributedPMX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTraderActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPmx",
    data: BytesLike
  ): Result;

  events: {
    "PmxWithdrawn(uint256)": EventFragment;
    "RewardPerPeriodChanged(uint256)": EventFragment;
    "RewardPerPeriodDecreased(uint256)": EventFragment;
    "SpotTradingClaimReward(address,uint256)": EventFragment;
    "TopUpUndistributedPmxBalance(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PmxWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPerPeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPerPeriodDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpotTradingClaimReward"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TopUpUndistributedPmxBalance"
  ): EventFragment;
}

export type PmxWithdrawnEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type RewardPerPeriodChangedEvent = TypedEvent<
  [BigNumber] & { rewardPerPeriod: BigNumber }
>;

export type RewardPerPeriodDecreasedEvent = TypedEvent<
  [BigNumber] & { rewardPerPeriod: BigNumber }
>;

export type SpotTradingClaimRewardEvent = TypedEvent<
  [string, BigNumber] & { trader: string; amount: BigNumber }
>;

export type TopUpUndistributedPmxBalanceEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class ISpotTradingRewardDistributorV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISpotTradingRewardDistributorV2Interface;

  functions: {
    calculateReward(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; currentPeriod: BigNumber }
    >;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseRewardPerPeriod(
      _rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dns(overrides?: CallOverrides): Promise<[string]>;

    getPeriodInfo(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getPeriodsWithTraderActivity(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSpotTraderActivity(
      periodNumber: BigNumberish,
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialPeriodTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      registry: string,
      periodDuration: BigNumberish,
      priceOracle: string,
      pmx: string,
      traderBalanceVault: string,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    periodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    periods(
      periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    rewardPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardPerPeriod(
      rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topUpUndistributedPmxBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    traderBalanceVault(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    undistributedPMX(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTraderActivity(
      trader: string,
      positionAsset: string,
      positionAmount: BigNumberish,
      positionUsdOracleDataoracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPmx(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateReward(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reward: BigNumber; currentPeriod: BigNumber }
  >;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseRewardPerPeriod(
    _rewardPerPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dns(overrides?: CallOverrides): Promise<string>;

  getPeriodInfo(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getPeriodsWithTraderActivity(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSpotTraderActivity(
    periodNumber: BigNumberish,
    traderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    registry: string,
    periodDuration: BigNumberish,
    priceOracle: string,
    pmx: string,
    traderBalanceVault: string,
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  periods(
    periodNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  pmx(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  rewardPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardPerPeriod(
    rewardPerPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topUpUndistributedPmxBalance(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  traderBalanceVault(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  undistributedPMX(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTraderActivity(
    trader: string,
    positionAsset: string,
    positionAmount: BigNumberish,
    positionUsdOracleDataoracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPmx(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateReward(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; currentPeriod: BigNumber }
    >;

    claimReward(overrides?: CallOverrides): Promise<void>;

    decreaseRewardPerPeriod(
      _rewardPerPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dns(overrides?: CallOverrides): Promise<string>;

    getPeriodInfo(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getPeriodsWithTraderActivity(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSpotTraderActivity(
      periodNumber: BigNumberish,
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registry: string,
      periodDuration: BigNumberish,
      priceOracle: string,
      pmx: string,
      traderBalanceVault: string,
      treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    periods(
      periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    pmx(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    rewardPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardPerPeriod(
      rewardPerPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    topUpUndistributedPmxBalance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    traderBalanceVault(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    undistributedPMX(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateTraderActivity(
      trader: string,
      positionAsset: string,
      positionAmount: BigNumberish,
      positionUsdOracleDataoracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPmx(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "PmxWithdrawn(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    PmxWithdrawn(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "RewardPerPeriodChanged(uint256)"(
      rewardPerPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { rewardPerPeriod: BigNumber }>;

    RewardPerPeriodChanged(
      rewardPerPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { rewardPerPeriod: BigNumber }>;

    "RewardPerPeriodDecreased(uint256)"(
      rewardPerPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { rewardPerPeriod: BigNumber }>;

    RewardPerPeriodDecreased(
      rewardPerPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { rewardPerPeriod: BigNumber }>;

    "SpotTradingClaimReward(address,uint256)"(
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; amount: BigNumber }
    >;

    SpotTradingClaimReward(
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; amount: BigNumber }
    >;

    "TopUpUndistributedPmxBalance(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    TopUpUndistributedPmxBalance(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    calculateReward(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseRewardPerPeriod(
      _rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dns(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodInfo(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodsWithTraderActivity(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotTraderActivity(
      periodNumber: BigNumberish,
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registry: string,
      periodDuration: BigNumberish,
      priceOracle: string,
      pmx: string,
      traderBalanceVault: string,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    periods(
      periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardPerPeriod(
      rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topUpUndistributedPmxBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    traderBalanceVault(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    undistributedPMX(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTraderActivity(
      trader: string,
      positionAsset: string,
      positionAmount: BigNumberish,
      positionUsdOracleDataoracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPmx(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateReward(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseRewardPerPeriod(
      _rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriodInfo(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodsWithTraderActivity(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotTraderActivity(
      periodNumber: BigNumberish,
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialPeriodTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry: string,
      periodDuration: BigNumberish,
      priceOracle: string,
      pmx: string,
      traderBalanceVault: string,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    periodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periods(
      periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardPerPeriod(
      rewardPerPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topUpUndistributedPmxBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    traderBalanceVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    undistributedPMX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTraderActivity(
      trader: string,
      positionAsset: string,
      positionAmount: BigNumberish,
      positionUsdOracleDataoracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPmx(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
