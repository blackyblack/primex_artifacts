/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ActivityRewardDistributorInterface extends ethers.utils.Interface {
  functions: {
    "buckets(address,uint256)": FunctionFragment;
    "claimReward(tuple[])": FunctionFragment;
    "decreaseRewardPerDay(address,uint8,uint256)": FunctionFragment;
    "dns()": FunctionFragment;
    "getBucketAccumulatedReward(address,uint8)": FunctionFragment;
    "getClaimableReward(tuple[],address)": FunctionFragment;
    "getUserInfoFromBucket(address,uint8,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pmx()": FunctionFragment;
    "registry()": FunctionFragment;
    "setupBucket(address,uint8,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "traderBalanceVault()": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateUserActivity(address,address,uint256,uint8)": FunctionFragment;
    "updateUsersActivities(address,address[],uint256[],uint256,uint8)": FunctionFragment;
    "withdrawPmx(address,uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buckets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [{ bucketAddress: string; role: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRewardPerDay",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBucketAccumulatedReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableReward",
    values: [{ bucketAddress: string; role: BigNumberish }[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfoFromBucket",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setupBucket",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUserActivity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsersActivities",
    values: [string, string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPmx",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRewardPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBucketAccumulatedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfoFromBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUsersActivities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPmx",
    data: BytesLike
  ): Result;

  events: {
    "ClaimReward(address,address,uint8,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ClaimRewardEvent = TypedEvent<
  [string, string, number, BigNumber] & {
    user: string;
    bucket: string;
    role: number;
    amount: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class ActivityRewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ActivityRewardDistributorInterface;

  functions: {
    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardIndex: BigNumber;
        lastUpdatedTimestamp: BigNumber;
        rewardPerToken: BigNumber;
        scaledTotalSupply: BigNumber;
        isFinished: boolean;
        fixedReward: BigNumber;
        lastUpdatedRewardTimestamp: BigNumber;
        rewardPerDay: BigNumber;
        totalReward: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    claimReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseRewardPerDay(
      bucket: string,
      role: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dns(overrides?: CallOverrides): Promise<[string]>;

    getBucketAccumulatedReward(
      bucket: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserInfoFromBucket(
      bucket: string,
      role: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          fixedReward: BigNumber;
          lastUpdatedRewardIndex: BigNumber;
          oldBalance: BigNumber;
        }
      ]
    >;

    initialize(
      _pmx: string,
      _dns: string,
      _registry: string,
      _treasury: string,
      _traderBalanceVault: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pmx(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setupBucket(
      bucket: string,
      role: BigNumberish,
      increaseAmount: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    traderBalanceVault(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserActivity(
      bucket: string,
      user: string,
      newBalance: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUsersActivities(
      bucket: string,
      users: string[],
      newBalances: BigNumberish[],
      length: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPmx(
      bucket: string,
      role: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buckets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardIndex: BigNumber;
      lastUpdatedTimestamp: BigNumber;
      rewardPerToken: BigNumber;
      scaledTotalSupply: BigNumber;
      isFinished: boolean;
      fixedReward: BigNumber;
      lastUpdatedRewardTimestamp: BigNumber;
      rewardPerDay: BigNumber;
      totalReward: BigNumber;
      endTimestamp: BigNumber;
    }
  >;

  claimReward(
    bucketsArray: { bucketAddress: string; role: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseRewardPerDay(
    bucket: string,
    role: BigNumberish,
    rewardPerDay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dns(overrides?: CallOverrides): Promise<string>;

  getBucketAccumulatedReward(
    bucket: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableReward(
    bucketsArray: { bucketAddress: string; role: BigNumberish }[],
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfoFromBucket(
    bucket: string,
    role: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fixedReward: BigNumber;
      lastUpdatedRewardIndex: BigNumber;
      oldBalance: BigNumber;
    }
  >;

  initialize(
    _pmx: string,
    _dns: string,
    _registry: string,
    _treasury: string,
    _traderBalanceVault: string,
    _whiteBlackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pmx(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setupBucket(
    bucket: string,
    role: BigNumberish,
    increaseAmount: BigNumberish,
    rewardPerDay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  traderBalanceVault(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserActivity(
    bucket: string,
    user: string,
    newBalance: BigNumberish,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUsersActivities(
    bucket: string,
    users: string[],
    newBalances: BigNumberish[],
    length: BigNumberish,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPmx(
    bucket: string,
    role: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardIndex: BigNumber;
        lastUpdatedTimestamp: BigNumber;
        rewardPerToken: BigNumber;
        scaledTotalSupply: BigNumber;
        isFinished: boolean;
        fixedReward: BigNumber;
        lastUpdatedRewardTimestamp: BigNumber;
        rewardPerDay: BigNumber;
        totalReward: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    claimReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseRewardPerDay(
      bucket: string,
      role: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dns(overrides?: CallOverrides): Promise<string>;

    getBucketAccumulatedReward(
      bucket: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfoFromBucket(
      bucket: string,
      role: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fixedReward: BigNumber;
        lastUpdatedRewardIndex: BigNumber;
        oldBalance: BigNumber;
      }
    >;

    initialize(
      _pmx: string,
      _dns: string,
      _registry: string,
      _treasury: string,
      _traderBalanceVault: string,
      _whiteBlackList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pmx(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setupBucket(
      bucket: string,
      role: BigNumberish,
      increaseAmount: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    traderBalanceVault(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateUserActivity(
      bucket: string,
      user: string,
      newBalance: BigNumberish,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUsersActivities(
      bucket: string,
      users: string[],
      newBalances: BigNumberish[],
      length: BigNumberish,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPmx(
      bucket: string,
      role: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimReward(address,address,uint8,uint256)"(
      user?: string | null,
      bucket?: string | null,
      role?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      { user: string; bucket: string; role: number; amount: BigNumber }
    >;

    ClaimReward(
      user?: string | null,
      bucket?: string | null,
      role?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      { user: string; bucket: string; role: number; amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseRewardPerDay(
      bucket: string,
      role: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dns(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketAccumulatedReward(
      bucket: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfoFromBucket(
      bucket: string,
      role: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pmx: string,
      _dns: string,
      _registry: string,
      _treasury: string,
      _traderBalanceVault: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pmx(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setupBucket(
      bucket: string,
      role: BigNumberish,
      increaseAmount: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traderBalanceVault(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserActivity(
      bucket: string,
      user: string,
      newBalance: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUsersActivities(
      bucket: string,
      users: string[],
      newBalances: BigNumberish[],
      length: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPmx(
      bucket: string,
      role: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buckets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseRewardPerDay(
      bucket: string,
      role: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBucketAccumulatedReward(
      bucket: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableReward(
      bucketsArray: { bucketAddress: string; role: BigNumberish }[],
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfoFromBucket(
      bucket: string,
      role: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pmx: string,
      _dns: string,
      _registry: string,
      _treasury: string,
      _traderBalanceVault: string,
      _whiteBlackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setupBucket(
      bucket: string,
      role: BigNumberish,
      increaseAmount: BigNumberish,
      rewardPerDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traderBalanceVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserActivity(
      bucket: string,
      user: string,
      newBalance: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUsersActivities(
      bucket: string,
      users: string[],
      newBalances: BigNumberish[],
      length: BigNumberish,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPmx(
      bucket: string,
      role: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
