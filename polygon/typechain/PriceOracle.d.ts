/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "chainlinkPriceFeedsUsd(address)": FunctionFragment;
    "eth()": FunctionFragment;
    "gasPriceFeed()": FunctionFragment;
    "getExchangeRate(address,address,bytes)": FunctionFragment;
    "getGasPrice()": FunctionFragment;
    "getOraclePriceDrop(address,address)": FunctionFragment;
    "getOraclePriceDropFeed(address,address)": FunctionFragment;
    "getPairPriceDrop(address,address)": FunctionFragment;
    "increasePairPriceDrop(address,address,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "pairPriceDrops(address,address)": FunctionFragment;
    "pyth()": FunctionFragment;
    "pythPairIds(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "setGasPriceFeed(address)": FunctionFragment;
    "setPairPriceDrop(address,address,uint256)": FunctionFragment;
    "setPyth(address)": FunctionFragment;
    "setSupraPullOracle(address)": FunctionFragment;
    "setSupraStorageOracle(address)": FunctionFragment;
    "setTimeTolerance(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUSDT(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "supraDataFeedID(address,address)": FunctionFragment;
    "supraPullOracle()": FunctionFragment;
    "supraStorageOracle()": FunctionFragment;
    "timeTolerance()": FunctionFragment;
    "treasury()": FunctionFragment;
    "univ3TrustedPairs(uint256,address,address)": FunctionFragment;
    "univ3TypeOracles(uint256)": FunctionFragment;
    "updateChainlinkPriceFeedsUsd(address[],address[])": FunctionFragment;
    "updatePriceDropFeed(address,address,address)": FunctionFragment;
    "updatePriceDropFeeds(tuple[])": FunctionFragment;
    "updatePullOracle(bytes[][],uint256[])": FunctionFragment;
    "updatePythPairId(address[],bytes32[])": FunctionFragment;
    "updateSupraDataFeed(tuple[])": FunctionFragment;
    "updateUniv3TrustedPair(tuple[])": FunctionFragment;
    "updateUniv3TypeOracle(uint256[],address[])": FunctionFragment;
    "usdt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "chainlinkPriceFeedsUsd",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDropFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPriceDrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePairPriceDrop",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pairPriceDrops",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pyth", values?: undefined): string;
  encodeFunctionData(functionFragment: "pythPairIds", values: [string]): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGasPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairPriceDrop",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPyth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSupraPullOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupraStorageOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "setUSDT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supraDataFeedID",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supraPullOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supraStorageOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "univ3TrustedPairs",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "univ3TypeOracles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainlinkPriceFeedsUsd",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeed",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeeds",
    values: [{ assetA: string; assetB: string; priceDropFeed: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePullOracle",
    values: [BytesLike[][], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePythPairId",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupraDataFeed",
    values: [
      {
        tokenA: string;
        tokenB: string;
        feedData: { id: BigNumberish; initialize: boolean };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniv3TrustedPair",
    values: [
      {
        oracleType: BigNumberish;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniv3TypeOracle",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "chainlinkPriceFeedsUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPriceDrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pyth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pythPairIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPyth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSupraPullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupraStorageOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUSDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supraDataFeedID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supraPullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supraStorageOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "univ3TrustedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "univ3TypeOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainlinkPriceFeedsUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePythPairId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupraDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniv3TrustedPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniv3TypeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;

  events: {
    "ChainlinkPriceFeedUpdated(address,address)": EventFragment;
    "GasPriceFeedChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PairPriceDropChanged(address,address,uint256)": EventFragment;
    "PriceDropFeedUpdated(address,address,address)": EventFragment;
    "PriceFeedUpdated(address,address,address)": EventFragment;
    "PythPairIdUpdated(address,bytes32)": EventFragment;
    "SupraDataFeedUpdated(address,address,uint256)": EventFragment;
    "TimeToleranceUpdated(uint256)": EventFragment;
    "Univ3OracleUpdated(uint256,address)": EventFragment;
    "Univ3TrustedPairUpdated(uint256,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkPriceFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPriceFeedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairPriceDropChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceDropFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PythPairIdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupraDataFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeToleranceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Univ3OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Univ3TrustedPairUpdated"): EventFragment;
}

export type ChainlinkPriceFeedUpdatedEvent = TypedEvent<
  [string, string] & { token: string; priceFeed: string }
>;

export type GasPriceFeedChangedEvent = TypedEvent<
  [string] & { priceFeed: string }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PairPriceDropChangedEvent = TypedEvent<
  [string, string, BigNumber] & {
    assetA: string;
    assetB: string;
    pairPriceDrop: BigNumber;
  }
>;

export type PriceDropFeedUpdatedEvent = TypedEvent<
  [string, string, string] & {
    assetA: string;
    assetB: string;
    priceDropFeed: string;
  }
>;

export type PriceFeedUpdatedEvent = TypedEvent<
  [string, string, string] & {
    assetA: string;
    assetB: string;
    priceFeed: string;
  }
>;

export type PythPairIdUpdatedEvent = TypedEvent<
  [string, string] & { token: string; priceFeedId: string }
>;

export type SupraDataFeedUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    tokenA: string;
    tokenB: string;
    id: BigNumber;
  }
>;

export type TimeToleranceUpdatedEvent = TypedEvent<
  [BigNumber] & { timeTolerance: BigNumber }
>;

export type Univ3OracleUpdatedEvent = TypedEvent<
  [BigNumber, string] & { oracleType: BigNumber; oracle: string }
>;

export type Univ3TrustedPairUpdatedEvent = TypedEvent<
  [BigNumber, string, string, boolean] & {
    oracleType: BigNumber;
    tokenA: string;
    tokenB: string;
    isTrusted: boolean;
  }
>;

export class PriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceOracleInterface;

  functions: {
    chainlinkPriceFeedsUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eth(overrides?: CallOverrides): Promise<[string]>;

    gasPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      oracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGasPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceDrop: BigNumber }>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _eth: string,
      _usdt: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pyth(overrides?: CallOverrides): Promise<[string]>;

    pythPairIds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPyth(
      _pyth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupraPullOracle(
      _supraPullOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupraStorageOracle(
      _supraStorageOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeTolerance(
      _timeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supraDataFeedID(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { id: BigNumber; initialize: boolean }>;

    supraPullOracle(overrides?: CallOverrides): Promise<[string]>;

    supraStorageOracle(overrides?: CallOverrides): Promise<[string]>;

    timeTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    univ3TrustedPairs(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    univ3TypeOracles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateChainlinkPriceFeedsUsd(
      _tokens: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceDropFeeds(
      _updateParams: {
        assetA: string;
        assetB: string;
        priceDropFeed: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePullOracle(
      _data: BytesLike[][],
      _oracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePythPairId(
      _tokens: string[],
      _priceFeedIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupraDataFeed(
      _params: {
        tokenA: string;
        tokenB: string;
        feedData: { id: BigNumberish; initialize: boolean };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUniv3TrustedPair(
      _updateParams: {
        oracleType: BigNumberish;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUniv3TypeOracle(
      _oracleTypes: BigNumberish[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;
  };

  chainlinkPriceFeedsUsd(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  eth(overrides?: CallOverrides): Promise<string>;

  gasPriceFeed(overrides?: CallOverrides): Promise<string>;

  getExchangeRate(
    assetA: string,
    assetB: string,
    oracleData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getOraclePriceDrop(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOraclePriceDropFeed(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairPriceDrop(
    _assetA: string,
    _assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increasePairPriceDrop(
    _assetA: string,
    _assetB: string,
    _pairPriceDrop: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _eth: string,
    _usdt: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairPriceDrops(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pyth(overrides?: CallOverrides): Promise<string>;

  pythPairIds(arg0: string, overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setGasPriceFeed(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairPriceDrop(
    _assetA: string,
    _assetB: string,
    _pairPriceDrop: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPyth(
    _pyth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupraPullOracle(
    _supraPullOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupraStorageOracle(
    _supraStorageOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeTolerance(
    _timeTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDT(
    _usdt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supraDataFeedID(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { id: BigNumber; initialize: boolean }>;

  supraPullOracle(overrides?: CallOverrides): Promise<string>;

  supraStorageOracle(overrides?: CallOverrides): Promise<string>;

  timeTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  univ3TrustedPairs(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  univ3TypeOracles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateChainlinkPriceFeedsUsd(
    _tokens: string[],
    _feeds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceDropFeed(
    assetA: string,
    assetB: string,
    priceDropFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceDropFeeds(
    _updateParams: { assetA: string; assetB: string; priceDropFeed: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePullOracle(
    _data: BytesLike[][],
    _oracleTypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePythPairId(
    _tokens: string[],
    _priceFeedIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupraDataFeed(
    _params: {
      tokenA: string;
      tokenB: string;
      feedData: { id: BigNumberish; initialize: boolean };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUniv3TrustedPair(
    _updateParams: {
      oracleType: BigNumberish;
      tokenA: string;
      tokenB: string;
      isTrusted: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUniv3TypeOracle(
    _oracleTypes: BigNumberish[],
    _oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainlinkPriceFeedsUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    eth(overrides?: CallOverrides): Promise<string>;

    gasPriceFeed(overrides?: CallOverrides): Promise<string>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      oracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _eth: string,
      _usdt: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyth(overrides?: CallOverrides): Promise<string>;

    pythPairIds(arg0: string, overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPyth(_pyth: string, overrides?: CallOverrides): Promise<void>;

    setSupraPullOracle(
      _supraPullOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupraStorageOracle(
      _supraStorageOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeTolerance(
      _timeTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setUSDT(_usdt: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supraDataFeedID(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { id: BigNumber; initialize: boolean }>;

    supraPullOracle(overrides?: CallOverrides): Promise<string>;

    supraStorageOracle(overrides?: CallOverrides): Promise<string>;

    timeTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    univ3TrustedPairs(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    univ3TypeOracles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateChainlinkPriceFeedsUsd(
      _tokens: string[],
      _feeds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceDropFeeds(
      _updateParams: {
        assetA: string;
        assetB: string;
        priceDropFeed: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePullOracle(
      _data: BytesLike[][],
      _oracleTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePythPairId(
      _tokens: string[],
      _priceFeedIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupraDataFeed(
      _params: {
        tokenA: string;
        tokenB: string;
        feedData: { id: BigNumberish; initialize: boolean };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniv3TrustedPair(
      _updateParams: {
        oracleType: BigNumberish;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniv3TypeOracle(
      _oracleTypes: BigNumberish[],
      _oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChainlinkPriceFeedUpdated(address,address)"(
      token?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<[string, string], { token: string; priceFeed: string }>;

    ChainlinkPriceFeedUpdated(
      token?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<[string, string], { token: string; priceFeed: string }>;

    "GasPriceFeedChanged(address)"(
      priceFeed?: null
    ): TypedEventFilter<[string], { priceFeed: string }>;

    GasPriceFeedChanged(
      priceFeed?: null
    ): TypedEventFilter<[string], { priceFeed: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "PairPriceDropChanged(address,address,uint256)"(
      assetA?: string | null,
      assetB?: string | null,
      pairPriceDrop?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; pairPriceDrop: BigNumber }
    >;

    PairPriceDropChanged(
      assetA?: string | null,
      assetB?: string | null,
      pairPriceDrop?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; pairPriceDrop: BigNumber }
    >;

    "PriceDropFeedUpdated(address,address,address)"(
      assetA?: string | null,
      assetB?: string | null,
      priceDropFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceDropFeed: string }
    >;

    PriceDropFeedUpdated(
      assetA?: string | null,
      assetB?: string | null,
      priceDropFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceDropFeed: string }
    >;

    "PriceFeedUpdated(address,address,address)"(
      assetA?: string | null,
      assetB?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceFeed: string }
    >;

    PriceFeedUpdated(
      assetA?: string | null,
      assetB?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceFeed: string }
    >;

    "PythPairIdUpdated(address,bytes32)"(
      token?: string | null,
      priceFeedId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { token: string; priceFeedId: string }
    >;

    PythPairIdUpdated(
      token?: string | null,
      priceFeedId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { token: string; priceFeedId: string }
    >;

    "SupraDataFeedUpdated(address,address,uint256)"(
      tokenA?: string | null,
      tokenB?: string | null,
      id?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenA: string; tokenB: string; id: BigNumber }
    >;

    SupraDataFeedUpdated(
      tokenA?: string | null,
      tokenB?: string | null,
      id?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenA: string; tokenB: string; id: BigNumber }
    >;

    "TimeToleranceUpdated(uint256)"(
      timeTolerance?: null
    ): TypedEventFilter<[BigNumber], { timeTolerance: BigNumber }>;

    TimeToleranceUpdated(
      timeTolerance?: null
    ): TypedEventFilter<[BigNumber], { timeTolerance: BigNumber }>;

    "Univ3OracleUpdated(uint256,address)"(
      oracleType?: BigNumberish | null,
      oracle?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { oracleType: BigNumber; oracle: string }
    >;

    Univ3OracleUpdated(
      oracleType?: BigNumberish | null,
      oracle?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { oracleType: BigNumber; oracle: string }
    >;

    "Univ3TrustedPairUpdated(uint256,address,address,bool)"(
      oracleType?: BigNumberish | null,
      tokenA?: string | null,
      tokenB?: string | null,
      isTrusted?: null
    ): TypedEventFilter<
      [BigNumber, string, string, boolean],
      {
        oracleType: BigNumber;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }
    >;

    Univ3TrustedPairUpdated(
      oracleType?: BigNumberish | null,
      tokenA?: string | null,
      tokenB?: string | null,
      isTrusted?: null
    ): TypedEventFilter<
      [BigNumber, string, string, boolean],
      {
        oracleType: BigNumber;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }
    >;
  };

  estimateGas: {
    chainlinkPriceFeedsUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eth(overrides?: CallOverrides): Promise<BigNumber>;

    gasPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      oracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _eth: string,
      _usdt: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyth(overrides?: CallOverrides): Promise<BigNumber>;

    pythPairIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPyth(
      _pyth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupraPullOracle(
      _supraPullOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupraStorageOracle(
      _supraStorageOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeTolerance(
      _timeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supraDataFeedID(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supraPullOracle(overrides?: CallOverrides): Promise<BigNumber>;

    supraStorageOracle(overrides?: CallOverrides): Promise<BigNumber>;

    timeTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    univ3TrustedPairs(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    univ3TypeOracles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateChainlinkPriceFeedsUsd(
      _tokens: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceDropFeeds(
      _updateParams: {
        assetA: string;
        assetB: string;
        priceDropFeed: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePullOracle(
      _data: BytesLike[][],
      _oracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePythPairId(
      _tokens: string[],
      _priceFeedIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupraDataFeed(
      _params: {
        tokenA: string;
        tokenB: string;
        feedData: { id: BigNumberish; initialize: boolean };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUniv3TrustedPair(
      _updateParams: {
        oracleType: BigNumberish;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUniv3TypeOracle(
      _oracleTypes: BigNumberish[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainlinkPriceFeedsUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      oracleData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _eth: string,
      _usdt: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pythPairIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPyth(
      _pyth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupraPullOracle(
      _supraPullOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupraStorageOracle(
      _supraStorageOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeTolerance(
      _timeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supraDataFeedID(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supraPullOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supraStorageOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    univ3TrustedPairs(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    univ3TypeOracles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateChainlinkPriceFeedsUsd(
      _tokens: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceDropFeeds(
      _updateParams: {
        assetA: string;
        assetB: string;
        priceDropFeed: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePullOracle(
      _data: BytesLike[][],
      _oracleTypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePythPairId(
      _tokens: string[],
      _priceFeedIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupraDataFeed(
      _params: {
        tokenA: string;
        tokenB: string;
        feedData: { id: BigNumberish; initialize: boolean };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUniv3TrustedPair(
      _updateParams: {
        oracleType: BigNumberish;
        tokenA: string;
        tokenB: string;
        isTrusted: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUniv3TypeOracle(
      _oracleTypes: BigNumberish[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
