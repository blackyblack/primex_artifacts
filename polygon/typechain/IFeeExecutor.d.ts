/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFeeExecutorInterface extends ethers.utils.Interface {
  functions: {
    "getAccumulatedAmount(address,uint256)": FunctionFragment;
    "getAvailableAmount(address,uint256)": FunctionFragment;
    "getBonus(address,uint256)": FunctionFragment;
    "setTierBonus(address,uint256[],tuple[])": FunctionFragment;
    "updateBonus(uint256)": FunctionFragment;
    "updateBonuses(address[],uint256[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccumulatedAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierBonus",
    values: [
      string,
      BigNumberish[],
      {
        percent: BigNumberish;
        maxAmount: BigNumberish;
        duration: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonuses",
    values: [string[], BigNumberish[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccumulatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTierBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonuses",
    data: BytesLike
  ): Result;

  events: {};
}

export class IFeeExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFeeExecutorInterface;

  functions: {
    getAccumulatedAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBonus(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nftId: BigNumber;
          bucket: string;
          percent: BigNumber;
          maxAmount: BigNumber;
          accumulatedAmount: BigNumber;
          lastUpdatedIndex: BigNumber;
          deadline: BigNumber;
          claimedAmount: BigNumber;
        }
      ]
    >;

    setTierBonus(
      _bucket: string,
      _tiers: BigNumberish[],
      _bonuses: {
        percent: BigNumberish;
        maxAmount: BigNumberish;
        duration: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBonus(uint256)"(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBonus(address,uint256,address,uint256)"(
      _user: string,
      _oldScaledBalance: BigNumberish,
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBonuses(
      _users: string[],
      _oldBalances: BigNumberish[],
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccumulatedAmount(
    _user: string,
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableAmount(
    _user: string,
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBonus(
    _user: string,
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      bucket: string;
      percent: BigNumber;
      maxAmount: BigNumber;
      accumulatedAmount: BigNumber;
      lastUpdatedIndex: BigNumber;
      deadline: BigNumber;
      claimedAmount: BigNumber;
    }
  >;

  setTierBonus(
    _bucket: string,
    _tiers: BigNumberish[],
    _bonuses: {
      percent: BigNumberish;
      maxAmount: BigNumberish;
      duration: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBonus(uint256)"(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBonus(address,uint256,address,uint256)"(
    _user: string,
    _oldScaledBalance: BigNumberish,
    _bucket: string,
    _currentIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBonuses(
    _users: string[],
    _oldBalances: BigNumberish[],
    _bucket: string,
    _currentIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccumulatedAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonus(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        bucket: string;
        percent: BigNumber;
        maxAmount: BigNumber;
        accumulatedAmount: BigNumber;
        lastUpdatedIndex: BigNumber;
        deadline: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    setTierBonus(
      _bucket: string,
      _tiers: BigNumberish[],
      _bonuses: {
        percent: BigNumberish;
        maxAmount: BigNumberish;
        duration: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBonus(uint256)"(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBonus(address,uint256,address,uint256)"(
      _user: string,
      _oldScaledBalance: BigNumberish,
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBonuses(
      _users: string[],
      _oldBalances: BigNumberish[],
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccumulatedAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBonus(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTierBonus(
      _bucket: string,
      _tiers: BigNumberish[],
      _bonuses: {
        percent: BigNumberish;
        maxAmount: BigNumberish;
        duration: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBonus(uint256)"(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBonus(address,uint256,address,uint256)"(
      _user: string,
      _oldScaledBalance: BigNumberish,
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBonuses(
      _users: string[],
      _oldBalances: BigNumberish[],
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccumulatedAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableAmount(
      _user: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBonus(
      _user: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTierBonus(
      _bucket: string,
      _tiers: BigNumberish[],
      _bonuses: {
        percent: BigNumberish;
        maxAmount: BigNumberish;
        duration: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBonus(uint256)"(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBonus(address,uint256,address,uint256)"(
      _user: string,
      _oldScaledBalance: BigNumberish,
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBonuses(
      _users: string[],
      _oldBalances: BigNumberish[],
      _bucket: string,
      _currentIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
