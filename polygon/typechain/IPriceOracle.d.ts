/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "eth()": FunctionFragment;
    "gasPriceFeed()": FunctionFragment;
    "getDirectPriceFeed(address,address)": FunctionFragment;
    "getExchangeRate(address,address)": FunctionFragment;
    "getGasPrice()": FunctionFragment;
    "getOraclePriceDrop(address,address)": FunctionFragment;
    "getOraclePriceDropFeed(address,address)": FunctionFragment;
    "getPairPriceDrop(address,address)": FunctionFragment;
    "getPriceFeedsPair(address,address)": FunctionFragment;
    "increasePairPriceDrop(address,address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "pairPriceDrops(address,address)": FunctionFragment;
    "registry()": FunctionFragment;
    "setGasPriceFeed(address)": FunctionFragment;
    "setPairPriceDrop(address,address,uint256)": FunctionFragment;
    "updatePriceDropFeed(address,address,address)": FunctionFragment;
    "updatePriceFeed(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDropFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPriceDrop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedsPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePairPriceDrop",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pairPriceDrops",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGasPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairPriceDrop",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeed",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedsPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPriceDrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;

  events: {
    "GasPriceFeedChanged(address)": EventFragment;
    "PairPriceDropChanged(address,address,uint256)": EventFragment;
    "PriceDropFeedUpdated(address,address,address)": EventFragment;
    "PriceFeedUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GasPriceFeedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairPriceDropChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceDropFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;
}

export type GasPriceFeedChangedEvent = TypedEvent<
  [string] & { priceFeed: string }
>;

export type PairPriceDropChangedEvent = TypedEvent<
  [string, string, BigNumber] & {
    assetA: string;
    assetB: string;
    pairPriceDrop: BigNumber;
  }
>;

export type PriceDropFeedUpdatedEvent = TypedEvent<
  [string, string, string] & {
    assetA: string;
    assetB: string;
    priceDropFeed: string;
  }
>;

export type PriceFeedUpdatedEvent = TypedEvent<
  [string, string, string] & {
    assetA: string;
    assetB: string;
    priceFeed: string;
  }
>;

export class IPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPriceOracleInterface;

  functions: {
    eth(overrides?: CallOverrides): Promise<[string]>;

    gasPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getDirectPriceFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFeedsPair(
      baseAsset: string,
      quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _eth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeed(
      assetA: string,
      assetB: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  eth(overrides?: CallOverrides): Promise<string>;

  gasPriceFeed(overrides?: CallOverrides): Promise<string>;

  getDirectPriceFeed(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getExchangeRate(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getOraclePriceDrop(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOraclePriceDropFeed(
    assetA: string,
    assetB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairPriceDrop(
    _assetA: string,
    _assetB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFeedsPair(
    baseAsset: string,
    quoteAsset: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  increasePairPriceDrop(
    _assetA: string,
    _assetB: string,
    _pairPriceDrop: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _eth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairPriceDrops(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  setGasPriceFeed(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairPriceDrop(
    _assetA: string,
    _assetB: string,
    _pairPriceDrop: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceDropFeed(
    assetA: string,
    assetB: string,
    priceDropFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeed(
    assetA: string,
    assetB: string,
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    eth(overrides?: CallOverrides): Promise<string>;

    gasPriceFeed(overrides?: CallOverrides): Promise<string>;

    getDirectPriceFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeedsPair(
      baseAsset: string,
      quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _eth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeed(
      assetA: string,
      assetB: string,
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GasPriceFeedChanged(address)"(
      priceFeed?: null
    ): TypedEventFilter<[string], { priceFeed: string }>;

    GasPriceFeedChanged(
      priceFeed?: null
    ): TypedEventFilter<[string], { priceFeed: string }>;

    "PairPriceDropChanged(address,address,uint256)"(
      assetA?: string | null,
      assetB?: string | null,
      pairPriceDrop?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; pairPriceDrop: BigNumber }
    >;

    PairPriceDropChanged(
      assetA?: string | null,
      assetB?: string | null,
      pairPriceDrop?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { assetA: string; assetB: string; pairPriceDrop: BigNumber }
    >;

    "PriceDropFeedUpdated(address,address,address)"(
      assetA?: string | null,
      assetB?: string | null,
      priceDropFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceDropFeed: string }
    >;

    PriceDropFeedUpdated(
      assetA?: string | null,
      assetB?: string | null,
      priceDropFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceDropFeed: string }
    >;

    "PriceFeedUpdated(address,address,address)"(
      assetA?: string | null,
      assetB?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceFeed: string }
    >;

    PriceFeedUpdated(
      assetA?: string | null,
      assetB?: string | null,
      priceFeed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetA: string; assetB: string; priceFeed: string }
    >;
  };

  estimateGas: {
    eth(overrides?: CallOverrides): Promise<BigNumber>;

    gasPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getDirectPriceFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeedsPair(
      baseAsset: string,
      quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _eth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceFeed(
      assetA: string,
      assetB: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDirectPriceFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRate(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOraclePriceDrop(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOraclePriceDropFeed(
      assetA: string,
      assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairPriceDrop(
      _assetA: string,
      _assetB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFeedsPair(
      baseAsset: string,
      quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _eth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairPriceDrops(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGasPriceFeed(
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairPriceDrop(
      _assetA: string,
      _assetB: string,
      _pairPriceDrop: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceDropFeed(
      assetA: string,
      assetB: string,
      priceDropFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeed(
      assetA: string,
      assetB: string,
      priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
